Terminals unused in grammar

    _unaryminus
    _new


State 31 conflicts: 1 reduce/reduce
State 34 conflicts: 1 reduce/reduce
State 74 conflicts: 1 reduce/reduce
State 75 conflicts: 1 reduce/reduce
State 77 conflicts: 1 shift/reduce
State 82 conflicts: 1 shift/reduce
State 101 conflicts: 1 shift/reduce
State 188 conflicts: 1 shift/reduce


Grammar

    0 $accept: START $end

    1 START: PROGRAM

    2 PROGRAM: DECLP

    3 DECLP: DECL DECLP
    4      | DECL

    5 DECL: VARIABLEDECL
    6     | FUNCTIONDECL
    7     | CLASSDECL
    8     | INTERFACEDECL

    9 VARIABLEDECL: VARIABLE _semicolon
   10             | TYPE _id _assignop CONSTANT

   11 VARIABLE: TYPE _id

   12 TYPE: _int
   13     | _double
   14     | _boolean
   15     | _string
   16     | TYPE _leftbracket _rightbracket
   17     | _id

   18 FUNCTIONDECL: TYPE _id _leftparen FORMALS _rightparen STMTBLOCK
   19             | _void _id _leftparen FORMALS _rightparen STMTBLOCK

   20 FORMALS: VARIABLEPC
   21        | %empty

   22 VARIABLEPC: _comma VARIABLE VARIABLEPC
   23           | VARIABLE VARIABLEPC
   24           | %empty

   25 CLASSDECL: _class _id CLASSDECLO _leftbrace FIELDM _rightbrace

   26 CLASSDECLO: _extends _id
   27           | _implements IDPC
   28           | _extends _id _implements IDPC
   29           | %empty

   30 IDPC: _id _comma IDPC
   31     | _id

   32 FIELDM: FIELD FIELDM
   33       | %empty

   34 FIELD: VARIABLEDECL
   35      | FUNCTIONDECL

   36 INTERFACEDECL: _interface _id _leftbrace PROTOTYPEM _rightbrace

   37 PROTOTYPEM: PROTOTYPE PROTOTYPEM
   38           | %empty

   39 PROTOTYPE: TYPE _id _leftparen FORMALS _rightparen _semicolon
   40          | _void _id _leftparen FORMALS _rightparen _semicolon

   41 STMTBLOCK: _leftbrace VARIABLEDECLM STMTM _rightbrace

   42 VARIABLEDECLM: VARIABLEDECL VARIABLEDECLM
   43              | %empty

   44 STMTM: STMT STMTM
   45      | %empty

   46 STMT: EXPRO _semicolon
   47     | IFSTMT
   48     | WHILESTMT
   49     | FORSTMT
   50     | BREAKSTMT
   51     | RETURNSTMT
   52     | PRINTSTMT
   53     | STMTBLOCK

   54 EXPRO: EXPR
   55      | %empty

   56 IFSTMT: _if _leftparen EXPR _rightparen STMT ELSESTMTO

   57 ELSESTMTO: _else STMT
   58          | %empty

   59 WHILESTMT: _while _leftparen EXPR _rightparen STMT

   60 FORSTMT: _for _leftparen EXPRO _semicolon EXPR _semicolon EXPRO _rightparen STMT

   61 BREAKSTMT: _break _semicolon

   62 RETURNSTMT: _return EXPRO _semicolon

   63 PRINTSTMT: _println _leftparen EXPRPC _rightparen _semicolon

   64 EXPRPC: EXPR _comma EXPRPC
   65       | EXPR

   66 EXPR: LVALUE _assignop EXPR
   67     | CONSTANT
   68     | LVALUE
   69     | _this
   70     | CALL
   71     | _leftparen EXPR _rightparen
   72     | EXPR _plus EXPR
   73     | EXPR _minus EXPR
   74     | EXPR _multiplication EXPR
   75     | EXPR _division EXPR
   76     | EXPR _mod EXPR
   77     | _minus EXPR
   78     | EXPR _less EXPR
   79     | EXPR _lessequal EXPR
   80     | EXPR _greater EXPR
   81     | EXPR _greaterequal EXPR
   82     | EXPR _equal EXPR
   83     | EXPR _notequal EXPR
   84     | EXPR _and EXPR
   85     | EXPR _or EXPR
   86     | _not EXPR
   87     | _readln _leftparen _rightparen
   88     | _newarray _leftparen _intconstant _comma TYPE _rightparen

   89 LVALUE: _id
   90       | LVALUE _leftbracket EXPR _rightbracket
   91       | LVALUE _period _id

   92 CALL: _id _leftparen ACTUALS _rightparen
   93     | _id _period _id _leftparen ACTUALS _rightparen

   94 ACTUALS: EXPRPC
   95        | %empty

   96 CONSTANT: _intconstant
   97         | _doubleconstant
   98         | _stringconstant
   99         | _booleanconstant
  100         | _null


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    _leftbracket (258) 16 90
    _period (259) 91 93
    _not (260) 86
    _unaryminus (261)
    _plus (262) 72
    _minus (263) 73 77
    _multiplication (264) 74
    _division (265) 75
    _mod (266) 76
    _less (267) 78
    _lessequal (268) 79
    _greater (269) 80
    _greaterequal (270) 81
    _equal (271) 82
    _notequal (272) 83
    _and (273) 84
    _or (274) 85
    _assignop (275) 10 66
    _boolean (276) 14
    _break (277) 61
    _class (278) 25
    _double (279) 13
    _else (280) 57
    _extends (281) 26 28
    _for (282) 60
    _if (283) 56
    _implements (284) 27 28
    _int (285) 12
    _interface (286) 36
    _new (287)
    _newarray (288) 88
    _null (289) 100
    _println (290) 63
    _readln (291) 87
    _return (292) 62
    _string (293) 15
    _this (294) 69
    _void (295) 19 40
    _while (296) 59
    _semicolon (297) 9 39 40 46 60 61 62 63
    _comma (298) 22 30 64 88
    _leftparen (299) 18 19 39 40 56 59 60 63 71 87 88 92 93
    _rightparen (300) 18 19 39 40 56 59 60 63 71 87 88 92 93
    _rightbracket (301) 16 90
    _leftbrace (302) 25 36 41
    _rightbrace (303) 25 36 41
    _intconstant (304) 88 96
    _doubleconstant (305) 97
    _stringconstant (306) 98
    _booleanconstant (307) 99
    _id (308) 10 11 17 18 19 25 26 28 30 31 36 39 40 89 91 92 93


Nonterminals, with rules where they appear

    $accept (54)
        on left: 0
    START (55)
        on left: 1
        on right: 0
    PROGRAM (56)
        on left: 2
        on right: 1
    DECLP (57)
        on left: 3 4
        on right: 2 3
    DECL (58)
        on left: 5 6 7 8
        on right: 3 4
    VARIABLEDECL (59)
        on left: 9 10
        on right: 5 34 42
    VARIABLE (60)
        on left: 11
        on right: 9 22 23
    TYPE (61)
        on left: 12 13 14 15 16 17
        on right: 10 11 16 18 39 88
    FUNCTIONDECL (62)
        on left: 18 19
        on right: 6 35
    FORMALS (63)
        on left: 20 21
        on right: 18 19 39 40
    VARIABLEPC (64)
        on left: 22 23 24
        on right: 20 22 23
    CLASSDECL (65)
        on left: 25
        on right: 7
    CLASSDECLO (66)
        on left: 26 27 28 29
        on right: 25
    IDPC (67)
        on left: 30 31
        on right: 27 28 30
    FIELDM (68)
        on left: 32 33
        on right: 25 32
    FIELD (69)
        on left: 34 35
        on right: 32
    INTERFACEDECL (70)
        on left: 36
        on right: 8
    PROTOTYPEM (71)
        on left: 37 38
        on right: 36 37
    PROTOTYPE (72)
        on left: 39 40
        on right: 37
    STMTBLOCK (73)
        on left: 41
        on right: 18 19 53
    VARIABLEDECLM (74)
        on left: 42 43
        on right: 41 42
    STMTM (75)
        on left: 44 45
        on right: 41 44
    STMT (76)
        on left: 46 47 48 49 50 51 52 53
        on right: 44 56 57 59 60
    EXPRO (77)
        on left: 54 55
        on right: 46 60 62
    IFSTMT (78)
        on left: 56
        on right: 47
    ELSESTMTO (79)
        on left: 57 58
        on right: 56
    WHILESTMT (80)
        on left: 59
        on right: 48
    FORSTMT (81)
        on left: 60
        on right: 49
    BREAKSTMT (82)
        on left: 61
        on right: 50
    RETURNSTMT (83)
        on left: 62
        on right: 51
    PRINTSTMT (84)
        on left: 63
        on right: 52
    EXPRPC (85)
        on left: 64 65
        on right: 63 64 94
    EXPR (86)
        on left: 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88
        on right: 54 56 59 60 64 65 66 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 90
    LVALUE (87)
        on left: 89 90 91
        on right: 66 68 90 91
    CALL (88)
        on left: 92 93
        on right: 70
    ACTUALS (89)
        on left: 94 95
        on right: 92 93
    CONSTANT (90)
        on left: 96 97 98 99 100
        on right: 10 67


State 0

    0 $accept: . START $end

    _boolean    shift, and go to state 1
    _class      shift, and go to state 2
    _double     shift, and go to state 3
    _int        shift, and go to state 4
    _interface  shift, and go to state 5
    _string     shift, and go to state 6
    _void       shift, and go to state 7
    _id         shift, and go to state 8

    START          go to state 9
    PROGRAM        go to state 10
    DECLP          go to state 11
    DECL           go to state 12
    VARIABLEDECL   go to state 13
    VARIABLE       go to state 14
    TYPE           go to state 15
    FUNCTIONDECL   go to state 16
    CLASSDECL      go to state 17
    INTERFACEDECL  go to state 18


State 1

   14 TYPE: _boolean .

    $default  reduce using rule 14 (TYPE)


State 2

   25 CLASSDECL: _class . _id CLASSDECLO _leftbrace FIELDM _rightbrace

    _id  shift, and go to state 19


State 3

   13 TYPE: _double .

    $default  reduce using rule 13 (TYPE)


State 4

   12 TYPE: _int .

    $default  reduce using rule 12 (TYPE)


State 5

   36 INTERFACEDECL: _interface . _id _leftbrace PROTOTYPEM _rightbrace

    _id  shift, and go to state 20


State 6

   15 TYPE: _string .

    $default  reduce using rule 15 (TYPE)


State 7

   19 FUNCTIONDECL: _void . _id _leftparen FORMALS _rightparen STMTBLOCK

    _id  shift, and go to state 21


State 8

   17 TYPE: _id .

    $default  reduce using rule 17 (TYPE)


State 9

    0 $accept: START . $end

    $end  shift, and go to state 22


State 10

    1 START: PROGRAM .

    $default  reduce using rule 1 (START)


State 11

    2 PROGRAM: DECLP .

    $default  reduce using rule 2 (PROGRAM)


State 12

    3 DECLP: DECL . DECLP
    4      | DECL .

    _boolean    shift, and go to state 1
    _class      shift, and go to state 2
    _double     shift, and go to state 3
    _int        shift, and go to state 4
    _interface  shift, and go to state 5
    _string     shift, and go to state 6
    _void       shift, and go to state 7
    _id         shift, and go to state 8

    $default  reduce using rule 4 (DECLP)

    DECLP          go to state 23
    DECL           go to state 12
    VARIABLEDECL   go to state 13
    VARIABLE       go to state 14
    TYPE           go to state 15
    FUNCTIONDECL   go to state 16
    CLASSDECL      go to state 17
    INTERFACEDECL  go to state 18


State 13

    5 DECL: VARIABLEDECL .

    $default  reduce using rule 5 (DECL)


State 14

    9 VARIABLEDECL: VARIABLE . _semicolon

    _semicolon  shift, and go to state 24


State 15

   10 VARIABLEDECL: TYPE . _id _assignop CONSTANT
   11 VARIABLE: TYPE . _id
   16 TYPE: TYPE . _leftbracket _rightbracket
   18 FUNCTIONDECL: TYPE . _id _leftparen FORMALS _rightparen STMTBLOCK

    _leftbracket  shift, and go to state 25
    _id           shift, and go to state 26


State 16

    6 DECL: FUNCTIONDECL .

    $default  reduce using rule 6 (DECL)


State 17

    7 DECL: CLASSDECL .

    $default  reduce using rule 7 (DECL)


State 18

    8 DECL: INTERFACEDECL .

    $default  reduce using rule 8 (DECL)


State 19

   25 CLASSDECL: _class _id . CLASSDECLO _leftbrace FIELDM _rightbrace

    _extends     shift, and go to state 27
    _implements  shift, and go to state 28

    $default  reduce using rule 29 (CLASSDECLO)

    CLASSDECLO  go to state 29


State 20

   36 INTERFACEDECL: _interface _id . _leftbrace PROTOTYPEM _rightbrace

    _leftbrace  shift, and go to state 30


State 21

   19 FUNCTIONDECL: _void _id . _leftparen FORMALS _rightparen STMTBLOCK

    _leftparen  shift, and go to state 31


State 22

    0 $accept: START $end .

    $default  accept


State 23

    3 DECLP: DECL DECLP .

    $default  reduce using rule 3 (DECLP)


State 24

    9 VARIABLEDECL: VARIABLE _semicolon .

    $default  reduce using rule 9 (VARIABLEDECL)


State 25

   16 TYPE: TYPE _leftbracket . _rightbracket

    _rightbracket  shift, and go to state 32


State 26

   10 VARIABLEDECL: TYPE _id . _assignop CONSTANT
   11 VARIABLE: TYPE _id .
   18 FUNCTIONDECL: TYPE _id . _leftparen FORMALS _rightparen STMTBLOCK

    _assignop   shift, and go to state 33
    _leftparen  shift, and go to state 34

    $default  reduce using rule 11 (VARIABLE)


State 27

   26 CLASSDECLO: _extends . _id
   28           | _extends . _id _implements IDPC

    _id  shift, and go to state 35


State 28

   27 CLASSDECLO: _implements . IDPC

    _id  shift, and go to state 36

    IDPC  go to state 37


State 29

   25 CLASSDECL: _class _id CLASSDECLO . _leftbrace FIELDM _rightbrace

    _leftbrace  shift, and go to state 38


State 30

   36 INTERFACEDECL: _interface _id _leftbrace . PROTOTYPEM _rightbrace

    _boolean  shift, and go to state 1
    _double   shift, and go to state 3
    _int      shift, and go to state 4
    _string   shift, and go to state 6
    _void     shift, and go to state 39
    _id       shift, and go to state 8

    $default  reduce using rule 38 (PROTOTYPEM)

    TYPE        go to state 40
    PROTOTYPEM  go to state 41
    PROTOTYPE   go to state 42


State 31

   19 FUNCTIONDECL: _void _id _leftparen . FORMALS _rightparen STMTBLOCK

    _boolean  shift, and go to state 1
    _double   shift, and go to state 3
    _int      shift, and go to state 4
    _string   shift, and go to state 6
    _comma    shift, and go to state 43
    _id       shift, and go to state 8

    _rightparen  reduce using rule 21 (FORMALS)
    _rightparen  [reduce using rule 24 (VARIABLEPC)]
    $default     reduce using rule 21 (FORMALS)

    VARIABLE    go to state 44
    TYPE        go to state 45
    FORMALS     go to state 46
    VARIABLEPC  go to state 47


State 32

   16 TYPE: TYPE _leftbracket _rightbracket .

    $default  reduce using rule 16 (TYPE)


State 33

   10 VARIABLEDECL: TYPE _id _assignop . CONSTANT

    _null             shift, and go to state 48
    _intconstant      shift, and go to state 49
    _doubleconstant   shift, and go to state 50
    _stringconstant   shift, and go to state 51
    _booleanconstant  shift, and go to state 52

    CONSTANT  go to state 53


State 34

   18 FUNCTIONDECL: TYPE _id _leftparen . FORMALS _rightparen STMTBLOCK

    _boolean  shift, and go to state 1
    _double   shift, and go to state 3
    _int      shift, and go to state 4
    _string   shift, and go to state 6
    _comma    shift, and go to state 43
    _id       shift, and go to state 8

    _rightparen  reduce using rule 21 (FORMALS)
    _rightparen  [reduce using rule 24 (VARIABLEPC)]
    $default     reduce using rule 21 (FORMALS)

    VARIABLE    go to state 44
    TYPE        go to state 45
    FORMALS     go to state 54
    VARIABLEPC  go to state 47


State 35

   26 CLASSDECLO: _extends _id .
   28           | _extends _id . _implements IDPC

    _implements  shift, and go to state 55

    $default  reduce using rule 26 (CLASSDECLO)


State 36

   30 IDPC: _id . _comma IDPC
   31     | _id .

    _comma  shift, and go to state 56

    $default  reduce using rule 31 (IDPC)


State 37

   27 CLASSDECLO: _implements IDPC .

    $default  reduce using rule 27 (CLASSDECLO)


State 38

   25 CLASSDECL: _class _id CLASSDECLO _leftbrace . FIELDM _rightbrace

    _boolean  shift, and go to state 1
    _double   shift, and go to state 3
    _int      shift, and go to state 4
    _string   shift, and go to state 6
    _void     shift, and go to state 7
    _id       shift, and go to state 8

    $default  reduce using rule 33 (FIELDM)

    VARIABLEDECL  go to state 57
    VARIABLE      go to state 14
    TYPE          go to state 15
    FUNCTIONDECL  go to state 58
    FIELDM        go to state 59
    FIELD         go to state 60


State 39

   40 PROTOTYPE: _void . _id _leftparen FORMALS _rightparen _semicolon

    _id  shift, and go to state 61


State 40

   16 TYPE: TYPE . _leftbracket _rightbracket
   39 PROTOTYPE: TYPE . _id _leftparen FORMALS _rightparen _semicolon

    _leftbracket  shift, and go to state 25
    _id           shift, and go to state 62


State 41

   36 INTERFACEDECL: _interface _id _leftbrace PROTOTYPEM . _rightbrace

    _rightbrace  shift, and go to state 63


State 42

   37 PROTOTYPEM: PROTOTYPE . PROTOTYPEM

    _boolean  shift, and go to state 1
    _double   shift, and go to state 3
    _int      shift, and go to state 4
    _string   shift, and go to state 6
    _void     shift, and go to state 39
    _id       shift, and go to state 8

    $default  reduce using rule 38 (PROTOTYPEM)

    TYPE        go to state 40
    PROTOTYPEM  go to state 64
    PROTOTYPE   go to state 42


State 43

   22 VARIABLEPC: _comma . VARIABLE VARIABLEPC

    _boolean  shift, and go to state 1
    _double   shift, and go to state 3
    _int      shift, and go to state 4
    _string   shift, and go to state 6
    _id       shift, and go to state 8

    VARIABLE  go to state 65
    TYPE      go to state 45


State 44

   23 VARIABLEPC: VARIABLE . VARIABLEPC

    _boolean  shift, and go to state 1
    _double   shift, and go to state 3
    _int      shift, and go to state 4
    _string   shift, and go to state 6
    _comma    shift, and go to state 43
    _id       shift, and go to state 8

    $default  reduce using rule 24 (VARIABLEPC)

    VARIABLE    go to state 44
    TYPE        go to state 45
    VARIABLEPC  go to state 66


State 45

   11 VARIABLE: TYPE . _id
   16 TYPE: TYPE . _leftbracket _rightbracket

    _leftbracket  shift, and go to state 25
    _id           shift, and go to state 67


State 46

   19 FUNCTIONDECL: _void _id _leftparen FORMALS . _rightparen STMTBLOCK

    _rightparen  shift, and go to state 68


State 47

   20 FORMALS: VARIABLEPC .

    $default  reduce using rule 20 (FORMALS)


State 48

  100 CONSTANT: _null .

    $default  reduce using rule 100 (CONSTANT)


State 49

   96 CONSTANT: _intconstant .

    $default  reduce using rule 96 (CONSTANT)


State 50

   97 CONSTANT: _doubleconstant .

    $default  reduce using rule 97 (CONSTANT)


State 51

   98 CONSTANT: _stringconstant .

    $default  reduce using rule 98 (CONSTANT)


State 52

   99 CONSTANT: _booleanconstant .

    $default  reduce using rule 99 (CONSTANT)


State 53

   10 VARIABLEDECL: TYPE _id _assignop CONSTANT .

    $default  reduce using rule 10 (VARIABLEDECL)


State 54

   18 FUNCTIONDECL: TYPE _id _leftparen FORMALS . _rightparen STMTBLOCK

    _rightparen  shift, and go to state 69


State 55

   28 CLASSDECLO: _extends _id _implements . IDPC

    _id  shift, and go to state 36

    IDPC  go to state 70


State 56

   30 IDPC: _id _comma . IDPC

    _id  shift, and go to state 36

    IDPC  go to state 71


State 57

   34 FIELD: VARIABLEDECL .

    $default  reduce using rule 34 (FIELD)


State 58

   35 FIELD: FUNCTIONDECL .

    $default  reduce using rule 35 (FIELD)


State 59

   25 CLASSDECL: _class _id CLASSDECLO _leftbrace FIELDM . _rightbrace

    _rightbrace  shift, and go to state 72


State 60

   32 FIELDM: FIELD . FIELDM

    _boolean  shift, and go to state 1
    _double   shift, and go to state 3
    _int      shift, and go to state 4
    _string   shift, and go to state 6
    _void     shift, and go to state 7
    _id       shift, and go to state 8

    $default  reduce using rule 33 (FIELDM)

    VARIABLEDECL  go to state 57
    VARIABLE      go to state 14
    TYPE          go to state 15
    FUNCTIONDECL  go to state 58
    FIELDM        go to state 73
    FIELD         go to state 60


State 61

   40 PROTOTYPE: _void _id . _leftparen FORMALS _rightparen _semicolon

    _leftparen  shift, and go to state 74


State 62

   39 PROTOTYPE: TYPE _id . _leftparen FORMALS _rightparen _semicolon

    _leftparen  shift, and go to state 75


State 63

   36 INTERFACEDECL: _interface _id _leftbrace PROTOTYPEM _rightbrace .

    $default  reduce using rule 36 (INTERFACEDECL)


State 64

   37 PROTOTYPEM: PROTOTYPE PROTOTYPEM .

    $default  reduce using rule 37 (PROTOTYPEM)


State 65

   22 VARIABLEPC: _comma VARIABLE . VARIABLEPC

    _boolean  shift, and go to state 1
    _double   shift, and go to state 3
    _int      shift, and go to state 4
    _string   shift, and go to state 6
    _comma    shift, and go to state 43
    _id       shift, and go to state 8

    $default  reduce using rule 24 (VARIABLEPC)

    VARIABLE    go to state 44
    TYPE        go to state 45
    VARIABLEPC  go to state 76


State 66

   23 VARIABLEPC: VARIABLE VARIABLEPC .

    $default  reduce using rule 23 (VARIABLEPC)


State 67

   11 VARIABLE: TYPE _id .

    $default  reduce using rule 11 (VARIABLE)


State 68

   19 FUNCTIONDECL: _void _id _leftparen FORMALS _rightparen . STMTBLOCK

    _leftbrace  shift, and go to state 77

    STMTBLOCK  go to state 78


State 69

   18 FUNCTIONDECL: TYPE _id _leftparen FORMALS _rightparen . STMTBLOCK

    _leftbrace  shift, and go to state 77

    STMTBLOCK  go to state 79


State 70

   28 CLASSDECLO: _extends _id _implements IDPC .

    $default  reduce using rule 28 (CLASSDECLO)


State 71

   30 IDPC: _id _comma IDPC .

    $default  reduce using rule 30 (IDPC)


State 72

   25 CLASSDECL: _class _id CLASSDECLO _leftbrace FIELDM _rightbrace .

    $default  reduce using rule 25 (CLASSDECL)


State 73

   32 FIELDM: FIELD FIELDM .

    $default  reduce using rule 32 (FIELDM)


State 74

   40 PROTOTYPE: _void _id _leftparen . FORMALS _rightparen _semicolon

    _boolean  shift, and go to state 1
    _double   shift, and go to state 3
    _int      shift, and go to state 4
    _string   shift, and go to state 6
    _comma    shift, and go to state 43
    _id       shift, and go to state 8

    _rightparen  reduce using rule 21 (FORMALS)
    _rightparen  [reduce using rule 24 (VARIABLEPC)]
    $default     reduce using rule 21 (FORMALS)

    VARIABLE    go to state 44
    TYPE        go to state 45
    FORMALS     go to state 80
    VARIABLEPC  go to state 47


State 75

   39 PROTOTYPE: TYPE _id _leftparen . FORMALS _rightparen _semicolon

    _boolean  shift, and go to state 1
    _double   shift, and go to state 3
    _int      shift, and go to state 4
    _string   shift, and go to state 6
    _comma    shift, and go to state 43
    _id       shift, and go to state 8

    _rightparen  reduce using rule 21 (FORMALS)
    _rightparen  [reduce using rule 24 (VARIABLEPC)]
    $default     reduce using rule 21 (FORMALS)

    VARIABLE    go to state 44
    TYPE        go to state 45
    FORMALS     go to state 81
    VARIABLEPC  go to state 47


State 76

   22 VARIABLEPC: _comma VARIABLE VARIABLEPC .

    $default  reduce using rule 22 (VARIABLEPC)


State 77

   41 STMTBLOCK: _leftbrace . VARIABLEDECLM STMTM _rightbrace

    _boolean  shift, and go to state 1
    _double   shift, and go to state 3
    _int      shift, and go to state 4
    _string   shift, and go to state 6
    _id       shift, and go to state 8

    _id       [reduce using rule 43 (VARIABLEDECLM)]
    $default  reduce using rule 43 (VARIABLEDECLM)

    VARIABLEDECL   go to state 82
    VARIABLE       go to state 14
    TYPE           go to state 83
    VARIABLEDECLM  go to state 84


State 78

   19 FUNCTIONDECL: _void _id _leftparen FORMALS _rightparen STMTBLOCK .

    $default  reduce using rule 19 (FUNCTIONDECL)


State 79

   18 FUNCTIONDECL: TYPE _id _leftparen FORMALS _rightparen STMTBLOCK .

    $default  reduce using rule 18 (FUNCTIONDECL)


State 80

   40 PROTOTYPE: _void _id _leftparen FORMALS . _rightparen _semicolon

    _rightparen  shift, and go to state 85


State 81

   39 PROTOTYPE: TYPE _id _leftparen FORMALS . _rightparen _semicolon

    _rightparen  shift, and go to state 86


State 82

   42 VARIABLEDECLM: VARIABLEDECL . VARIABLEDECLM

    _boolean  shift, and go to state 1
    _double   shift, and go to state 3
    _int      shift, and go to state 4
    _string   shift, and go to state 6
    _id       shift, and go to state 8

    _id       [reduce using rule 43 (VARIABLEDECLM)]
    $default  reduce using rule 43 (VARIABLEDECLM)

    VARIABLEDECL   go to state 82
    VARIABLE       go to state 14
    TYPE           go to state 83
    VARIABLEDECLM  go to state 87


State 83

   10 VARIABLEDECL: TYPE . _id _assignop CONSTANT
   11 VARIABLE: TYPE . _id
   16 TYPE: TYPE . _leftbracket _rightbracket

    _leftbracket  shift, and go to state 25
    _id           shift, and go to state 88


State 84

   41 STMTBLOCK: _leftbrace VARIABLEDECLM . STMTM _rightbrace

    _not              shift, and go to state 89
    _minus            shift, and go to state 90
    _break            shift, and go to state 91
    _for              shift, and go to state 92
    _if               shift, and go to state 93
    _newarray         shift, and go to state 94
    _null             shift, and go to state 48
    _println          shift, and go to state 95
    _readln           shift, and go to state 96
    _return           shift, and go to state 97
    _this             shift, and go to state 98
    _while            shift, and go to state 99
    _leftparen        shift, and go to state 100
    _leftbrace        shift, and go to state 77
    _intconstant      shift, and go to state 49
    _doubleconstant   shift, and go to state 50
    _stringconstant   shift, and go to state 51
    _booleanconstant  shift, and go to state 52
    _id               shift, and go to state 101

    _semicolon  reduce using rule 55 (EXPRO)
    $default    reduce using rule 45 (STMTM)

    STMTBLOCK   go to state 102
    STMTM       go to state 103
    STMT        go to state 104
    EXPRO       go to state 105
    IFSTMT      go to state 106
    WHILESTMT   go to state 107
    FORSTMT     go to state 108
    BREAKSTMT   go to state 109
    RETURNSTMT  go to state 110
    PRINTSTMT   go to state 111
    EXPR        go to state 112
    LVALUE      go to state 113
    CALL        go to state 114
    CONSTANT    go to state 115


State 85

   40 PROTOTYPE: _void _id _leftparen FORMALS _rightparen . _semicolon

    _semicolon  shift, and go to state 116


State 86

   39 PROTOTYPE: TYPE _id _leftparen FORMALS _rightparen . _semicolon

    _semicolon  shift, and go to state 117


State 87

   42 VARIABLEDECLM: VARIABLEDECL VARIABLEDECLM .

    $default  reduce using rule 42 (VARIABLEDECLM)


State 88

   10 VARIABLEDECL: TYPE _id . _assignop CONSTANT
   11 VARIABLE: TYPE _id .

    _assignop  shift, and go to state 33

    $default  reduce using rule 11 (VARIABLE)


State 89

   86 EXPR: _not . EXPR

    _not              shift, and go to state 89
    _minus            shift, and go to state 90
    _newarray         shift, and go to state 94
    _null             shift, and go to state 48
    _readln           shift, and go to state 96
    _this             shift, and go to state 98
    _leftparen        shift, and go to state 100
    _intconstant      shift, and go to state 49
    _doubleconstant   shift, and go to state 50
    _stringconstant   shift, and go to state 51
    _booleanconstant  shift, and go to state 52
    _id               shift, and go to state 101

    EXPR      go to state 118
    LVALUE    go to state 113
    CALL      go to state 114
    CONSTANT  go to state 115


State 90

   77 EXPR: _minus . EXPR

    _not              shift, and go to state 89
    _minus            shift, and go to state 90
    _newarray         shift, and go to state 94
    _null             shift, and go to state 48
    _readln           shift, and go to state 96
    _this             shift, and go to state 98
    _leftparen        shift, and go to state 100
    _intconstant      shift, and go to state 49
    _doubleconstant   shift, and go to state 50
    _stringconstant   shift, and go to state 51
    _booleanconstant  shift, and go to state 52
    _id               shift, and go to state 101

    EXPR      go to state 119
    LVALUE    go to state 113
    CALL      go to state 114
    CONSTANT  go to state 115


State 91

   61 BREAKSTMT: _break . _semicolon

    _semicolon  shift, and go to state 120


State 92

   60 FORSTMT: _for . _leftparen EXPRO _semicolon EXPR _semicolon EXPRO _rightparen STMT

    _leftparen  shift, and go to state 121


State 93

   56 IFSTMT: _if . _leftparen EXPR _rightparen STMT ELSESTMTO

    _leftparen  shift, and go to state 122


State 94

   88 EXPR: _newarray . _leftparen _intconstant _comma TYPE _rightparen

    _leftparen  shift, and go to state 123


State 95

   63 PRINTSTMT: _println . _leftparen EXPRPC _rightparen _semicolon

    _leftparen  shift, and go to state 124


State 96

   87 EXPR: _readln . _leftparen _rightparen

    _leftparen  shift, and go to state 125


State 97

   62 RETURNSTMT: _return . EXPRO _semicolon

    _not              shift, and go to state 89
    _minus            shift, and go to state 90
    _newarray         shift, and go to state 94
    _null             shift, and go to state 48
    _readln           shift, and go to state 96
    _this             shift, and go to state 98
    _leftparen        shift, and go to state 100
    _intconstant      shift, and go to state 49
    _doubleconstant   shift, and go to state 50
    _stringconstant   shift, and go to state 51
    _booleanconstant  shift, and go to state 52
    _id               shift, and go to state 101

    $default  reduce using rule 55 (EXPRO)

    EXPRO     go to state 126
    EXPR      go to state 112
    LVALUE    go to state 113
    CALL      go to state 114
    CONSTANT  go to state 115


State 98

   69 EXPR: _this .

    $default  reduce using rule 69 (EXPR)


State 99

   59 WHILESTMT: _while . _leftparen EXPR _rightparen STMT

    _leftparen  shift, and go to state 127


State 100

   71 EXPR: _leftparen . EXPR _rightparen

    _not              shift, and go to state 89
    _minus            shift, and go to state 90
    _newarray         shift, and go to state 94
    _null             shift, and go to state 48
    _readln           shift, and go to state 96
    _this             shift, and go to state 98
    _leftparen        shift, and go to state 100
    _intconstant      shift, and go to state 49
    _doubleconstant   shift, and go to state 50
    _stringconstant   shift, and go to state 51
    _booleanconstant  shift, and go to state 52
    _id               shift, and go to state 101

    EXPR      go to state 128
    LVALUE    go to state 113
    CALL      go to state 114
    CONSTANT  go to state 115


State 101

   89 LVALUE: _id .
   92 CALL: _id . _leftparen ACTUALS _rightparen
   93     | _id . _period _id _leftparen ACTUALS _rightparen

    _period     shift, and go to state 129
    _leftparen  shift, and go to state 130

    _period   [reduce using rule 89 (LVALUE)]
    $default  reduce using rule 89 (LVALUE)


State 102

   53 STMT: STMTBLOCK .

    $default  reduce using rule 53 (STMT)


State 103

   41 STMTBLOCK: _leftbrace VARIABLEDECLM STMTM . _rightbrace

    _rightbrace  shift, and go to state 131


State 104

   44 STMTM: STMT . STMTM

    _not              shift, and go to state 89
    _minus            shift, and go to state 90
    _break            shift, and go to state 91
    _for              shift, and go to state 92
    _if               shift, and go to state 93
    _newarray         shift, and go to state 94
    _null             shift, and go to state 48
    _println          shift, and go to state 95
    _readln           shift, and go to state 96
    _return           shift, and go to state 97
    _this             shift, and go to state 98
    _while            shift, and go to state 99
    _leftparen        shift, and go to state 100
    _leftbrace        shift, and go to state 77
    _intconstant      shift, and go to state 49
    _doubleconstant   shift, and go to state 50
    _stringconstant   shift, and go to state 51
    _booleanconstant  shift, and go to state 52
    _id               shift, and go to state 101

    _semicolon  reduce using rule 55 (EXPRO)
    $default    reduce using rule 45 (STMTM)

    STMTBLOCK   go to state 102
    STMTM       go to state 132
    STMT        go to state 104
    EXPRO       go to state 105
    IFSTMT      go to state 106
    WHILESTMT   go to state 107
    FORSTMT     go to state 108
    BREAKSTMT   go to state 109
    RETURNSTMT  go to state 110
    PRINTSTMT   go to state 111
    EXPR        go to state 112
    LVALUE      go to state 113
    CALL        go to state 114
    CONSTANT    go to state 115


State 105

   46 STMT: EXPRO . _semicolon

    _semicolon  shift, and go to state 133


State 106

   47 STMT: IFSTMT .

    $default  reduce using rule 47 (STMT)


State 107

   48 STMT: WHILESTMT .

    $default  reduce using rule 48 (STMT)


State 108

   49 STMT: FORSTMT .

    $default  reduce using rule 49 (STMT)


State 109

   50 STMT: BREAKSTMT .

    $default  reduce using rule 50 (STMT)


State 110

   51 STMT: RETURNSTMT .

    $default  reduce using rule 51 (STMT)


State 111

   52 STMT: PRINTSTMT .

    $default  reduce using rule 52 (STMT)


State 112

   54 EXPRO: EXPR .
   72 EXPR: EXPR . _plus EXPR
   73     | EXPR . _minus EXPR
   74     | EXPR . _multiplication EXPR
   75     | EXPR . _division EXPR
   76     | EXPR . _mod EXPR
   78     | EXPR . _less EXPR
   79     | EXPR . _lessequal EXPR
   80     | EXPR . _greater EXPR
   81     | EXPR . _greaterequal EXPR
   82     | EXPR . _equal EXPR
   83     | EXPR . _notequal EXPR
   84     | EXPR . _and EXPR
   85     | EXPR . _or EXPR

    _plus            shift, and go to state 134
    _minus           shift, and go to state 135
    _multiplication  shift, and go to state 136
    _division        shift, and go to state 137
    _mod             shift, and go to state 138
    _less            shift, and go to state 139
    _lessequal       shift, and go to state 140
    _greater         shift, and go to state 141
    _greaterequal    shift, and go to state 142
    _equal           shift, and go to state 143
    _notequal        shift, and go to state 144
    _and             shift, and go to state 145
    _or              shift, and go to state 146

    $default  reduce using rule 54 (EXPRO)


State 113

   66 EXPR: LVALUE . _assignop EXPR
   68     | LVALUE .
   90 LVALUE: LVALUE . _leftbracket EXPR _rightbracket
   91       | LVALUE . _period _id

    _leftbracket  shift, and go to state 147
    _period       shift, and go to state 148
    _assignop     shift, and go to state 149

    $default  reduce using rule 68 (EXPR)


State 114

   70 EXPR: CALL .

    $default  reduce using rule 70 (EXPR)


State 115

   67 EXPR: CONSTANT .

    $default  reduce using rule 67 (EXPR)


State 116

   40 PROTOTYPE: _void _id _leftparen FORMALS _rightparen _semicolon .

    $default  reduce using rule 40 (PROTOTYPE)


State 117

   39 PROTOTYPE: TYPE _id _leftparen FORMALS _rightparen _semicolon .

    $default  reduce using rule 39 (PROTOTYPE)


State 118

   72 EXPR: EXPR . _plus EXPR
   73     | EXPR . _minus EXPR
   74     | EXPR . _multiplication EXPR
   75     | EXPR . _division EXPR
   76     | EXPR . _mod EXPR
   78     | EXPR . _less EXPR
   79     | EXPR . _lessequal EXPR
   80     | EXPR . _greater EXPR
   81     | EXPR . _greaterequal EXPR
   82     | EXPR . _equal EXPR
   83     | EXPR . _notequal EXPR
   84     | EXPR . _and EXPR
   85     | EXPR . _or EXPR
   86     | _not EXPR .

    _plus            shift, and go to state 134
    _minus           shift, and go to state 135
    _multiplication  shift, and go to state 136
    _division        shift, and go to state 137
    _mod             shift, and go to state 138
    _less            shift, and go to state 139
    _lessequal       shift, and go to state 140
    _greater         shift, and go to state 141
    _greaterequal    shift, and go to state 142
    _equal           shift, and go to state 143
    _notequal        shift, and go to state 144
    _and             shift, and go to state 145
    _or              shift, and go to state 146

    $default  reduce using rule 86 (EXPR)


State 119

   72 EXPR: EXPR . _plus EXPR
   73     | EXPR . _minus EXPR
   74     | EXPR . _multiplication EXPR
   75     | EXPR . _division EXPR
   76     | EXPR . _mod EXPR
   77     | _minus EXPR .
   78     | EXPR . _less EXPR
   79     | EXPR . _lessequal EXPR
   80     | EXPR . _greater EXPR
   81     | EXPR . _greaterequal EXPR
   82     | EXPR . _equal EXPR
   83     | EXPR . _notequal EXPR
   84     | EXPR . _and EXPR
   85     | EXPR . _or EXPR

    _multiplication  shift, and go to state 136
    _division        shift, and go to state 137
    _mod             shift, and go to state 138
    _less            shift, and go to state 139
    _lessequal       shift, and go to state 140
    _greater         shift, and go to state 141
    _greaterequal    shift, and go to state 142
    _equal           shift, and go to state 143
    _notequal        shift, and go to state 144
    _and             shift, and go to state 145
    _or              shift, and go to state 146

    $default  reduce using rule 77 (EXPR)


State 120

   61 BREAKSTMT: _break _semicolon .

    $default  reduce using rule 61 (BREAKSTMT)


State 121

   60 FORSTMT: _for _leftparen . EXPRO _semicolon EXPR _semicolon EXPRO _rightparen STMT

    _not              shift, and go to state 89
    _minus            shift, and go to state 90
    _newarray         shift, and go to state 94
    _null             shift, and go to state 48
    _readln           shift, and go to state 96
    _this             shift, and go to state 98
    _leftparen        shift, and go to state 100
    _intconstant      shift, and go to state 49
    _doubleconstant   shift, and go to state 50
    _stringconstant   shift, and go to state 51
    _booleanconstant  shift, and go to state 52
    _id               shift, and go to state 101

    $default  reduce using rule 55 (EXPRO)

    EXPRO     go to state 150
    EXPR      go to state 112
    LVALUE    go to state 113
    CALL      go to state 114
    CONSTANT  go to state 115


State 122

   56 IFSTMT: _if _leftparen . EXPR _rightparen STMT ELSESTMTO

    _not              shift, and go to state 89
    _minus            shift, and go to state 90
    _newarray         shift, and go to state 94
    _null             shift, and go to state 48
    _readln           shift, and go to state 96
    _this             shift, and go to state 98
    _leftparen        shift, and go to state 100
    _intconstant      shift, and go to state 49
    _doubleconstant   shift, and go to state 50
    _stringconstant   shift, and go to state 51
    _booleanconstant  shift, and go to state 52
    _id               shift, and go to state 101

    EXPR      go to state 151
    LVALUE    go to state 113
    CALL      go to state 114
    CONSTANT  go to state 115


State 123

   88 EXPR: _newarray _leftparen . _intconstant _comma TYPE _rightparen

    _intconstant  shift, and go to state 152


State 124

   63 PRINTSTMT: _println _leftparen . EXPRPC _rightparen _semicolon

    _not              shift, and go to state 89
    _minus            shift, and go to state 90
    _newarray         shift, and go to state 94
    _null             shift, and go to state 48
    _readln           shift, and go to state 96
    _this             shift, and go to state 98
    _leftparen        shift, and go to state 100
    _intconstant      shift, and go to state 49
    _doubleconstant   shift, and go to state 50
    _stringconstant   shift, and go to state 51
    _booleanconstant  shift, and go to state 52
    _id               shift, and go to state 101

    EXPRPC    go to state 153
    EXPR      go to state 154
    LVALUE    go to state 113
    CALL      go to state 114
    CONSTANT  go to state 115


State 125

   87 EXPR: _readln _leftparen . _rightparen

    _rightparen  shift, and go to state 155


State 126

   62 RETURNSTMT: _return EXPRO . _semicolon

    _semicolon  shift, and go to state 156


State 127

   59 WHILESTMT: _while _leftparen . EXPR _rightparen STMT

    _not              shift, and go to state 89
    _minus            shift, and go to state 90
    _newarray         shift, and go to state 94
    _null             shift, and go to state 48
    _readln           shift, and go to state 96
    _this             shift, and go to state 98
    _leftparen        shift, and go to state 100
    _intconstant      shift, and go to state 49
    _doubleconstant   shift, and go to state 50
    _stringconstant   shift, and go to state 51
    _booleanconstant  shift, and go to state 52
    _id               shift, and go to state 101

    EXPR      go to state 157
    LVALUE    go to state 113
    CALL      go to state 114
    CONSTANT  go to state 115


State 128

   71 EXPR: _leftparen EXPR . _rightparen
   72     | EXPR . _plus EXPR
   73     | EXPR . _minus EXPR
   74     | EXPR . _multiplication EXPR
   75     | EXPR . _division EXPR
   76     | EXPR . _mod EXPR
   78     | EXPR . _less EXPR
   79     | EXPR . _lessequal EXPR
   80     | EXPR . _greater EXPR
   81     | EXPR . _greaterequal EXPR
   82     | EXPR . _equal EXPR
   83     | EXPR . _notequal EXPR
   84     | EXPR . _and EXPR
   85     | EXPR . _or EXPR

    _plus            shift, and go to state 134
    _minus           shift, and go to state 135
    _multiplication  shift, and go to state 136
    _division        shift, and go to state 137
    _mod             shift, and go to state 138
    _less            shift, and go to state 139
    _lessequal       shift, and go to state 140
    _greater         shift, and go to state 141
    _greaterequal    shift, and go to state 142
    _equal           shift, and go to state 143
    _notequal        shift, and go to state 144
    _and             shift, and go to state 145
    _or              shift, and go to state 146
    _rightparen      shift, and go to state 158


State 129

   93 CALL: _id _period . _id _leftparen ACTUALS _rightparen

    _id  shift, and go to state 159


State 130

   92 CALL: _id _leftparen . ACTUALS _rightparen

    _not              shift, and go to state 89
    _minus            shift, and go to state 90
    _newarray         shift, and go to state 94
    _null             shift, and go to state 48
    _readln           shift, and go to state 96
    _this             shift, and go to state 98
    _leftparen        shift, and go to state 100
    _intconstant      shift, and go to state 49
    _doubleconstant   shift, and go to state 50
    _stringconstant   shift, and go to state 51
    _booleanconstant  shift, and go to state 52
    _id               shift, and go to state 101

    $default  reduce using rule 95 (ACTUALS)

    EXPRPC    go to state 160
    EXPR      go to state 154
    LVALUE    go to state 113
    CALL      go to state 114
    ACTUALS   go to state 161
    CONSTANT  go to state 115


State 131

   41 STMTBLOCK: _leftbrace VARIABLEDECLM STMTM _rightbrace .

    $default  reduce using rule 41 (STMTBLOCK)


State 132

   44 STMTM: STMT STMTM .

    $default  reduce using rule 44 (STMTM)


State 133

   46 STMT: EXPRO _semicolon .

    $default  reduce using rule 46 (STMT)


State 134

   72 EXPR: EXPR _plus . EXPR

    _not              shift, and go to state 89
    _minus            shift, and go to state 90
    _newarray         shift, and go to state 94
    _null             shift, and go to state 48
    _readln           shift, and go to state 96
    _this             shift, and go to state 98
    _leftparen        shift, and go to state 100
    _intconstant      shift, and go to state 49
    _doubleconstant   shift, and go to state 50
    _stringconstant   shift, and go to state 51
    _booleanconstant  shift, and go to state 52
    _id               shift, and go to state 101

    EXPR      go to state 162
    LVALUE    go to state 113
    CALL      go to state 114
    CONSTANT  go to state 115


State 135

   73 EXPR: EXPR _minus . EXPR

    _not              shift, and go to state 89
    _minus            shift, and go to state 90
    _newarray         shift, and go to state 94
    _null             shift, and go to state 48
    _readln           shift, and go to state 96
    _this             shift, and go to state 98
    _leftparen        shift, and go to state 100
    _intconstant      shift, and go to state 49
    _doubleconstant   shift, and go to state 50
    _stringconstant   shift, and go to state 51
    _booleanconstant  shift, and go to state 52
    _id               shift, and go to state 101

    EXPR      go to state 163
    LVALUE    go to state 113
    CALL      go to state 114
    CONSTANT  go to state 115


State 136

   74 EXPR: EXPR _multiplication . EXPR

    _not              shift, and go to state 89
    _minus            shift, and go to state 90
    _newarray         shift, and go to state 94
    _null             shift, and go to state 48
    _readln           shift, and go to state 96
    _this             shift, and go to state 98
    _leftparen        shift, and go to state 100
    _intconstant      shift, and go to state 49
    _doubleconstant   shift, and go to state 50
    _stringconstant   shift, and go to state 51
    _booleanconstant  shift, and go to state 52
    _id               shift, and go to state 101

    EXPR      go to state 164
    LVALUE    go to state 113
    CALL      go to state 114
    CONSTANT  go to state 115


State 137

   75 EXPR: EXPR _division . EXPR

    _not              shift, and go to state 89
    _minus            shift, and go to state 90
    _newarray         shift, and go to state 94
    _null             shift, and go to state 48
    _readln           shift, and go to state 96
    _this             shift, and go to state 98
    _leftparen        shift, and go to state 100
    _intconstant      shift, and go to state 49
    _doubleconstant   shift, and go to state 50
    _stringconstant   shift, and go to state 51
    _booleanconstant  shift, and go to state 52
    _id               shift, and go to state 101

    EXPR      go to state 165
    LVALUE    go to state 113
    CALL      go to state 114
    CONSTANT  go to state 115


State 138

   76 EXPR: EXPR _mod . EXPR

    _not              shift, and go to state 89
    _minus            shift, and go to state 90
    _newarray         shift, and go to state 94
    _null             shift, and go to state 48
    _readln           shift, and go to state 96
    _this             shift, and go to state 98
    _leftparen        shift, and go to state 100
    _intconstant      shift, and go to state 49
    _doubleconstant   shift, and go to state 50
    _stringconstant   shift, and go to state 51
    _booleanconstant  shift, and go to state 52
    _id               shift, and go to state 101

    EXPR      go to state 166
    LVALUE    go to state 113
    CALL      go to state 114
    CONSTANT  go to state 115


State 139

   78 EXPR: EXPR _less . EXPR

    _not              shift, and go to state 89
    _minus            shift, and go to state 90
    _newarray         shift, and go to state 94
    _null             shift, and go to state 48
    _readln           shift, and go to state 96
    _this             shift, and go to state 98
    _leftparen        shift, and go to state 100
    _intconstant      shift, and go to state 49
    _doubleconstant   shift, and go to state 50
    _stringconstant   shift, and go to state 51
    _booleanconstant  shift, and go to state 52
    _id               shift, and go to state 101

    EXPR      go to state 167
    LVALUE    go to state 113
    CALL      go to state 114
    CONSTANT  go to state 115


State 140

   79 EXPR: EXPR _lessequal . EXPR

    _not              shift, and go to state 89
    _minus            shift, and go to state 90
    _newarray         shift, and go to state 94
    _null             shift, and go to state 48
    _readln           shift, and go to state 96
    _this             shift, and go to state 98
    _leftparen        shift, and go to state 100
    _intconstant      shift, and go to state 49
    _doubleconstant   shift, and go to state 50
    _stringconstant   shift, and go to state 51
    _booleanconstant  shift, and go to state 52
    _id               shift, and go to state 101

    EXPR      go to state 168
    LVALUE    go to state 113
    CALL      go to state 114
    CONSTANT  go to state 115


State 141

   80 EXPR: EXPR _greater . EXPR

    _not              shift, and go to state 89
    _minus            shift, and go to state 90
    _newarray         shift, and go to state 94
    _null             shift, and go to state 48
    _readln           shift, and go to state 96
    _this             shift, and go to state 98
    _leftparen        shift, and go to state 100
    _intconstant      shift, and go to state 49
    _doubleconstant   shift, and go to state 50
    _stringconstant   shift, and go to state 51
    _booleanconstant  shift, and go to state 52
    _id               shift, and go to state 101

    EXPR      go to state 169
    LVALUE    go to state 113
    CALL      go to state 114
    CONSTANT  go to state 115


State 142

   81 EXPR: EXPR _greaterequal . EXPR

    _not              shift, and go to state 89
    _minus            shift, and go to state 90
    _newarray         shift, and go to state 94
    _null             shift, and go to state 48
    _readln           shift, and go to state 96
    _this             shift, and go to state 98
    _leftparen        shift, and go to state 100
    _intconstant      shift, and go to state 49
    _doubleconstant   shift, and go to state 50
    _stringconstant   shift, and go to state 51
    _booleanconstant  shift, and go to state 52
    _id               shift, and go to state 101

    EXPR      go to state 170
    LVALUE    go to state 113
    CALL      go to state 114
    CONSTANT  go to state 115


State 143

   82 EXPR: EXPR _equal . EXPR

    _not              shift, and go to state 89
    _minus            shift, and go to state 90
    _newarray         shift, and go to state 94
    _null             shift, and go to state 48
    _readln           shift, and go to state 96
    _this             shift, and go to state 98
    _leftparen        shift, and go to state 100
    _intconstant      shift, and go to state 49
    _doubleconstant   shift, and go to state 50
    _stringconstant   shift, and go to state 51
    _booleanconstant  shift, and go to state 52
    _id               shift, and go to state 101

    EXPR      go to state 171
    LVALUE    go to state 113
    CALL      go to state 114
    CONSTANT  go to state 115


State 144

   83 EXPR: EXPR _notequal . EXPR

    _not              shift, and go to state 89
    _minus            shift, and go to state 90
    _newarray         shift, and go to state 94
    _null             shift, and go to state 48
    _readln           shift, and go to state 96
    _this             shift, and go to state 98
    _leftparen        shift, and go to state 100
    _intconstant      shift, and go to state 49
    _doubleconstant   shift, and go to state 50
    _stringconstant   shift, and go to state 51
    _booleanconstant  shift, and go to state 52
    _id               shift, and go to state 101

    EXPR      go to state 172
    LVALUE    go to state 113
    CALL      go to state 114
    CONSTANT  go to state 115


State 145

   84 EXPR: EXPR _and . EXPR

    _not              shift, and go to state 89
    _minus            shift, and go to state 90
    _newarray         shift, and go to state 94
    _null             shift, and go to state 48
    _readln           shift, and go to state 96
    _this             shift, and go to state 98
    _leftparen        shift, and go to state 100
    _intconstant      shift, and go to state 49
    _doubleconstant   shift, and go to state 50
    _stringconstant   shift, and go to state 51
    _booleanconstant  shift, and go to state 52
    _id               shift, and go to state 101

    EXPR      go to state 173
    LVALUE    go to state 113
    CALL      go to state 114
    CONSTANT  go to state 115


State 146

   85 EXPR: EXPR _or . EXPR

    _not              shift, and go to state 89
    _minus            shift, and go to state 90
    _newarray         shift, and go to state 94
    _null             shift, and go to state 48
    _readln           shift, and go to state 96
    _this             shift, and go to state 98
    _leftparen        shift, and go to state 100
    _intconstant      shift, and go to state 49
    _doubleconstant   shift, and go to state 50
    _stringconstant   shift, and go to state 51
    _booleanconstant  shift, and go to state 52
    _id               shift, and go to state 101

    EXPR      go to state 174
    LVALUE    go to state 113
    CALL      go to state 114
    CONSTANT  go to state 115


State 147

   90 LVALUE: LVALUE _leftbracket . EXPR _rightbracket

    _not              shift, and go to state 89
    _minus            shift, and go to state 90
    _newarray         shift, and go to state 94
    _null             shift, and go to state 48
    _readln           shift, and go to state 96
    _this             shift, and go to state 98
    _leftparen        shift, and go to state 100
    _intconstant      shift, and go to state 49
    _doubleconstant   shift, and go to state 50
    _stringconstant   shift, and go to state 51
    _booleanconstant  shift, and go to state 52
    _id               shift, and go to state 101

    EXPR      go to state 175
    LVALUE    go to state 113
    CALL      go to state 114
    CONSTANT  go to state 115


State 148

   91 LVALUE: LVALUE _period . _id

    _id  shift, and go to state 176


State 149

   66 EXPR: LVALUE _assignop . EXPR

    _not              shift, and go to state 89
    _minus            shift, and go to state 90
    _newarray         shift, and go to state 94
    _null             shift, and go to state 48
    _readln           shift, and go to state 96
    _this             shift, and go to state 98
    _leftparen        shift, and go to state 100
    _intconstant      shift, and go to state 49
    _doubleconstant   shift, and go to state 50
    _stringconstant   shift, and go to state 51
    _booleanconstant  shift, and go to state 52
    _id               shift, and go to state 101

    EXPR      go to state 177
    LVALUE    go to state 113
    CALL      go to state 114
    CONSTANT  go to state 115


State 150

   60 FORSTMT: _for _leftparen EXPRO . _semicolon EXPR _semicolon EXPRO _rightparen STMT

    _semicolon  shift, and go to state 178


State 151

   56 IFSTMT: _if _leftparen EXPR . _rightparen STMT ELSESTMTO
   72 EXPR: EXPR . _plus EXPR
   73     | EXPR . _minus EXPR
   74     | EXPR . _multiplication EXPR
   75     | EXPR . _division EXPR
   76     | EXPR . _mod EXPR
   78     | EXPR . _less EXPR
   79     | EXPR . _lessequal EXPR
   80     | EXPR . _greater EXPR
   81     | EXPR . _greaterequal EXPR
   82     | EXPR . _equal EXPR
   83     | EXPR . _notequal EXPR
   84     | EXPR . _and EXPR
   85     | EXPR . _or EXPR

    _plus            shift, and go to state 134
    _minus           shift, and go to state 135
    _multiplication  shift, and go to state 136
    _division        shift, and go to state 137
    _mod             shift, and go to state 138
    _less            shift, and go to state 139
    _lessequal       shift, and go to state 140
    _greater         shift, and go to state 141
    _greaterequal    shift, and go to state 142
    _equal           shift, and go to state 143
    _notequal        shift, and go to state 144
    _and             shift, and go to state 145
    _or              shift, and go to state 146
    _rightparen      shift, and go to state 179


State 152

   88 EXPR: _newarray _leftparen _intconstant . _comma TYPE _rightparen

    _comma  shift, and go to state 180


State 153

   63 PRINTSTMT: _println _leftparen EXPRPC . _rightparen _semicolon

    _rightparen  shift, and go to state 181


State 154

   64 EXPRPC: EXPR . _comma EXPRPC
   65       | EXPR .
   72 EXPR: EXPR . _plus EXPR
   73     | EXPR . _minus EXPR
   74     | EXPR . _multiplication EXPR
   75     | EXPR . _division EXPR
   76     | EXPR . _mod EXPR
   78     | EXPR . _less EXPR
   79     | EXPR . _lessequal EXPR
   80     | EXPR . _greater EXPR
   81     | EXPR . _greaterequal EXPR
   82     | EXPR . _equal EXPR
   83     | EXPR . _notequal EXPR
   84     | EXPR . _and EXPR
   85     | EXPR . _or EXPR

    _plus            shift, and go to state 134
    _minus           shift, and go to state 135
    _multiplication  shift, and go to state 136
    _division        shift, and go to state 137
    _mod             shift, and go to state 138
    _less            shift, and go to state 139
    _lessequal       shift, and go to state 140
    _greater         shift, and go to state 141
    _greaterequal    shift, and go to state 142
    _equal           shift, and go to state 143
    _notequal        shift, and go to state 144
    _and             shift, and go to state 145
    _or              shift, and go to state 146
    _comma           shift, and go to state 182

    $default  reduce using rule 65 (EXPRPC)


State 155

   87 EXPR: _readln _leftparen _rightparen .

    $default  reduce using rule 87 (EXPR)


State 156

   62 RETURNSTMT: _return EXPRO _semicolon .

    $default  reduce using rule 62 (RETURNSTMT)


State 157

   59 WHILESTMT: _while _leftparen EXPR . _rightparen STMT
   72 EXPR: EXPR . _plus EXPR
   73     | EXPR . _minus EXPR
   74     | EXPR . _multiplication EXPR
   75     | EXPR . _division EXPR
   76     | EXPR . _mod EXPR
   78     | EXPR . _less EXPR
   79     | EXPR . _lessequal EXPR
   80     | EXPR . _greater EXPR
   81     | EXPR . _greaterequal EXPR
   82     | EXPR . _equal EXPR
   83     | EXPR . _notequal EXPR
   84     | EXPR . _and EXPR
   85     | EXPR . _or EXPR

    _plus            shift, and go to state 134
    _minus           shift, and go to state 135
    _multiplication  shift, and go to state 136
    _division        shift, and go to state 137
    _mod             shift, and go to state 138
    _less            shift, and go to state 139
    _lessequal       shift, and go to state 140
    _greater         shift, and go to state 141
    _greaterequal    shift, and go to state 142
    _equal           shift, and go to state 143
    _notequal        shift, and go to state 144
    _and             shift, and go to state 145
    _or              shift, and go to state 146
    _rightparen      shift, and go to state 183


State 158

   71 EXPR: _leftparen EXPR _rightparen .

    $default  reduce using rule 71 (EXPR)


State 159

   93 CALL: _id _period _id . _leftparen ACTUALS _rightparen

    _leftparen  shift, and go to state 184


State 160

   94 ACTUALS: EXPRPC .

    $default  reduce using rule 94 (ACTUALS)


State 161

   92 CALL: _id _leftparen ACTUALS . _rightparen

    _rightparen  shift, and go to state 185


State 162

   72 EXPR: EXPR . _plus EXPR
   72     | EXPR _plus EXPR .
   73     | EXPR . _minus EXPR
   74     | EXPR . _multiplication EXPR
   75     | EXPR . _division EXPR
   76     | EXPR . _mod EXPR
   78     | EXPR . _less EXPR
   79     | EXPR . _lessequal EXPR
   80     | EXPR . _greater EXPR
   81     | EXPR . _greaterequal EXPR
   82     | EXPR . _equal EXPR
   83     | EXPR . _notequal EXPR
   84     | EXPR . _and EXPR
   85     | EXPR . _or EXPR

    _multiplication  shift, and go to state 136
    _division        shift, and go to state 137
    _mod             shift, and go to state 138
    _less            shift, and go to state 139
    _lessequal       shift, and go to state 140
    _greater         shift, and go to state 141
    _greaterequal    shift, and go to state 142
    _equal           shift, and go to state 143
    _notequal        shift, and go to state 144
    _and             shift, and go to state 145
    _or              shift, and go to state 146

    $default  reduce using rule 72 (EXPR)


State 163

   72 EXPR: EXPR . _plus EXPR
   73     | EXPR . _minus EXPR
   73     | EXPR _minus EXPR .
   74     | EXPR . _multiplication EXPR
   75     | EXPR . _division EXPR
   76     | EXPR . _mod EXPR
   78     | EXPR . _less EXPR
   79     | EXPR . _lessequal EXPR
   80     | EXPR . _greater EXPR
   81     | EXPR . _greaterequal EXPR
   82     | EXPR . _equal EXPR
   83     | EXPR . _notequal EXPR
   84     | EXPR . _and EXPR
   85     | EXPR . _or EXPR

    _multiplication  shift, and go to state 136
    _division        shift, and go to state 137
    _mod             shift, and go to state 138
    _less            shift, and go to state 139
    _lessequal       shift, and go to state 140
    _greater         shift, and go to state 141
    _greaterequal    shift, and go to state 142
    _equal           shift, and go to state 143
    _notequal        shift, and go to state 144
    _and             shift, and go to state 145
    _or              shift, and go to state 146

    $default  reduce using rule 73 (EXPR)


State 164

   72 EXPR: EXPR . _plus EXPR
   73     | EXPR . _minus EXPR
   74     | EXPR . _multiplication EXPR
   74     | EXPR _multiplication EXPR .
   75     | EXPR . _division EXPR
   76     | EXPR . _mod EXPR
   78     | EXPR . _less EXPR
   79     | EXPR . _lessequal EXPR
   80     | EXPR . _greater EXPR
   81     | EXPR . _greaterequal EXPR
   82     | EXPR . _equal EXPR
   83     | EXPR . _notequal EXPR
   84     | EXPR . _and EXPR
   85     | EXPR . _or EXPR

    _less          shift, and go to state 139
    _lessequal     shift, and go to state 140
    _greater       shift, and go to state 141
    _greaterequal  shift, and go to state 142
    _equal         shift, and go to state 143
    _notequal      shift, and go to state 144
    _and           shift, and go to state 145
    _or            shift, and go to state 146

    $default  reduce using rule 74 (EXPR)


State 165

   72 EXPR: EXPR . _plus EXPR
   73     | EXPR . _minus EXPR
   74     | EXPR . _multiplication EXPR
   75     | EXPR . _division EXPR
   75     | EXPR _division EXPR .
   76     | EXPR . _mod EXPR
   78     | EXPR . _less EXPR
   79     | EXPR . _lessequal EXPR
   80     | EXPR . _greater EXPR
   81     | EXPR . _greaterequal EXPR
   82     | EXPR . _equal EXPR
   83     | EXPR . _notequal EXPR
   84     | EXPR . _and EXPR
   85     | EXPR . _or EXPR

    _less          shift, and go to state 139
    _lessequal     shift, and go to state 140
    _greater       shift, and go to state 141
    _greaterequal  shift, and go to state 142
    _equal         shift, and go to state 143
    _notequal      shift, and go to state 144
    _and           shift, and go to state 145
    _or            shift, and go to state 146

    $default  reduce using rule 75 (EXPR)


State 166

   72 EXPR: EXPR . _plus EXPR
   73     | EXPR . _minus EXPR
   74     | EXPR . _multiplication EXPR
   75     | EXPR . _division EXPR
   76     | EXPR . _mod EXPR
   76     | EXPR _mod EXPR .
   78     | EXPR . _less EXPR
   79     | EXPR . _lessequal EXPR
   80     | EXPR . _greater EXPR
   81     | EXPR . _greaterequal EXPR
   82     | EXPR . _equal EXPR
   83     | EXPR . _notequal EXPR
   84     | EXPR . _and EXPR
   85     | EXPR . _or EXPR

    _less          shift, and go to state 139
    _lessequal     shift, and go to state 140
    _greater       shift, and go to state 141
    _greaterequal  shift, and go to state 142
    _equal         shift, and go to state 143
    _notequal      shift, and go to state 144
    _and           shift, and go to state 145
    _or            shift, and go to state 146

    $default  reduce using rule 76 (EXPR)


State 167

   72 EXPR: EXPR . _plus EXPR
   73     | EXPR . _minus EXPR
   74     | EXPR . _multiplication EXPR
   75     | EXPR . _division EXPR
   76     | EXPR . _mod EXPR
   78     | EXPR . _less EXPR
   78     | EXPR _less EXPR .
   79     | EXPR . _lessequal EXPR
   80     | EXPR . _greater EXPR
   81     | EXPR . _greaterequal EXPR
   82     | EXPR . _equal EXPR
   83     | EXPR . _notequal EXPR
   84     | EXPR . _and EXPR
   85     | EXPR . _or EXPR

    _equal     shift, and go to state 143
    _notequal  shift, and go to state 144
    _and       shift, and go to state 145
    _or        shift, and go to state 146

    _less          error (nonassociative)
    _lessequal     error (nonassociative)
    _greater       error (nonassociative)
    _greaterequal  error (nonassociative)

    $default  reduce using rule 78 (EXPR)


State 168

   72 EXPR: EXPR . _plus EXPR
   73     | EXPR . _minus EXPR
   74     | EXPR . _multiplication EXPR
   75     | EXPR . _division EXPR
   76     | EXPR . _mod EXPR
   78     | EXPR . _less EXPR
   79     | EXPR . _lessequal EXPR
   79     | EXPR _lessequal EXPR .
   80     | EXPR . _greater EXPR
   81     | EXPR . _greaterequal EXPR
   82     | EXPR . _equal EXPR
   83     | EXPR . _notequal EXPR
   84     | EXPR . _and EXPR
   85     | EXPR . _or EXPR

    _equal     shift, and go to state 143
    _notequal  shift, and go to state 144
    _and       shift, and go to state 145
    _or        shift, and go to state 146

    _less          error (nonassociative)
    _lessequal     error (nonassociative)
    _greater       error (nonassociative)
    _greaterequal  error (nonassociative)

    $default  reduce using rule 79 (EXPR)


State 169

   72 EXPR: EXPR . _plus EXPR
   73     | EXPR . _minus EXPR
   74     | EXPR . _multiplication EXPR
   75     | EXPR . _division EXPR
   76     | EXPR . _mod EXPR
   78     | EXPR . _less EXPR
   79     | EXPR . _lessequal EXPR
   80     | EXPR . _greater EXPR
   80     | EXPR _greater EXPR .
   81     | EXPR . _greaterequal EXPR
   82     | EXPR . _equal EXPR
   83     | EXPR . _notequal EXPR
   84     | EXPR . _and EXPR
   85     | EXPR . _or EXPR

    _equal     shift, and go to state 143
    _notequal  shift, and go to state 144
    _and       shift, and go to state 145
    _or        shift, and go to state 146

    _less          error (nonassociative)
    _lessequal     error (nonassociative)
    _greater       error (nonassociative)
    _greaterequal  error (nonassociative)

    $default  reduce using rule 80 (EXPR)


State 170

   72 EXPR: EXPR . _plus EXPR
   73     | EXPR . _minus EXPR
   74     | EXPR . _multiplication EXPR
   75     | EXPR . _division EXPR
   76     | EXPR . _mod EXPR
   78     | EXPR . _less EXPR
   79     | EXPR . _lessequal EXPR
   80     | EXPR . _greater EXPR
   81     | EXPR . _greaterequal EXPR
   81     | EXPR _greaterequal EXPR .
   82     | EXPR . _equal EXPR
   83     | EXPR . _notequal EXPR
   84     | EXPR . _and EXPR
   85     | EXPR . _or EXPR

    _equal     shift, and go to state 143
    _notequal  shift, and go to state 144
    _and       shift, and go to state 145
    _or        shift, and go to state 146

    _less          error (nonassociative)
    _lessequal     error (nonassociative)
    _greater       error (nonassociative)
    _greaterequal  error (nonassociative)

    $default  reduce using rule 81 (EXPR)


State 171

   72 EXPR: EXPR . _plus EXPR
   73     | EXPR . _minus EXPR
   74     | EXPR . _multiplication EXPR
   75     | EXPR . _division EXPR
   76     | EXPR . _mod EXPR
   78     | EXPR . _less EXPR
   79     | EXPR . _lessequal EXPR
   80     | EXPR . _greater EXPR
   81     | EXPR . _greaterequal EXPR
   82     | EXPR . _equal EXPR
   82     | EXPR _equal EXPR .
   83     | EXPR . _notequal EXPR
   84     | EXPR . _and EXPR
   85     | EXPR . _or EXPR

    _and  shift, and go to state 145
    _or   shift, and go to state 146

    _equal     error (nonassociative)
    _notequal  error (nonassociative)

    $default  reduce using rule 82 (EXPR)


State 172

   72 EXPR: EXPR . _plus EXPR
   73     | EXPR . _minus EXPR
   74     | EXPR . _multiplication EXPR
   75     | EXPR . _division EXPR
   76     | EXPR . _mod EXPR
   78     | EXPR . _less EXPR
   79     | EXPR . _lessequal EXPR
   80     | EXPR . _greater EXPR
   81     | EXPR . _greaterequal EXPR
   82     | EXPR . _equal EXPR
   83     | EXPR . _notequal EXPR
   83     | EXPR _notequal EXPR .
   84     | EXPR . _and EXPR
   85     | EXPR . _or EXPR

    _and  shift, and go to state 145
    _or   shift, and go to state 146

    _equal     error (nonassociative)
    _notequal  error (nonassociative)

    $default  reduce using rule 83 (EXPR)


State 173

   72 EXPR: EXPR . _plus EXPR
   73     | EXPR . _minus EXPR
   74     | EXPR . _multiplication EXPR
   75     | EXPR . _division EXPR
   76     | EXPR . _mod EXPR
   78     | EXPR . _less EXPR
   79     | EXPR . _lessequal EXPR
   80     | EXPR . _greater EXPR
   81     | EXPR . _greaterequal EXPR
   82     | EXPR . _equal EXPR
   83     | EXPR . _notequal EXPR
   84     | EXPR . _and EXPR
   84     | EXPR _and EXPR .
   85     | EXPR . _or EXPR

    _or  shift, and go to state 146

    $default  reduce using rule 84 (EXPR)


State 174

   72 EXPR: EXPR . _plus EXPR
   73     | EXPR . _minus EXPR
   74     | EXPR . _multiplication EXPR
   75     | EXPR . _division EXPR
   76     | EXPR . _mod EXPR
   78     | EXPR . _less EXPR
   79     | EXPR . _lessequal EXPR
   80     | EXPR . _greater EXPR
   81     | EXPR . _greaterequal EXPR
   82     | EXPR . _equal EXPR
   83     | EXPR . _notequal EXPR
   84     | EXPR . _and EXPR
   85     | EXPR . _or EXPR
   85     | EXPR _or EXPR .

    $default  reduce using rule 85 (EXPR)


State 175

   72 EXPR: EXPR . _plus EXPR
   73     | EXPR . _minus EXPR
   74     | EXPR . _multiplication EXPR
   75     | EXPR . _division EXPR
   76     | EXPR . _mod EXPR
   78     | EXPR . _less EXPR
   79     | EXPR . _lessequal EXPR
   80     | EXPR . _greater EXPR
   81     | EXPR . _greaterequal EXPR
   82     | EXPR . _equal EXPR
   83     | EXPR . _notequal EXPR
   84     | EXPR . _and EXPR
   85     | EXPR . _or EXPR
   90 LVALUE: LVALUE _leftbracket EXPR . _rightbracket

    _plus            shift, and go to state 134
    _minus           shift, and go to state 135
    _multiplication  shift, and go to state 136
    _division        shift, and go to state 137
    _mod             shift, and go to state 138
    _less            shift, and go to state 139
    _lessequal       shift, and go to state 140
    _greater         shift, and go to state 141
    _greaterequal    shift, and go to state 142
    _equal           shift, and go to state 143
    _notequal        shift, and go to state 144
    _and             shift, and go to state 145
    _or              shift, and go to state 146
    _rightbracket    shift, and go to state 186


State 176

   91 LVALUE: LVALUE _period _id .

    $default  reduce using rule 91 (LVALUE)


State 177

   66 EXPR: LVALUE _assignop EXPR .
   72     | EXPR . _plus EXPR
   73     | EXPR . _minus EXPR
   74     | EXPR . _multiplication EXPR
   75     | EXPR . _division EXPR
   76     | EXPR . _mod EXPR
   78     | EXPR . _less EXPR
   79     | EXPR . _lessequal EXPR
   80     | EXPR . _greater EXPR
   81     | EXPR . _greaterequal EXPR
   82     | EXPR . _equal EXPR
   83     | EXPR . _notequal EXPR
   84     | EXPR . _and EXPR
   85     | EXPR . _or EXPR

    $default  reduce using rule 66 (EXPR)


State 178

   60 FORSTMT: _for _leftparen EXPRO _semicolon . EXPR _semicolon EXPRO _rightparen STMT

    _not              shift, and go to state 89
    _minus            shift, and go to state 90
    _newarray         shift, and go to state 94
    _null             shift, and go to state 48
    _readln           shift, and go to state 96
    _this             shift, and go to state 98
    _leftparen        shift, and go to state 100
    _intconstant      shift, and go to state 49
    _doubleconstant   shift, and go to state 50
    _stringconstant   shift, and go to state 51
    _booleanconstant  shift, and go to state 52
    _id               shift, and go to state 101

    EXPR      go to state 187
    LVALUE    go to state 113
    CALL      go to state 114
    CONSTANT  go to state 115


State 179

   56 IFSTMT: _if _leftparen EXPR _rightparen . STMT ELSESTMTO

    _not              shift, and go to state 89
    _minus            shift, and go to state 90
    _break            shift, and go to state 91
    _for              shift, and go to state 92
    _if               shift, and go to state 93
    _newarray         shift, and go to state 94
    _null             shift, and go to state 48
    _println          shift, and go to state 95
    _readln           shift, and go to state 96
    _return           shift, and go to state 97
    _this             shift, and go to state 98
    _while            shift, and go to state 99
    _leftparen        shift, and go to state 100
    _leftbrace        shift, and go to state 77
    _intconstant      shift, and go to state 49
    _doubleconstant   shift, and go to state 50
    _stringconstant   shift, and go to state 51
    _booleanconstant  shift, and go to state 52
    _id               shift, and go to state 101

    $default  reduce using rule 55 (EXPRO)

    STMTBLOCK   go to state 102
    STMT        go to state 188
    EXPRO       go to state 105
    IFSTMT      go to state 106
    WHILESTMT   go to state 107
    FORSTMT     go to state 108
    BREAKSTMT   go to state 109
    RETURNSTMT  go to state 110
    PRINTSTMT   go to state 111
    EXPR        go to state 112
    LVALUE      go to state 113
    CALL        go to state 114
    CONSTANT    go to state 115


State 180

   88 EXPR: _newarray _leftparen _intconstant _comma . TYPE _rightparen

    _boolean  shift, and go to state 1
    _double   shift, and go to state 3
    _int      shift, and go to state 4
    _string   shift, and go to state 6
    _id       shift, and go to state 8

    TYPE  go to state 189


State 181

   63 PRINTSTMT: _println _leftparen EXPRPC _rightparen . _semicolon

    _semicolon  shift, and go to state 190


State 182

   64 EXPRPC: EXPR _comma . EXPRPC

    _not              shift, and go to state 89
    _minus            shift, and go to state 90
    _newarray         shift, and go to state 94
    _null             shift, and go to state 48
    _readln           shift, and go to state 96
    _this             shift, and go to state 98
    _leftparen        shift, and go to state 100
    _intconstant      shift, and go to state 49
    _doubleconstant   shift, and go to state 50
    _stringconstant   shift, and go to state 51
    _booleanconstant  shift, and go to state 52
    _id               shift, and go to state 101

    EXPRPC    go to state 191
    EXPR      go to state 154
    LVALUE    go to state 113
    CALL      go to state 114
    CONSTANT  go to state 115


State 183

   59 WHILESTMT: _while _leftparen EXPR _rightparen . STMT

    _not              shift, and go to state 89
    _minus            shift, and go to state 90
    _break            shift, and go to state 91
    _for              shift, and go to state 92
    _if               shift, and go to state 93
    _newarray         shift, and go to state 94
    _null             shift, and go to state 48
    _println          shift, and go to state 95
    _readln           shift, and go to state 96
    _return           shift, and go to state 97
    _this             shift, and go to state 98
    _while            shift, and go to state 99
    _leftparen        shift, and go to state 100
    _leftbrace        shift, and go to state 77
    _intconstant      shift, and go to state 49
    _doubleconstant   shift, and go to state 50
    _stringconstant   shift, and go to state 51
    _booleanconstant  shift, and go to state 52
    _id               shift, and go to state 101

    $default  reduce using rule 55 (EXPRO)

    STMTBLOCK   go to state 102
    STMT        go to state 192
    EXPRO       go to state 105
    IFSTMT      go to state 106
    WHILESTMT   go to state 107
    FORSTMT     go to state 108
    BREAKSTMT   go to state 109
    RETURNSTMT  go to state 110
    PRINTSTMT   go to state 111
    EXPR        go to state 112
    LVALUE      go to state 113
    CALL        go to state 114
    CONSTANT    go to state 115


State 184

   93 CALL: _id _period _id _leftparen . ACTUALS _rightparen

    _not              shift, and go to state 89
    _minus            shift, and go to state 90
    _newarray         shift, and go to state 94
    _null             shift, and go to state 48
    _readln           shift, and go to state 96
    _this             shift, and go to state 98
    _leftparen        shift, and go to state 100
    _intconstant      shift, and go to state 49
    _doubleconstant   shift, and go to state 50
    _stringconstant   shift, and go to state 51
    _booleanconstant  shift, and go to state 52
    _id               shift, and go to state 101

    $default  reduce using rule 95 (ACTUALS)

    EXPRPC    go to state 160
    EXPR      go to state 154
    LVALUE    go to state 113
    CALL      go to state 114
    ACTUALS   go to state 193
    CONSTANT  go to state 115


State 185

   92 CALL: _id _leftparen ACTUALS _rightparen .

    $default  reduce using rule 92 (CALL)


State 186

   90 LVALUE: LVALUE _leftbracket EXPR _rightbracket .

    $default  reduce using rule 90 (LVALUE)


State 187

   60 FORSTMT: _for _leftparen EXPRO _semicolon EXPR . _semicolon EXPRO _rightparen STMT
   72 EXPR: EXPR . _plus EXPR
   73     | EXPR . _minus EXPR
   74     | EXPR . _multiplication EXPR
   75     | EXPR . _division EXPR
   76     | EXPR . _mod EXPR
   78     | EXPR . _less EXPR
   79     | EXPR . _lessequal EXPR
   80     | EXPR . _greater EXPR
   81     | EXPR . _greaterequal EXPR
   82     | EXPR . _equal EXPR
   83     | EXPR . _notequal EXPR
   84     | EXPR . _and EXPR
   85     | EXPR . _or EXPR

    _plus            shift, and go to state 134
    _minus           shift, and go to state 135
    _multiplication  shift, and go to state 136
    _division        shift, and go to state 137
    _mod             shift, and go to state 138
    _less            shift, and go to state 139
    _lessequal       shift, and go to state 140
    _greater         shift, and go to state 141
    _greaterequal    shift, and go to state 142
    _equal           shift, and go to state 143
    _notequal        shift, and go to state 144
    _and             shift, and go to state 145
    _or              shift, and go to state 146
    _semicolon       shift, and go to state 194


State 188

   56 IFSTMT: _if _leftparen EXPR _rightparen STMT . ELSESTMTO

    _else  shift, and go to state 195

    _else     [reduce using rule 58 (ELSESTMTO)]
    $default  reduce using rule 58 (ELSESTMTO)

    ELSESTMTO  go to state 196


State 189

   16 TYPE: TYPE . _leftbracket _rightbracket
   88 EXPR: _newarray _leftparen _intconstant _comma TYPE . _rightparen

    _leftbracket  shift, and go to state 25
    _rightparen   shift, and go to state 197


State 190

   63 PRINTSTMT: _println _leftparen EXPRPC _rightparen _semicolon .

    $default  reduce using rule 63 (PRINTSTMT)


State 191

   64 EXPRPC: EXPR _comma EXPRPC .

    $default  reduce using rule 64 (EXPRPC)


State 192

   59 WHILESTMT: _while _leftparen EXPR _rightparen STMT .

    $default  reduce using rule 59 (WHILESTMT)


State 193

   93 CALL: _id _period _id _leftparen ACTUALS . _rightparen

    _rightparen  shift, and go to state 198


State 194

   60 FORSTMT: _for _leftparen EXPRO _semicolon EXPR _semicolon . EXPRO _rightparen STMT

    _not              shift, and go to state 89
    _minus            shift, and go to state 90
    _newarray         shift, and go to state 94
    _null             shift, and go to state 48
    _readln           shift, and go to state 96
    _this             shift, and go to state 98
    _leftparen        shift, and go to state 100
    _intconstant      shift, and go to state 49
    _doubleconstant   shift, and go to state 50
    _stringconstant   shift, and go to state 51
    _booleanconstant  shift, and go to state 52
    _id               shift, and go to state 101

    $default  reduce using rule 55 (EXPRO)

    EXPRO     go to state 199
    EXPR      go to state 112
    LVALUE    go to state 113
    CALL      go to state 114
    CONSTANT  go to state 115


State 195

   57 ELSESTMTO: _else . STMT

    _not              shift, and go to state 89
    _minus            shift, and go to state 90
    _break            shift, and go to state 91
    _for              shift, and go to state 92
    _if               shift, and go to state 93
    _newarray         shift, and go to state 94
    _null             shift, and go to state 48
    _println          shift, and go to state 95
    _readln           shift, and go to state 96
    _return           shift, and go to state 97
    _this             shift, and go to state 98
    _while            shift, and go to state 99
    _leftparen        shift, and go to state 100
    _leftbrace        shift, and go to state 77
    _intconstant      shift, and go to state 49
    _doubleconstant   shift, and go to state 50
    _stringconstant   shift, and go to state 51
    _booleanconstant  shift, and go to state 52
    _id               shift, and go to state 101

    $default  reduce using rule 55 (EXPRO)

    STMTBLOCK   go to state 102
    STMT        go to state 200
    EXPRO       go to state 105
    IFSTMT      go to state 106
    WHILESTMT   go to state 107
    FORSTMT     go to state 108
    BREAKSTMT   go to state 109
    RETURNSTMT  go to state 110
    PRINTSTMT   go to state 111
    EXPR        go to state 112
    LVALUE      go to state 113
    CALL        go to state 114
    CONSTANT    go to state 115


State 196

   56 IFSTMT: _if _leftparen EXPR _rightparen STMT ELSESTMTO .

    $default  reduce using rule 56 (IFSTMT)


State 197

   88 EXPR: _newarray _leftparen _intconstant _comma TYPE _rightparen .

    $default  reduce using rule 88 (EXPR)


State 198

   93 CALL: _id _period _id _leftparen ACTUALS _rightparen .

    $default  reduce using rule 93 (CALL)


State 199

   60 FORSTMT: _for _leftparen EXPRO _semicolon EXPR _semicolon EXPRO . _rightparen STMT

    _rightparen  shift, and go to state 201


State 200

   57 ELSESTMTO: _else STMT .

    $default  reduce using rule 57 (ELSESTMTO)


State 201

   60 FORSTMT: _for _leftparen EXPRO _semicolon EXPR _semicolon EXPRO _rightparen . STMT

    _not              shift, and go to state 89
    _minus            shift, and go to state 90
    _break            shift, and go to state 91
    _for              shift, and go to state 92
    _if               shift, and go to state 93
    _newarray         shift, and go to state 94
    _null             shift, and go to state 48
    _println          shift, and go to state 95
    _readln           shift, and go to state 96
    _return           shift, and go to state 97
    _this             shift, and go to state 98
    _while            shift, and go to state 99
    _leftparen        shift, and go to state 100
    _leftbrace        shift, and go to state 77
    _intconstant      shift, and go to state 49
    _doubleconstant   shift, and go to state 50
    _stringconstant   shift, and go to state 51
    _booleanconstant  shift, and go to state 52
    _id               shift, and go to state 101

    $default  reduce using rule 55 (EXPRO)

    STMTBLOCK   go to state 102
    STMT        go to state 202
    EXPRO       go to state 105
    IFSTMT      go to state 106
    WHILESTMT   go to state 107
    FORSTMT     go to state 108
    BREAKSTMT   go to state 109
    RETURNSTMT  go to state 110
    PRINTSTMT   go to state 111
    EXPR        go to state 112
    LVALUE      go to state 113
    CALL        go to state 114
    CONSTANT    go to state 115


State 202

   60 FORSTMT: _for _leftparen EXPRO _semicolon EXPR _semicolon EXPRO _rightparen STMT .

    $default  reduce using rule 60 (FORSTMT)
