Terminals unused in grammar

    _unaryminus
    _new


State 30 conflicts: 1 reduce/reduce
State 33 conflicts: 1 reduce/reduce
State 73 conflicts: 1 reduce/reduce
State 74 conflicts: 1 reduce/reduce
State 76 conflicts: 1 shift/reduce
State 81 conflicts: 1 shift/reduce
State 100 conflicts: 1 shift/reduce
State 187 conflicts: 1 shift/reduce


Grammar

    0 $accept: PROGRAM $end

    1 PROGRAM: DECLP

    2 DECLP: DECL DECLP
    3      | DECL

    4 DECL: VARIABLEDECL
    5     | FUNCTIONDECL
    6     | CLASSDECL
    7     | INTERFACEDECL

    8 VARIABLEDECL: VARIABLE _semicolon
    9             | TYPE _id _assignop CONSTANT

   10 VARIABLE: TYPE _id

   11 TYPE: _int
   12     | _double
   13     | _boolean
   14     | _string
   15     | TYPE _leftbracket _rightbracket
   16     | _id

   17 FUNCTIONDECL: TYPE _id _leftparen FORMALS _rightparen STMTBLOCK
   18             | _void _id _leftparen FORMALS _rightparen STMTBLOCK

   19 FORMALS: VARIABLEPC
   20        | %empty

   21 VARIABLEPC: _comma VARIABLE VARIABLEPC
   22           | VARIABLE VARIABLEPC
   23           | %empty

   24 CLASSDECL: _class _id CLASSDECLO _leftbrace FIELDM _rightbrace

   25 CLASSDECLO: _extends _id
   26           | _implements IDPC
   27           | _extends _id _implements IDPC
   28           | %empty

   29 IDPC: _id _comma IDPC
   30     | _id

   31 FIELDM: FIELD FIELDM
   32       | %empty

   33 FIELD: VARIABLEDECL
   34      | FUNCTIONDECL

   35 INTERFACEDECL: _interface _id _leftbrace PROTOTYPEM _rightbrace

   36 PROTOTYPEM: PROTOTYPE PROTOTYPEM
   37           | %empty

   38 PROTOTYPE: TYPE _id _leftparen FORMALS _rightparen _semicolon
   39          | _void _id _leftparen FORMALS _rightparen _semicolon

   40 STMTBLOCK: _leftbrace VARIABLEDECLM STMTM _rightbrace

   41 VARIABLEDECLM: VARIABLEDECL VARIABLEDECLM
   42              | %empty

   43 STMTM: STMT STMTM
   44      | %empty

   45 STMT: EXPRO _semicolon
   46     | IFSTMT
   47     | WHILESTMT
   48     | FORSTMT
   49     | BREAKSTMT
   50     | RETURNSTMT
   51     | PRINTSTMT
   52     | STMTBLOCK

   53 EXPRO: EXPR
   54      | %empty

   55 IFSTMT: _if _leftparen EXPR _rightparen STMT ELSESTMTO

   56 ELSESTMTO: _else STMT
   57          | %empty

   58 WHILESTMT: _while _leftparen EXPR _rightparen STMT

   59 FORSTMT: _for _leftparen EXPRO _semicolon EXPR _semicolon EXPRO _rightparen STMT

   60 BREAKSTMT: _break _semicolon

   61 RETURNSTMT: _return EXPRO _semicolon

   62 PRINTSTMT: _println _leftparen EXPRPC _rightparen _semicolon

   63 EXPRPC: EXPR _comma EXPRPC
   64       | EXPR

   65 EXPR: LVALUE _assignop EXPR
   66     | CONSTANT
   67     | LVALUE
   68     | _this
   69     | CALL
   70     | _leftparen EXPR _rightparen
   71     | EXPR _plus EXPR
   72     | EXPR _minus EXPR
   73     | EXPR _multiplication EXPR
   74     | EXPR _division EXPR
   75     | EXPR _mod EXPR
   76     | _minus EXPR
   77     | EXPR _less EXPR
   78     | EXPR _lessequal EXPR
   79     | EXPR _greater EXPR
   80     | EXPR _greaterequal EXPR
   81     | EXPR _equal EXPR
   82     | EXPR _notequal EXPR
   83     | EXPR _and EXPR
   84     | EXPR _or EXPR
   85     | _not EXPR
   86     | _readln _leftparen _rightparen
   87     | _newarray _leftparen _intconstant _comma TYPE _rightparen

   88 LVALUE: _id
   89       | LVALUE _leftbracket EXPR _rightbracket
   90       | LVALUE _period _id

   91 CALL: _id _leftparen ACTUALS _rightparen
   92     | _id _period _id _leftparen ACTUALS _rightparen

   93 ACTUALS: EXPRPC
   94        | %empty

   95 CONSTANT: _intconstant
   96         | _doubleconstant
   97         | _stringconstant
   98         | _booleanconstant
   99         | _null


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    _leftbracket (258) 15 89
    _period (259) 90 92
    _not (260) 85
    _unaryminus (261)
    _plus (262) 71
    _minus (263) 72 76
    _multiplication (264) 73
    _division (265) 74
    _mod (266) 75
    _less (267) 77
    _lessequal (268) 78
    _greater (269) 79
    _greaterequal (270) 80
    _equal (271) 81
    _notequal (272) 82
    _and (273) 83
    _or (274) 84
    _assignop (275) 9 65
    _boolean (276) 13
    _break (277) 60
    _class (278) 24
    _double (279) 12
    _else (280) 56
    _extends (281) 25 27
    _for (282) 59
    _if (283) 55
    _implements (284) 26 27
    _int (285) 11
    _interface (286) 35
    _new (287)
    _newarray (288) 87
    _null (289) 99
    _println (290) 62
    _readln (291) 86
    _return (292) 61
    _string (293) 14
    _this (294) 68
    _void (295) 18 39
    _while (296) 58
    _semicolon (297) 8 38 39 45 59 60 61 62
    _comma (298) 21 29 63 87
    _leftparen (299) 17 18 38 39 55 58 59 62 70 86 87 91 92
    _rightparen (300) 17 18 38 39 55 58 59 62 70 86 87 91 92
    _rightbracket (301) 15 89
    _leftbrace (302) 24 35 40
    _rightbrace (303) 24 35 40
    _intconstant (304) 87 95
    _doubleconstant (305) 96
    _stringconstant (306) 97
    _booleanconstant (307) 98
    _id (308) 9 10 16 17 18 24 25 27 29 30 35 38 39 88 90 91 92


Nonterminals, with rules where they appear

    $accept (54)
        on left: 0
    PROGRAM (55)
        on left: 1
        on right: 0
    DECLP (56)
        on left: 2 3
        on right: 1 2
    DECL (57)
        on left: 4 5 6 7
        on right: 2 3
    VARIABLEDECL (58)
        on left: 8 9
        on right: 4 33 41
    VARIABLE (59)
        on left: 10
        on right: 8 21 22
    TYPE (60)
        on left: 11 12 13 14 15 16
        on right: 9 10 15 17 38 87
    FUNCTIONDECL (61)
        on left: 17 18
        on right: 5 34
    FORMALS (62)
        on left: 19 20
        on right: 17 18 38 39
    VARIABLEPC (63)
        on left: 21 22 23
        on right: 19 21 22
    CLASSDECL (64)
        on left: 24
        on right: 6
    CLASSDECLO (65)
        on left: 25 26 27 28
        on right: 24
    IDPC (66)
        on left: 29 30
        on right: 26 27 29
    FIELDM (67)
        on left: 31 32
        on right: 24 31
    FIELD (68)
        on left: 33 34
        on right: 31
    INTERFACEDECL (69)
        on left: 35
        on right: 7
    PROTOTYPEM (70)
        on left: 36 37
        on right: 35 36
    PROTOTYPE (71)
        on left: 38 39
        on right: 36
    STMTBLOCK (72)
        on left: 40
        on right: 17 18 52
    VARIABLEDECLM (73)
        on left: 41 42
        on right: 40 41
    STMTM (74)
        on left: 43 44
        on right: 40 43
    STMT (75)
        on left: 45 46 47 48 49 50 51 52
        on right: 43 55 56 58 59
    EXPRO (76)
        on left: 53 54
        on right: 45 59 61
    IFSTMT (77)
        on left: 55
        on right: 46
    ELSESTMTO (78)
        on left: 56 57
        on right: 55
    WHILESTMT (79)
        on left: 58
        on right: 47
    FORSTMT (80)
        on left: 59
        on right: 48
    BREAKSTMT (81)
        on left: 60
        on right: 49
    RETURNSTMT (82)
        on left: 61
        on right: 50
    PRINTSTMT (83)
        on left: 62
        on right: 51
    EXPRPC (84)
        on left: 63 64
        on right: 62 63 93
    EXPR (85)
        on left: 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87
        on right: 53 55 58 59 63 64 65 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 89
    LVALUE (86)
        on left: 88 89 90
        on right: 65 67 89 90
    CALL (87)
        on left: 91 92
        on right: 69
    ACTUALS (88)
        on left: 93 94
        on right: 91 92
    CONSTANT (89)
        on left: 95 96 97 98 99
        on right: 9 66


State 0

    0 $accept: . PROGRAM $end

    _boolean    shift, and go to state 1
    _class      shift, and go to state 2
    _double     shift, and go to state 3
    _int        shift, and go to state 4
    _interface  shift, and go to state 5
    _string     shift, and go to state 6
    _void       shift, and go to state 7
    _id         shift, and go to state 8

    PROGRAM        go to state 9
    DECLP          go to state 10
    DECL           go to state 11
    VARIABLEDECL   go to state 12
    VARIABLE       go to state 13
    TYPE           go to state 14
    FUNCTIONDECL   go to state 15
    CLASSDECL      go to state 16
    INTERFACEDECL  go to state 17


State 1

   13 TYPE: _boolean .

    $default  reduce using rule 13 (TYPE)


State 2

   24 CLASSDECL: _class . _id CLASSDECLO _leftbrace FIELDM _rightbrace

    _id  shift, and go to state 18


State 3

   12 TYPE: _double .

    $default  reduce using rule 12 (TYPE)


State 4

   11 TYPE: _int .

    $default  reduce using rule 11 (TYPE)


State 5

   35 INTERFACEDECL: _interface . _id _leftbrace PROTOTYPEM _rightbrace

    _id  shift, and go to state 19


State 6

   14 TYPE: _string .

    $default  reduce using rule 14 (TYPE)


State 7

   18 FUNCTIONDECL: _void . _id _leftparen FORMALS _rightparen STMTBLOCK

    _id  shift, and go to state 20


State 8

   16 TYPE: _id .

    $default  reduce using rule 16 (TYPE)


State 9

    0 $accept: PROGRAM . $end

    $end  shift, and go to state 21


State 10

    1 PROGRAM: DECLP .

    $default  reduce using rule 1 (PROGRAM)


State 11

    2 DECLP: DECL . DECLP
    3      | DECL .

    _boolean    shift, and go to state 1
    _class      shift, and go to state 2
    _double     shift, and go to state 3
    _int        shift, and go to state 4
    _interface  shift, and go to state 5
    _string     shift, and go to state 6
    _void       shift, and go to state 7
    _id         shift, and go to state 8

    $default  reduce using rule 3 (DECLP)

    DECLP          go to state 22
    DECL           go to state 11
    VARIABLEDECL   go to state 12
    VARIABLE       go to state 13
    TYPE           go to state 14
    FUNCTIONDECL   go to state 15
    CLASSDECL      go to state 16
    INTERFACEDECL  go to state 17


State 12

    4 DECL: VARIABLEDECL .

    $default  reduce using rule 4 (DECL)


State 13

    8 VARIABLEDECL: VARIABLE . _semicolon

    _semicolon  shift, and go to state 23


State 14

    9 VARIABLEDECL: TYPE . _id _assignop CONSTANT
   10 VARIABLE: TYPE . _id
   15 TYPE: TYPE . _leftbracket _rightbracket
   17 FUNCTIONDECL: TYPE . _id _leftparen FORMALS _rightparen STMTBLOCK

    _leftbracket  shift, and go to state 24
    _id           shift, and go to state 25


State 15

    5 DECL: FUNCTIONDECL .

    $default  reduce using rule 5 (DECL)


State 16

    6 DECL: CLASSDECL .

    $default  reduce using rule 6 (DECL)


State 17

    7 DECL: INTERFACEDECL .

    $default  reduce using rule 7 (DECL)


State 18

   24 CLASSDECL: _class _id . CLASSDECLO _leftbrace FIELDM _rightbrace

    _extends     shift, and go to state 26
    _implements  shift, and go to state 27

    $default  reduce using rule 28 (CLASSDECLO)

    CLASSDECLO  go to state 28


State 19

   35 INTERFACEDECL: _interface _id . _leftbrace PROTOTYPEM _rightbrace

    _leftbrace  shift, and go to state 29


State 20

   18 FUNCTIONDECL: _void _id . _leftparen FORMALS _rightparen STMTBLOCK

    _leftparen  shift, and go to state 30


State 21

    0 $accept: PROGRAM $end .

    $default  accept


State 22

    2 DECLP: DECL DECLP .

    $default  reduce using rule 2 (DECLP)


State 23

    8 VARIABLEDECL: VARIABLE _semicolon .

    $default  reduce using rule 8 (VARIABLEDECL)


State 24

   15 TYPE: TYPE _leftbracket . _rightbracket

    _rightbracket  shift, and go to state 31


State 25

    9 VARIABLEDECL: TYPE _id . _assignop CONSTANT
   10 VARIABLE: TYPE _id .
   17 FUNCTIONDECL: TYPE _id . _leftparen FORMALS _rightparen STMTBLOCK

    _assignop   shift, and go to state 32
    _leftparen  shift, and go to state 33

    $default  reduce using rule 10 (VARIABLE)


State 26

   25 CLASSDECLO: _extends . _id
   27           | _extends . _id _implements IDPC

    _id  shift, and go to state 34


State 27

   26 CLASSDECLO: _implements . IDPC

    _id  shift, and go to state 35

    IDPC  go to state 36


State 28

   24 CLASSDECL: _class _id CLASSDECLO . _leftbrace FIELDM _rightbrace

    _leftbrace  shift, and go to state 37


State 29

   35 INTERFACEDECL: _interface _id _leftbrace . PROTOTYPEM _rightbrace

    _boolean  shift, and go to state 1
    _double   shift, and go to state 3
    _int      shift, and go to state 4
    _string   shift, and go to state 6
    _void     shift, and go to state 38
    _id       shift, and go to state 8

    $default  reduce using rule 37 (PROTOTYPEM)

    TYPE        go to state 39
    PROTOTYPEM  go to state 40
    PROTOTYPE   go to state 41


State 30

   18 FUNCTIONDECL: _void _id _leftparen . FORMALS _rightparen STMTBLOCK

    _boolean  shift, and go to state 1
    _double   shift, and go to state 3
    _int      shift, and go to state 4
    _string   shift, and go to state 6
    _comma    shift, and go to state 42
    _id       shift, and go to state 8

    _rightparen  reduce using rule 20 (FORMALS)
    _rightparen  [reduce using rule 23 (VARIABLEPC)]
    $default     reduce using rule 20 (FORMALS)

    VARIABLE    go to state 43
    TYPE        go to state 44
    FORMALS     go to state 45
    VARIABLEPC  go to state 46


State 31

   15 TYPE: TYPE _leftbracket _rightbracket .

    $default  reduce using rule 15 (TYPE)


State 32

    9 VARIABLEDECL: TYPE _id _assignop . CONSTANT

    _null             shift, and go to state 47
    _intconstant      shift, and go to state 48
    _doubleconstant   shift, and go to state 49
    _stringconstant   shift, and go to state 50
    _booleanconstant  shift, and go to state 51

    CONSTANT  go to state 52


State 33

   17 FUNCTIONDECL: TYPE _id _leftparen . FORMALS _rightparen STMTBLOCK

    _boolean  shift, and go to state 1
    _double   shift, and go to state 3
    _int      shift, and go to state 4
    _string   shift, and go to state 6
    _comma    shift, and go to state 42
    _id       shift, and go to state 8

    _rightparen  reduce using rule 20 (FORMALS)
    _rightparen  [reduce using rule 23 (VARIABLEPC)]
    $default     reduce using rule 20 (FORMALS)

    VARIABLE    go to state 43
    TYPE        go to state 44
    FORMALS     go to state 53
    VARIABLEPC  go to state 46


State 34

   25 CLASSDECLO: _extends _id .
   27           | _extends _id . _implements IDPC

    _implements  shift, and go to state 54

    $default  reduce using rule 25 (CLASSDECLO)


State 35

   29 IDPC: _id . _comma IDPC
   30     | _id .

    _comma  shift, and go to state 55

    $default  reduce using rule 30 (IDPC)


State 36

   26 CLASSDECLO: _implements IDPC .

    $default  reduce using rule 26 (CLASSDECLO)


State 37

   24 CLASSDECL: _class _id CLASSDECLO _leftbrace . FIELDM _rightbrace

    _boolean  shift, and go to state 1
    _double   shift, and go to state 3
    _int      shift, and go to state 4
    _string   shift, and go to state 6
    _void     shift, and go to state 7
    _id       shift, and go to state 8

    $default  reduce using rule 32 (FIELDM)

    VARIABLEDECL  go to state 56
    VARIABLE      go to state 13
    TYPE          go to state 14
    FUNCTIONDECL  go to state 57
    FIELDM        go to state 58
    FIELD         go to state 59


State 38

   39 PROTOTYPE: _void . _id _leftparen FORMALS _rightparen _semicolon

    _id  shift, and go to state 60


State 39

   15 TYPE: TYPE . _leftbracket _rightbracket
   38 PROTOTYPE: TYPE . _id _leftparen FORMALS _rightparen _semicolon

    _leftbracket  shift, and go to state 24
    _id           shift, and go to state 61


State 40

   35 INTERFACEDECL: _interface _id _leftbrace PROTOTYPEM . _rightbrace

    _rightbrace  shift, and go to state 62


State 41

   36 PROTOTYPEM: PROTOTYPE . PROTOTYPEM

    _boolean  shift, and go to state 1
    _double   shift, and go to state 3
    _int      shift, and go to state 4
    _string   shift, and go to state 6
    _void     shift, and go to state 38
    _id       shift, and go to state 8

    $default  reduce using rule 37 (PROTOTYPEM)

    TYPE        go to state 39
    PROTOTYPEM  go to state 63
    PROTOTYPE   go to state 41


State 42

   21 VARIABLEPC: _comma . VARIABLE VARIABLEPC

    _boolean  shift, and go to state 1
    _double   shift, and go to state 3
    _int      shift, and go to state 4
    _string   shift, and go to state 6
    _id       shift, and go to state 8

    VARIABLE  go to state 64
    TYPE      go to state 44


State 43

   22 VARIABLEPC: VARIABLE . VARIABLEPC

    _boolean  shift, and go to state 1
    _double   shift, and go to state 3
    _int      shift, and go to state 4
    _string   shift, and go to state 6
    _comma    shift, and go to state 42
    _id       shift, and go to state 8

    $default  reduce using rule 23 (VARIABLEPC)

    VARIABLE    go to state 43
    TYPE        go to state 44
    VARIABLEPC  go to state 65


State 44

   10 VARIABLE: TYPE . _id
   15 TYPE: TYPE . _leftbracket _rightbracket

    _leftbracket  shift, and go to state 24
    _id           shift, and go to state 66


State 45

   18 FUNCTIONDECL: _void _id _leftparen FORMALS . _rightparen STMTBLOCK

    _rightparen  shift, and go to state 67


State 46

   19 FORMALS: VARIABLEPC .

    $default  reduce using rule 19 (FORMALS)


State 47

   99 CONSTANT: _null .

    $default  reduce using rule 99 (CONSTANT)


State 48

   95 CONSTANT: _intconstant .

    $default  reduce using rule 95 (CONSTANT)


State 49

   96 CONSTANT: _doubleconstant .

    $default  reduce using rule 96 (CONSTANT)


State 50

   97 CONSTANT: _stringconstant .

    $default  reduce using rule 97 (CONSTANT)


State 51

   98 CONSTANT: _booleanconstant .

    $default  reduce using rule 98 (CONSTANT)


State 52

    9 VARIABLEDECL: TYPE _id _assignop CONSTANT .

    $default  reduce using rule 9 (VARIABLEDECL)


State 53

   17 FUNCTIONDECL: TYPE _id _leftparen FORMALS . _rightparen STMTBLOCK

    _rightparen  shift, and go to state 68


State 54

   27 CLASSDECLO: _extends _id _implements . IDPC

    _id  shift, and go to state 35

    IDPC  go to state 69


State 55

   29 IDPC: _id _comma . IDPC

    _id  shift, and go to state 35

    IDPC  go to state 70


State 56

   33 FIELD: VARIABLEDECL .

    $default  reduce using rule 33 (FIELD)


State 57

   34 FIELD: FUNCTIONDECL .

    $default  reduce using rule 34 (FIELD)


State 58

   24 CLASSDECL: _class _id CLASSDECLO _leftbrace FIELDM . _rightbrace

    _rightbrace  shift, and go to state 71


State 59

   31 FIELDM: FIELD . FIELDM

    _boolean  shift, and go to state 1
    _double   shift, and go to state 3
    _int      shift, and go to state 4
    _string   shift, and go to state 6
    _void     shift, and go to state 7
    _id       shift, and go to state 8

    $default  reduce using rule 32 (FIELDM)

    VARIABLEDECL  go to state 56
    VARIABLE      go to state 13
    TYPE          go to state 14
    FUNCTIONDECL  go to state 57
    FIELDM        go to state 72
    FIELD         go to state 59


State 60

   39 PROTOTYPE: _void _id . _leftparen FORMALS _rightparen _semicolon

    _leftparen  shift, and go to state 73


State 61

   38 PROTOTYPE: TYPE _id . _leftparen FORMALS _rightparen _semicolon

    _leftparen  shift, and go to state 74


State 62

   35 INTERFACEDECL: _interface _id _leftbrace PROTOTYPEM _rightbrace .

    $default  reduce using rule 35 (INTERFACEDECL)


State 63

   36 PROTOTYPEM: PROTOTYPE PROTOTYPEM .

    $default  reduce using rule 36 (PROTOTYPEM)


State 64

   21 VARIABLEPC: _comma VARIABLE . VARIABLEPC

    _boolean  shift, and go to state 1
    _double   shift, and go to state 3
    _int      shift, and go to state 4
    _string   shift, and go to state 6
    _comma    shift, and go to state 42
    _id       shift, and go to state 8

    $default  reduce using rule 23 (VARIABLEPC)

    VARIABLE    go to state 43
    TYPE        go to state 44
    VARIABLEPC  go to state 75


State 65

   22 VARIABLEPC: VARIABLE VARIABLEPC .

    $default  reduce using rule 22 (VARIABLEPC)


State 66

   10 VARIABLE: TYPE _id .

    $default  reduce using rule 10 (VARIABLE)


State 67

   18 FUNCTIONDECL: _void _id _leftparen FORMALS _rightparen . STMTBLOCK

    _leftbrace  shift, and go to state 76

    STMTBLOCK  go to state 77


State 68

   17 FUNCTIONDECL: TYPE _id _leftparen FORMALS _rightparen . STMTBLOCK

    _leftbrace  shift, and go to state 76

    STMTBLOCK  go to state 78


State 69

   27 CLASSDECLO: _extends _id _implements IDPC .

    $default  reduce using rule 27 (CLASSDECLO)


State 70

   29 IDPC: _id _comma IDPC .

    $default  reduce using rule 29 (IDPC)


State 71

   24 CLASSDECL: _class _id CLASSDECLO _leftbrace FIELDM _rightbrace .

    $default  reduce using rule 24 (CLASSDECL)


State 72

   31 FIELDM: FIELD FIELDM .

    $default  reduce using rule 31 (FIELDM)


State 73

   39 PROTOTYPE: _void _id _leftparen . FORMALS _rightparen _semicolon

    _boolean  shift, and go to state 1
    _double   shift, and go to state 3
    _int      shift, and go to state 4
    _string   shift, and go to state 6
    _comma    shift, and go to state 42
    _id       shift, and go to state 8

    _rightparen  reduce using rule 20 (FORMALS)
    _rightparen  [reduce using rule 23 (VARIABLEPC)]
    $default     reduce using rule 20 (FORMALS)

    VARIABLE    go to state 43
    TYPE        go to state 44
    FORMALS     go to state 79
    VARIABLEPC  go to state 46


State 74

   38 PROTOTYPE: TYPE _id _leftparen . FORMALS _rightparen _semicolon

    _boolean  shift, and go to state 1
    _double   shift, and go to state 3
    _int      shift, and go to state 4
    _string   shift, and go to state 6
    _comma    shift, and go to state 42
    _id       shift, and go to state 8

    _rightparen  reduce using rule 20 (FORMALS)
    _rightparen  [reduce using rule 23 (VARIABLEPC)]
    $default     reduce using rule 20 (FORMALS)

    VARIABLE    go to state 43
    TYPE        go to state 44
    FORMALS     go to state 80
    VARIABLEPC  go to state 46


State 75

   21 VARIABLEPC: _comma VARIABLE VARIABLEPC .

    $default  reduce using rule 21 (VARIABLEPC)


State 76

   40 STMTBLOCK: _leftbrace . VARIABLEDECLM STMTM _rightbrace

    _boolean  shift, and go to state 1
    _double   shift, and go to state 3
    _int      shift, and go to state 4
    _string   shift, and go to state 6
    _id       shift, and go to state 8

    _id       [reduce using rule 42 (VARIABLEDECLM)]
    $default  reduce using rule 42 (VARIABLEDECLM)

    VARIABLEDECL   go to state 81
    VARIABLE       go to state 13
    TYPE           go to state 82
    VARIABLEDECLM  go to state 83


State 77

   18 FUNCTIONDECL: _void _id _leftparen FORMALS _rightparen STMTBLOCK .

    $default  reduce using rule 18 (FUNCTIONDECL)


State 78

   17 FUNCTIONDECL: TYPE _id _leftparen FORMALS _rightparen STMTBLOCK .

    $default  reduce using rule 17 (FUNCTIONDECL)


State 79

   39 PROTOTYPE: _void _id _leftparen FORMALS . _rightparen _semicolon

    _rightparen  shift, and go to state 84


State 80

   38 PROTOTYPE: TYPE _id _leftparen FORMALS . _rightparen _semicolon

    _rightparen  shift, and go to state 85


State 81

   41 VARIABLEDECLM: VARIABLEDECL . VARIABLEDECLM

    _boolean  shift, and go to state 1
    _double   shift, and go to state 3
    _int      shift, and go to state 4
    _string   shift, and go to state 6
    _id       shift, and go to state 8

    _id       [reduce using rule 42 (VARIABLEDECLM)]
    $default  reduce using rule 42 (VARIABLEDECLM)

    VARIABLEDECL   go to state 81
    VARIABLE       go to state 13
    TYPE           go to state 82
    VARIABLEDECLM  go to state 86


State 82

    9 VARIABLEDECL: TYPE . _id _assignop CONSTANT
   10 VARIABLE: TYPE . _id
   15 TYPE: TYPE . _leftbracket _rightbracket

    _leftbracket  shift, and go to state 24
    _id           shift, and go to state 87


State 83

   40 STMTBLOCK: _leftbrace VARIABLEDECLM . STMTM _rightbrace

    _not              shift, and go to state 88
    _minus            shift, and go to state 89
    _break            shift, and go to state 90
    _for              shift, and go to state 91
    _if               shift, and go to state 92
    _newarray         shift, and go to state 93
    _null             shift, and go to state 47
    _println          shift, and go to state 94
    _readln           shift, and go to state 95
    _return           shift, and go to state 96
    _this             shift, and go to state 97
    _while            shift, and go to state 98
    _leftparen        shift, and go to state 99
    _leftbrace        shift, and go to state 76
    _intconstant      shift, and go to state 48
    _doubleconstant   shift, and go to state 49
    _stringconstant   shift, and go to state 50
    _booleanconstant  shift, and go to state 51
    _id               shift, and go to state 100

    _semicolon  reduce using rule 54 (EXPRO)
    $default    reduce using rule 44 (STMTM)

    STMTBLOCK   go to state 101
    STMTM       go to state 102
    STMT        go to state 103
    EXPRO       go to state 104
    IFSTMT      go to state 105
    WHILESTMT   go to state 106
    FORSTMT     go to state 107
    BREAKSTMT   go to state 108
    RETURNSTMT  go to state 109
    PRINTSTMT   go to state 110
    EXPR        go to state 111
    LVALUE      go to state 112
    CALL        go to state 113
    CONSTANT    go to state 114


State 84

   39 PROTOTYPE: _void _id _leftparen FORMALS _rightparen . _semicolon

    _semicolon  shift, and go to state 115


State 85

   38 PROTOTYPE: TYPE _id _leftparen FORMALS _rightparen . _semicolon

    _semicolon  shift, and go to state 116


State 86

   41 VARIABLEDECLM: VARIABLEDECL VARIABLEDECLM .

    $default  reduce using rule 41 (VARIABLEDECLM)


State 87

    9 VARIABLEDECL: TYPE _id . _assignop CONSTANT
   10 VARIABLE: TYPE _id .

    _assignop  shift, and go to state 32

    $default  reduce using rule 10 (VARIABLE)


State 88

   85 EXPR: _not . EXPR

    _not              shift, and go to state 88
    _minus            shift, and go to state 89
    _newarray         shift, and go to state 93
    _null             shift, and go to state 47
    _readln           shift, and go to state 95
    _this             shift, and go to state 97
    _leftparen        shift, and go to state 99
    _intconstant      shift, and go to state 48
    _doubleconstant   shift, and go to state 49
    _stringconstant   shift, and go to state 50
    _booleanconstant  shift, and go to state 51
    _id               shift, and go to state 100

    EXPR      go to state 117
    LVALUE    go to state 112
    CALL      go to state 113
    CONSTANT  go to state 114


State 89

   76 EXPR: _minus . EXPR

    _not              shift, and go to state 88
    _minus            shift, and go to state 89
    _newarray         shift, and go to state 93
    _null             shift, and go to state 47
    _readln           shift, and go to state 95
    _this             shift, and go to state 97
    _leftparen        shift, and go to state 99
    _intconstant      shift, and go to state 48
    _doubleconstant   shift, and go to state 49
    _stringconstant   shift, and go to state 50
    _booleanconstant  shift, and go to state 51
    _id               shift, and go to state 100

    EXPR      go to state 118
    LVALUE    go to state 112
    CALL      go to state 113
    CONSTANT  go to state 114


State 90

   60 BREAKSTMT: _break . _semicolon

    _semicolon  shift, and go to state 119


State 91

   59 FORSTMT: _for . _leftparen EXPRO _semicolon EXPR _semicolon EXPRO _rightparen STMT

    _leftparen  shift, and go to state 120


State 92

   55 IFSTMT: _if . _leftparen EXPR _rightparen STMT ELSESTMTO

    _leftparen  shift, and go to state 121


State 93

   87 EXPR: _newarray . _leftparen _intconstant _comma TYPE _rightparen

    _leftparen  shift, and go to state 122


State 94

   62 PRINTSTMT: _println . _leftparen EXPRPC _rightparen _semicolon

    _leftparen  shift, and go to state 123


State 95

   86 EXPR: _readln . _leftparen _rightparen

    _leftparen  shift, and go to state 124


State 96

   61 RETURNSTMT: _return . EXPRO _semicolon

    _not              shift, and go to state 88
    _minus            shift, and go to state 89
    _newarray         shift, and go to state 93
    _null             shift, and go to state 47
    _readln           shift, and go to state 95
    _this             shift, and go to state 97
    _leftparen        shift, and go to state 99
    _intconstant      shift, and go to state 48
    _doubleconstant   shift, and go to state 49
    _stringconstant   shift, and go to state 50
    _booleanconstant  shift, and go to state 51
    _id               shift, and go to state 100

    $default  reduce using rule 54 (EXPRO)

    EXPRO     go to state 125
    EXPR      go to state 111
    LVALUE    go to state 112
    CALL      go to state 113
    CONSTANT  go to state 114


State 97

   68 EXPR: _this .

    $default  reduce using rule 68 (EXPR)


State 98

   58 WHILESTMT: _while . _leftparen EXPR _rightparen STMT

    _leftparen  shift, and go to state 126


State 99

   70 EXPR: _leftparen . EXPR _rightparen

    _not              shift, and go to state 88
    _minus            shift, and go to state 89
    _newarray         shift, and go to state 93
    _null             shift, and go to state 47
    _readln           shift, and go to state 95
    _this             shift, and go to state 97
    _leftparen        shift, and go to state 99
    _intconstant      shift, and go to state 48
    _doubleconstant   shift, and go to state 49
    _stringconstant   shift, and go to state 50
    _booleanconstant  shift, and go to state 51
    _id               shift, and go to state 100

    EXPR      go to state 127
    LVALUE    go to state 112
    CALL      go to state 113
    CONSTANT  go to state 114


State 100

   88 LVALUE: _id .
   91 CALL: _id . _leftparen ACTUALS _rightparen
   92     | _id . _period _id _leftparen ACTUALS _rightparen

    _period     shift, and go to state 128
    _leftparen  shift, and go to state 129

    _period   [reduce using rule 88 (LVALUE)]
    $default  reduce using rule 88 (LVALUE)


State 101

   52 STMT: STMTBLOCK .

    $default  reduce using rule 52 (STMT)


State 102

   40 STMTBLOCK: _leftbrace VARIABLEDECLM STMTM . _rightbrace

    _rightbrace  shift, and go to state 130


State 103

   43 STMTM: STMT . STMTM

    _not              shift, and go to state 88
    _minus            shift, and go to state 89
    _break            shift, and go to state 90
    _for              shift, and go to state 91
    _if               shift, and go to state 92
    _newarray         shift, and go to state 93
    _null             shift, and go to state 47
    _println          shift, and go to state 94
    _readln           shift, and go to state 95
    _return           shift, and go to state 96
    _this             shift, and go to state 97
    _while            shift, and go to state 98
    _leftparen        shift, and go to state 99
    _leftbrace        shift, and go to state 76
    _intconstant      shift, and go to state 48
    _doubleconstant   shift, and go to state 49
    _stringconstant   shift, and go to state 50
    _booleanconstant  shift, and go to state 51
    _id               shift, and go to state 100

    _semicolon  reduce using rule 54 (EXPRO)
    $default    reduce using rule 44 (STMTM)

    STMTBLOCK   go to state 101
    STMTM       go to state 131
    STMT        go to state 103
    EXPRO       go to state 104
    IFSTMT      go to state 105
    WHILESTMT   go to state 106
    FORSTMT     go to state 107
    BREAKSTMT   go to state 108
    RETURNSTMT  go to state 109
    PRINTSTMT   go to state 110
    EXPR        go to state 111
    LVALUE      go to state 112
    CALL        go to state 113
    CONSTANT    go to state 114


State 104

   45 STMT: EXPRO . _semicolon

    _semicolon  shift, and go to state 132


State 105

   46 STMT: IFSTMT .

    $default  reduce using rule 46 (STMT)


State 106

   47 STMT: WHILESTMT .

    $default  reduce using rule 47 (STMT)


State 107

   48 STMT: FORSTMT .

    $default  reduce using rule 48 (STMT)


State 108

   49 STMT: BREAKSTMT .

    $default  reduce using rule 49 (STMT)


State 109

   50 STMT: RETURNSTMT .

    $default  reduce using rule 50 (STMT)


State 110

   51 STMT: PRINTSTMT .

    $default  reduce using rule 51 (STMT)


State 111

   53 EXPRO: EXPR .
   71 EXPR: EXPR . _plus EXPR
   72     | EXPR . _minus EXPR
   73     | EXPR . _multiplication EXPR
   74     | EXPR . _division EXPR
   75     | EXPR . _mod EXPR
   77     | EXPR . _less EXPR
   78     | EXPR . _lessequal EXPR
   79     | EXPR . _greater EXPR
   80     | EXPR . _greaterequal EXPR
   81     | EXPR . _equal EXPR
   82     | EXPR . _notequal EXPR
   83     | EXPR . _and EXPR
   84     | EXPR . _or EXPR

    _plus            shift, and go to state 133
    _minus           shift, and go to state 134
    _multiplication  shift, and go to state 135
    _division        shift, and go to state 136
    _mod             shift, and go to state 137
    _less            shift, and go to state 138
    _lessequal       shift, and go to state 139
    _greater         shift, and go to state 140
    _greaterequal    shift, and go to state 141
    _equal           shift, and go to state 142
    _notequal        shift, and go to state 143
    _and             shift, and go to state 144
    _or              shift, and go to state 145

    $default  reduce using rule 53 (EXPRO)


State 112

   65 EXPR: LVALUE . _assignop EXPR
   67     | LVALUE .
   89 LVALUE: LVALUE . _leftbracket EXPR _rightbracket
   90       | LVALUE . _period _id

    _leftbracket  shift, and go to state 146
    _period       shift, and go to state 147
    _assignop     shift, and go to state 148

    $default  reduce using rule 67 (EXPR)


State 113

   69 EXPR: CALL .

    $default  reduce using rule 69 (EXPR)


State 114

   66 EXPR: CONSTANT .

    $default  reduce using rule 66 (EXPR)


State 115

   39 PROTOTYPE: _void _id _leftparen FORMALS _rightparen _semicolon .

    $default  reduce using rule 39 (PROTOTYPE)


State 116

   38 PROTOTYPE: TYPE _id _leftparen FORMALS _rightparen _semicolon .

    $default  reduce using rule 38 (PROTOTYPE)


State 117

   71 EXPR: EXPR . _plus EXPR
   72     | EXPR . _minus EXPR
   73     | EXPR . _multiplication EXPR
   74     | EXPR . _division EXPR
   75     | EXPR . _mod EXPR
   77     | EXPR . _less EXPR
   78     | EXPR . _lessequal EXPR
   79     | EXPR . _greater EXPR
   80     | EXPR . _greaterequal EXPR
   81     | EXPR . _equal EXPR
   82     | EXPR . _notequal EXPR
   83     | EXPR . _and EXPR
   84     | EXPR . _or EXPR
   85     | _not EXPR .

    _plus            shift, and go to state 133
    _minus           shift, and go to state 134
    _multiplication  shift, and go to state 135
    _division        shift, and go to state 136
    _mod             shift, and go to state 137
    _less            shift, and go to state 138
    _lessequal       shift, and go to state 139
    _greater         shift, and go to state 140
    _greaterequal    shift, and go to state 141
    _equal           shift, and go to state 142
    _notequal        shift, and go to state 143
    _and             shift, and go to state 144
    _or              shift, and go to state 145

    $default  reduce using rule 85 (EXPR)


State 118

   71 EXPR: EXPR . _plus EXPR
   72     | EXPR . _minus EXPR
   73     | EXPR . _multiplication EXPR
   74     | EXPR . _division EXPR
   75     | EXPR . _mod EXPR
   76     | _minus EXPR .
   77     | EXPR . _less EXPR
   78     | EXPR . _lessequal EXPR
   79     | EXPR . _greater EXPR
   80     | EXPR . _greaterequal EXPR
   81     | EXPR . _equal EXPR
   82     | EXPR . _notequal EXPR
   83     | EXPR . _and EXPR
   84     | EXPR . _or EXPR

    _multiplication  shift, and go to state 135
    _division        shift, and go to state 136
    _mod             shift, and go to state 137
    _less            shift, and go to state 138
    _lessequal       shift, and go to state 139
    _greater         shift, and go to state 140
    _greaterequal    shift, and go to state 141
    _equal           shift, and go to state 142
    _notequal        shift, and go to state 143
    _and             shift, and go to state 144
    _or              shift, and go to state 145

    $default  reduce using rule 76 (EXPR)


State 119

   60 BREAKSTMT: _break _semicolon .

    $default  reduce using rule 60 (BREAKSTMT)


State 120

   59 FORSTMT: _for _leftparen . EXPRO _semicolon EXPR _semicolon EXPRO _rightparen STMT

    _not              shift, and go to state 88
    _minus            shift, and go to state 89
    _newarray         shift, and go to state 93
    _null             shift, and go to state 47
    _readln           shift, and go to state 95
    _this             shift, and go to state 97
    _leftparen        shift, and go to state 99
    _intconstant      shift, and go to state 48
    _doubleconstant   shift, and go to state 49
    _stringconstant   shift, and go to state 50
    _booleanconstant  shift, and go to state 51
    _id               shift, and go to state 100

    $default  reduce using rule 54 (EXPRO)

    EXPRO     go to state 149
    EXPR      go to state 111
    LVALUE    go to state 112
    CALL      go to state 113
    CONSTANT  go to state 114


State 121

   55 IFSTMT: _if _leftparen . EXPR _rightparen STMT ELSESTMTO

    _not              shift, and go to state 88
    _minus            shift, and go to state 89
    _newarray         shift, and go to state 93
    _null             shift, and go to state 47
    _readln           shift, and go to state 95
    _this             shift, and go to state 97
    _leftparen        shift, and go to state 99
    _intconstant      shift, and go to state 48
    _doubleconstant   shift, and go to state 49
    _stringconstant   shift, and go to state 50
    _booleanconstant  shift, and go to state 51
    _id               shift, and go to state 100

    EXPR      go to state 150
    LVALUE    go to state 112
    CALL      go to state 113
    CONSTANT  go to state 114


State 122

   87 EXPR: _newarray _leftparen . _intconstant _comma TYPE _rightparen

    _intconstant  shift, and go to state 151


State 123

   62 PRINTSTMT: _println _leftparen . EXPRPC _rightparen _semicolon

    _not              shift, and go to state 88
    _minus            shift, and go to state 89
    _newarray         shift, and go to state 93
    _null             shift, and go to state 47
    _readln           shift, and go to state 95
    _this             shift, and go to state 97
    _leftparen        shift, and go to state 99
    _intconstant      shift, and go to state 48
    _doubleconstant   shift, and go to state 49
    _stringconstant   shift, and go to state 50
    _booleanconstant  shift, and go to state 51
    _id               shift, and go to state 100

    EXPRPC    go to state 152
    EXPR      go to state 153
    LVALUE    go to state 112
    CALL      go to state 113
    CONSTANT  go to state 114


State 124

   86 EXPR: _readln _leftparen . _rightparen

    _rightparen  shift, and go to state 154


State 125

   61 RETURNSTMT: _return EXPRO . _semicolon

    _semicolon  shift, and go to state 155


State 126

   58 WHILESTMT: _while _leftparen . EXPR _rightparen STMT

    _not              shift, and go to state 88
    _minus            shift, and go to state 89
    _newarray         shift, and go to state 93
    _null             shift, and go to state 47
    _readln           shift, and go to state 95
    _this             shift, and go to state 97
    _leftparen        shift, and go to state 99
    _intconstant      shift, and go to state 48
    _doubleconstant   shift, and go to state 49
    _stringconstant   shift, and go to state 50
    _booleanconstant  shift, and go to state 51
    _id               shift, and go to state 100

    EXPR      go to state 156
    LVALUE    go to state 112
    CALL      go to state 113
    CONSTANT  go to state 114


State 127

   70 EXPR: _leftparen EXPR . _rightparen
   71     | EXPR . _plus EXPR
   72     | EXPR . _minus EXPR
   73     | EXPR . _multiplication EXPR
   74     | EXPR . _division EXPR
   75     | EXPR . _mod EXPR
   77     | EXPR . _less EXPR
   78     | EXPR . _lessequal EXPR
   79     | EXPR . _greater EXPR
   80     | EXPR . _greaterequal EXPR
   81     | EXPR . _equal EXPR
   82     | EXPR . _notequal EXPR
   83     | EXPR . _and EXPR
   84     | EXPR . _or EXPR

    _plus            shift, and go to state 133
    _minus           shift, and go to state 134
    _multiplication  shift, and go to state 135
    _division        shift, and go to state 136
    _mod             shift, and go to state 137
    _less            shift, and go to state 138
    _lessequal       shift, and go to state 139
    _greater         shift, and go to state 140
    _greaterequal    shift, and go to state 141
    _equal           shift, and go to state 142
    _notequal        shift, and go to state 143
    _and             shift, and go to state 144
    _or              shift, and go to state 145
    _rightparen      shift, and go to state 157


State 128

   92 CALL: _id _period . _id _leftparen ACTUALS _rightparen

    _id  shift, and go to state 158


State 129

   91 CALL: _id _leftparen . ACTUALS _rightparen

    _not              shift, and go to state 88
    _minus            shift, and go to state 89
    _newarray         shift, and go to state 93
    _null             shift, and go to state 47
    _readln           shift, and go to state 95
    _this             shift, and go to state 97
    _leftparen        shift, and go to state 99
    _intconstant      shift, and go to state 48
    _doubleconstant   shift, and go to state 49
    _stringconstant   shift, and go to state 50
    _booleanconstant  shift, and go to state 51
    _id               shift, and go to state 100

    $default  reduce using rule 94 (ACTUALS)

    EXPRPC    go to state 159
    EXPR      go to state 153
    LVALUE    go to state 112
    CALL      go to state 113
    ACTUALS   go to state 160
    CONSTANT  go to state 114


State 130

   40 STMTBLOCK: _leftbrace VARIABLEDECLM STMTM _rightbrace .

    $default  reduce using rule 40 (STMTBLOCK)


State 131

   43 STMTM: STMT STMTM .

    $default  reduce using rule 43 (STMTM)


State 132

   45 STMT: EXPRO _semicolon .

    $default  reduce using rule 45 (STMT)


State 133

   71 EXPR: EXPR _plus . EXPR

    _not              shift, and go to state 88
    _minus            shift, and go to state 89
    _newarray         shift, and go to state 93
    _null             shift, and go to state 47
    _readln           shift, and go to state 95
    _this             shift, and go to state 97
    _leftparen        shift, and go to state 99
    _intconstant      shift, and go to state 48
    _doubleconstant   shift, and go to state 49
    _stringconstant   shift, and go to state 50
    _booleanconstant  shift, and go to state 51
    _id               shift, and go to state 100

    EXPR      go to state 161
    LVALUE    go to state 112
    CALL      go to state 113
    CONSTANT  go to state 114


State 134

   72 EXPR: EXPR _minus . EXPR

    _not              shift, and go to state 88
    _minus            shift, and go to state 89
    _newarray         shift, and go to state 93
    _null             shift, and go to state 47
    _readln           shift, and go to state 95
    _this             shift, and go to state 97
    _leftparen        shift, and go to state 99
    _intconstant      shift, and go to state 48
    _doubleconstant   shift, and go to state 49
    _stringconstant   shift, and go to state 50
    _booleanconstant  shift, and go to state 51
    _id               shift, and go to state 100

    EXPR      go to state 162
    LVALUE    go to state 112
    CALL      go to state 113
    CONSTANT  go to state 114


State 135

   73 EXPR: EXPR _multiplication . EXPR

    _not              shift, and go to state 88
    _minus            shift, and go to state 89
    _newarray         shift, and go to state 93
    _null             shift, and go to state 47
    _readln           shift, and go to state 95
    _this             shift, and go to state 97
    _leftparen        shift, and go to state 99
    _intconstant      shift, and go to state 48
    _doubleconstant   shift, and go to state 49
    _stringconstant   shift, and go to state 50
    _booleanconstant  shift, and go to state 51
    _id               shift, and go to state 100

    EXPR      go to state 163
    LVALUE    go to state 112
    CALL      go to state 113
    CONSTANT  go to state 114


State 136

   74 EXPR: EXPR _division . EXPR

    _not              shift, and go to state 88
    _minus            shift, and go to state 89
    _newarray         shift, and go to state 93
    _null             shift, and go to state 47
    _readln           shift, and go to state 95
    _this             shift, and go to state 97
    _leftparen        shift, and go to state 99
    _intconstant      shift, and go to state 48
    _doubleconstant   shift, and go to state 49
    _stringconstant   shift, and go to state 50
    _booleanconstant  shift, and go to state 51
    _id               shift, and go to state 100

    EXPR      go to state 164
    LVALUE    go to state 112
    CALL      go to state 113
    CONSTANT  go to state 114


State 137

   75 EXPR: EXPR _mod . EXPR

    _not              shift, and go to state 88
    _minus            shift, and go to state 89
    _newarray         shift, and go to state 93
    _null             shift, and go to state 47
    _readln           shift, and go to state 95
    _this             shift, and go to state 97
    _leftparen        shift, and go to state 99
    _intconstant      shift, and go to state 48
    _doubleconstant   shift, and go to state 49
    _stringconstant   shift, and go to state 50
    _booleanconstant  shift, and go to state 51
    _id               shift, and go to state 100

    EXPR      go to state 165
    LVALUE    go to state 112
    CALL      go to state 113
    CONSTANT  go to state 114


State 138

   77 EXPR: EXPR _less . EXPR

    _not              shift, and go to state 88
    _minus            shift, and go to state 89
    _newarray         shift, and go to state 93
    _null             shift, and go to state 47
    _readln           shift, and go to state 95
    _this             shift, and go to state 97
    _leftparen        shift, and go to state 99
    _intconstant      shift, and go to state 48
    _doubleconstant   shift, and go to state 49
    _stringconstant   shift, and go to state 50
    _booleanconstant  shift, and go to state 51
    _id               shift, and go to state 100

    EXPR      go to state 166
    LVALUE    go to state 112
    CALL      go to state 113
    CONSTANT  go to state 114


State 139

   78 EXPR: EXPR _lessequal . EXPR

    _not              shift, and go to state 88
    _minus            shift, and go to state 89
    _newarray         shift, and go to state 93
    _null             shift, and go to state 47
    _readln           shift, and go to state 95
    _this             shift, and go to state 97
    _leftparen        shift, and go to state 99
    _intconstant      shift, and go to state 48
    _doubleconstant   shift, and go to state 49
    _stringconstant   shift, and go to state 50
    _booleanconstant  shift, and go to state 51
    _id               shift, and go to state 100

    EXPR      go to state 167
    LVALUE    go to state 112
    CALL      go to state 113
    CONSTANT  go to state 114


State 140

   79 EXPR: EXPR _greater . EXPR

    _not              shift, and go to state 88
    _minus            shift, and go to state 89
    _newarray         shift, and go to state 93
    _null             shift, and go to state 47
    _readln           shift, and go to state 95
    _this             shift, and go to state 97
    _leftparen        shift, and go to state 99
    _intconstant      shift, and go to state 48
    _doubleconstant   shift, and go to state 49
    _stringconstant   shift, and go to state 50
    _booleanconstant  shift, and go to state 51
    _id               shift, and go to state 100

    EXPR      go to state 168
    LVALUE    go to state 112
    CALL      go to state 113
    CONSTANT  go to state 114


State 141

   80 EXPR: EXPR _greaterequal . EXPR

    _not              shift, and go to state 88
    _minus            shift, and go to state 89
    _newarray         shift, and go to state 93
    _null             shift, and go to state 47
    _readln           shift, and go to state 95
    _this             shift, and go to state 97
    _leftparen        shift, and go to state 99
    _intconstant      shift, and go to state 48
    _doubleconstant   shift, and go to state 49
    _stringconstant   shift, and go to state 50
    _booleanconstant  shift, and go to state 51
    _id               shift, and go to state 100

    EXPR      go to state 169
    LVALUE    go to state 112
    CALL      go to state 113
    CONSTANT  go to state 114


State 142

   81 EXPR: EXPR _equal . EXPR

    _not              shift, and go to state 88
    _minus            shift, and go to state 89
    _newarray         shift, and go to state 93
    _null             shift, and go to state 47
    _readln           shift, and go to state 95
    _this             shift, and go to state 97
    _leftparen        shift, and go to state 99
    _intconstant      shift, and go to state 48
    _doubleconstant   shift, and go to state 49
    _stringconstant   shift, and go to state 50
    _booleanconstant  shift, and go to state 51
    _id               shift, and go to state 100

    EXPR      go to state 170
    LVALUE    go to state 112
    CALL      go to state 113
    CONSTANT  go to state 114


State 143

   82 EXPR: EXPR _notequal . EXPR

    _not              shift, and go to state 88
    _minus            shift, and go to state 89
    _newarray         shift, and go to state 93
    _null             shift, and go to state 47
    _readln           shift, and go to state 95
    _this             shift, and go to state 97
    _leftparen        shift, and go to state 99
    _intconstant      shift, and go to state 48
    _doubleconstant   shift, and go to state 49
    _stringconstant   shift, and go to state 50
    _booleanconstant  shift, and go to state 51
    _id               shift, and go to state 100

    EXPR      go to state 171
    LVALUE    go to state 112
    CALL      go to state 113
    CONSTANT  go to state 114


State 144

   83 EXPR: EXPR _and . EXPR

    _not              shift, and go to state 88
    _minus            shift, and go to state 89
    _newarray         shift, and go to state 93
    _null             shift, and go to state 47
    _readln           shift, and go to state 95
    _this             shift, and go to state 97
    _leftparen        shift, and go to state 99
    _intconstant      shift, and go to state 48
    _doubleconstant   shift, and go to state 49
    _stringconstant   shift, and go to state 50
    _booleanconstant  shift, and go to state 51
    _id               shift, and go to state 100

    EXPR      go to state 172
    LVALUE    go to state 112
    CALL      go to state 113
    CONSTANT  go to state 114


State 145

   84 EXPR: EXPR _or . EXPR

    _not              shift, and go to state 88
    _minus            shift, and go to state 89
    _newarray         shift, and go to state 93
    _null             shift, and go to state 47
    _readln           shift, and go to state 95
    _this             shift, and go to state 97
    _leftparen        shift, and go to state 99
    _intconstant      shift, and go to state 48
    _doubleconstant   shift, and go to state 49
    _stringconstant   shift, and go to state 50
    _booleanconstant  shift, and go to state 51
    _id               shift, and go to state 100

    EXPR      go to state 173
    LVALUE    go to state 112
    CALL      go to state 113
    CONSTANT  go to state 114


State 146

   89 LVALUE: LVALUE _leftbracket . EXPR _rightbracket

    _not              shift, and go to state 88
    _minus            shift, and go to state 89
    _newarray         shift, and go to state 93
    _null             shift, and go to state 47
    _readln           shift, and go to state 95
    _this             shift, and go to state 97
    _leftparen        shift, and go to state 99
    _intconstant      shift, and go to state 48
    _doubleconstant   shift, and go to state 49
    _stringconstant   shift, and go to state 50
    _booleanconstant  shift, and go to state 51
    _id               shift, and go to state 100

    EXPR      go to state 174
    LVALUE    go to state 112
    CALL      go to state 113
    CONSTANT  go to state 114


State 147

   90 LVALUE: LVALUE _period . _id

    _id  shift, and go to state 175


State 148

   65 EXPR: LVALUE _assignop . EXPR

    _not              shift, and go to state 88
    _minus            shift, and go to state 89
    _newarray         shift, and go to state 93
    _null             shift, and go to state 47
    _readln           shift, and go to state 95
    _this             shift, and go to state 97
    _leftparen        shift, and go to state 99
    _intconstant      shift, and go to state 48
    _doubleconstant   shift, and go to state 49
    _stringconstant   shift, and go to state 50
    _booleanconstant  shift, and go to state 51
    _id               shift, and go to state 100

    EXPR      go to state 176
    LVALUE    go to state 112
    CALL      go to state 113
    CONSTANT  go to state 114


State 149

   59 FORSTMT: _for _leftparen EXPRO . _semicolon EXPR _semicolon EXPRO _rightparen STMT

    _semicolon  shift, and go to state 177


State 150

   55 IFSTMT: _if _leftparen EXPR . _rightparen STMT ELSESTMTO
   71 EXPR: EXPR . _plus EXPR
   72     | EXPR . _minus EXPR
   73     | EXPR . _multiplication EXPR
   74     | EXPR . _division EXPR
   75     | EXPR . _mod EXPR
   77     | EXPR . _less EXPR
   78     | EXPR . _lessequal EXPR
   79     | EXPR . _greater EXPR
   80     | EXPR . _greaterequal EXPR
   81     | EXPR . _equal EXPR
   82     | EXPR . _notequal EXPR
   83     | EXPR . _and EXPR
   84     | EXPR . _or EXPR

    _plus            shift, and go to state 133
    _minus           shift, and go to state 134
    _multiplication  shift, and go to state 135
    _division        shift, and go to state 136
    _mod             shift, and go to state 137
    _less            shift, and go to state 138
    _lessequal       shift, and go to state 139
    _greater         shift, and go to state 140
    _greaterequal    shift, and go to state 141
    _equal           shift, and go to state 142
    _notequal        shift, and go to state 143
    _and             shift, and go to state 144
    _or              shift, and go to state 145
    _rightparen      shift, and go to state 178


State 151

   87 EXPR: _newarray _leftparen _intconstant . _comma TYPE _rightparen

    _comma  shift, and go to state 179


State 152

   62 PRINTSTMT: _println _leftparen EXPRPC . _rightparen _semicolon

    _rightparen  shift, and go to state 180


State 153

   63 EXPRPC: EXPR . _comma EXPRPC
   64       | EXPR .
   71 EXPR: EXPR . _plus EXPR
   72     | EXPR . _minus EXPR
   73     | EXPR . _multiplication EXPR
   74     | EXPR . _division EXPR
   75     | EXPR . _mod EXPR
   77     | EXPR . _less EXPR
   78     | EXPR . _lessequal EXPR
   79     | EXPR . _greater EXPR
   80     | EXPR . _greaterequal EXPR
   81     | EXPR . _equal EXPR
   82     | EXPR . _notequal EXPR
   83     | EXPR . _and EXPR
   84     | EXPR . _or EXPR

    _plus            shift, and go to state 133
    _minus           shift, and go to state 134
    _multiplication  shift, and go to state 135
    _division        shift, and go to state 136
    _mod             shift, and go to state 137
    _less            shift, and go to state 138
    _lessequal       shift, and go to state 139
    _greater         shift, and go to state 140
    _greaterequal    shift, and go to state 141
    _equal           shift, and go to state 142
    _notequal        shift, and go to state 143
    _and             shift, and go to state 144
    _or              shift, and go to state 145
    _comma           shift, and go to state 181

    $default  reduce using rule 64 (EXPRPC)


State 154

   86 EXPR: _readln _leftparen _rightparen .

    $default  reduce using rule 86 (EXPR)


State 155

   61 RETURNSTMT: _return EXPRO _semicolon .

    $default  reduce using rule 61 (RETURNSTMT)


State 156

   58 WHILESTMT: _while _leftparen EXPR . _rightparen STMT
   71 EXPR: EXPR . _plus EXPR
   72     | EXPR . _minus EXPR
   73     | EXPR . _multiplication EXPR
   74     | EXPR . _division EXPR
   75     | EXPR . _mod EXPR
   77     | EXPR . _less EXPR
   78     | EXPR . _lessequal EXPR
   79     | EXPR . _greater EXPR
   80     | EXPR . _greaterequal EXPR
   81     | EXPR . _equal EXPR
   82     | EXPR . _notequal EXPR
   83     | EXPR . _and EXPR
   84     | EXPR . _or EXPR

    _plus            shift, and go to state 133
    _minus           shift, and go to state 134
    _multiplication  shift, and go to state 135
    _division        shift, and go to state 136
    _mod             shift, and go to state 137
    _less            shift, and go to state 138
    _lessequal       shift, and go to state 139
    _greater         shift, and go to state 140
    _greaterequal    shift, and go to state 141
    _equal           shift, and go to state 142
    _notequal        shift, and go to state 143
    _and             shift, and go to state 144
    _or              shift, and go to state 145
    _rightparen      shift, and go to state 182


State 157

   70 EXPR: _leftparen EXPR _rightparen .

    $default  reduce using rule 70 (EXPR)


State 158

   92 CALL: _id _period _id . _leftparen ACTUALS _rightparen

    _leftparen  shift, and go to state 183


State 159

   93 ACTUALS: EXPRPC .

    $default  reduce using rule 93 (ACTUALS)


State 160

   91 CALL: _id _leftparen ACTUALS . _rightparen

    _rightparen  shift, and go to state 184


State 161

   71 EXPR: EXPR . _plus EXPR
   71     | EXPR _plus EXPR .
   72     | EXPR . _minus EXPR
   73     | EXPR . _multiplication EXPR
   74     | EXPR . _division EXPR
   75     | EXPR . _mod EXPR
   77     | EXPR . _less EXPR
   78     | EXPR . _lessequal EXPR
   79     | EXPR . _greater EXPR
   80     | EXPR . _greaterequal EXPR
   81     | EXPR . _equal EXPR
   82     | EXPR . _notequal EXPR
   83     | EXPR . _and EXPR
   84     | EXPR . _or EXPR

    _multiplication  shift, and go to state 135
    _division        shift, and go to state 136
    _mod             shift, and go to state 137
    _less            shift, and go to state 138
    _lessequal       shift, and go to state 139
    _greater         shift, and go to state 140
    _greaterequal    shift, and go to state 141
    _equal           shift, and go to state 142
    _notequal        shift, and go to state 143
    _and             shift, and go to state 144
    _or              shift, and go to state 145

    $default  reduce using rule 71 (EXPR)


State 162

   71 EXPR: EXPR . _plus EXPR
   72     | EXPR . _minus EXPR
   72     | EXPR _minus EXPR .
   73     | EXPR . _multiplication EXPR
   74     | EXPR . _division EXPR
   75     | EXPR . _mod EXPR
   77     | EXPR . _less EXPR
   78     | EXPR . _lessequal EXPR
   79     | EXPR . _greater EXPR
   80     | EXPR . _greaterequal EXPR
   81     | EXPR . _equal EXPR
   82     | EXPR . _notequal EXPR
   83     | EXPR . _and EXPR
   84     | EXPR . _or EXPR

    _multiplication  shift, and go to state 135
    _division        shift, and go to state 136
    _mod             shift, and go to state 137
    _less            shift, and go to state 138
    _lessequal       shift, and go to state 139
    _greater         shift, and go to state 140
    _greaterequal    shift, and go to state 141
    _equal           shift, and go to state 142
    _notequal        shift, and go to state 143
    _and             shift, and go to state 144
    _or              shift, and go to state 145

    $default  reduce using rule 72 (EXPR)


State 163

   71 EXPR: EXPR . _plus EXPR
   72     | EXPR . _minus EXPR
   73     | EXPR . _multiplication EXPR
   73     | EXPR _multiplication EXPR .
   74     | EXPR . _division EXPR
   75     | EXPR . _mod EXPR
   77     | EXPR . _less EXPR
   78     | EXPR . _lessequal EXPR
   79     | EXPR . _greater EXPR
   80     | EXPR . _greaterequal EXPR
   81     | EXPR . _equal EXPR
   82     | EXPR . _notequal EXPR
   83     | EXPR . _and EXPR
   84     | EXPR . _or EXPR

    _less          shift, and go to state 138
    _lessequal     shift, and go to state 139
    _greater       shift, and go to state 140
    _greaterequal  shift, and go to state 141
    _equal         shift, and go to state 142
    _notequal      shift, and go to state 143
    _and           shift, and go to state 144
    _or            shift, and go to state 145

    $default  reduce using rule 73 (EXPR)


State 164

   71 EXPR: EXPR . _plus EXPR
   72     | EXPR . _minus EXPR
   73     | EXPR . _multiplication EXPR
   74     | EXPR . _division EXPR
   74     | EXPR _division EXPR .
   75     | EXPR . _mod EXPR
   77     | EXPR . _less EXPR
   78     | EXPR . _lessequal EXPR
   79     | EXPR . _greater EXPR
   80     | EXPR . _greaterequal EXPR
   81     | EXPR . _equal EXPR
   82     | EXPR . _notequal EXPR
   83     | EXPR . _and EXPR
   84     | EXPR . _or EXPR

    _less          shift, and go to state 138
    _lessequal     shift, and go to state 139
    _greater       shift, and go to state 140
    _greaterequal  shift, and go to state 141
    _equal         shift, and go to state 142
    _notequal      shift, and go to state 143
    _and           shift, and go to state 144
    _or            shift, and go to state 145

    $default  reduce using rule 74 (EXPR)


State 165

   71 EXPR: EXPR . _plus EXPR
   72     | EXPR . _minus EXPR
   73     | EXPR . _multiplication EXPR
   74     | EXPR . _division EXPR
   75     | EXPR . _mod EXPR
   75     | EXPR _mod EXPR .
   77     | EXPR . _less EXPR
   78     | EXPR . _lessequal EXPR
   79     | EXPR . _greater EXPR
   80     | EXPR . _greaterequal EXPR
   81     | EXPR . _equal EXPR
   82     | EXPR . _notequal EXPR
   83     | EXPR . _and EXPR
   84     | EXPR . _or EXPR

    _less          shift, and go to state 138
    _lessequal     shift, and go to state 139
    _greater       shift, and go to state 140
    _greaterequal  shift, and go to state 141
    _equal         shift, and go to state 142
    _notequal      shift, and go to state 143
    _and           shift, and go to state 144
    _or            shift, and go to state 145

    $default  reduce using rule 75 (EXPR)


State 166

   71 EXPR: EXPR . _plus EXPR
   72     | EXPR . _minus EXPR
   73     | EXPR . _multiplication EXPR
   74     | EXPR . _division EXPR
   75     | EXPR . _mod EXPR
   77     | EXPR . _less EXPR
   77     | EXPR _less EXPR .
   78     | EXPR . _lessequal EXPR
   79     | EXPR . _greater EXPR
   80     | EXPR . _greaterequal EXPR
   81     | EXPR . _equal EXPR
   82     | EXPR . _notequal EXPR
   83     | EXPR . _and EXPR
   84     | EXPR . _or EXPR

    _equal     shift, and go to state 142
    _notequal  shift, and go to state 143
    _and       shift, and go to state 144
    _or        shift, and go to state 145

    _less          error (nonassociative)
    _lessequal     error (nonassociative)
    _greater       error (nonassociative)
    _greaterequal  error (nonassociative)

    $default  reduce using rule 77 (EXPR)


State 167

   71 EXPR: EXPR . _plus EXPR
   72     | EXPR . _minus EXPR
   73     | EXPR . _multiplication EXPR
   74     | EXPR . _division EXPR
   75     | EXPR . _mod EXPR
   77     | EXPR . _less EXPR
   78     | EXPR . _lessequal EXPR
   78     | EXPR _lessequal EXPR .
   79     | EXPR . _greater EXPR
   80     | EXPR . _greaterequal EXPR
   81     | EXPR . _equal EXPR
   82     | EXPR . _notequal EXPR
   83     | EXPR . _and EXPR
   84     | EXPR . _or EXPR

    _equal     shift, and go to state 142
    _notequal  shift, and go to state 143
    _and       shift, and go to state 144
    _or        shift, and go to state 145

    _less          error (nonassociative)
    _lessequal     error (nonassociative)
    _greater       error (nonassociative)
    _greaterequal  error (nonassociative)

    $default  reduce using rule 78 (EXPR)


State 168

   71 EXPR: EXPR . _plus EXPR
   72     | EXPR . _minus EXPR
   73     | EXPR . _multiplication EXPR
   74     | EXPR . _division EXPR
   75     | EXPR . _mod EXPR
   77     | EXPR . _less EXPR
   78     | EXPR . _lessequal EXPR
   79     | EXPR . _greater EXPR
   79     | EXPR _greater EXPR .
   80     | EXPR . _greaterequal EXPR
   81     | EXPR . _equal EXPR
   82     | EXPR . _notequal EXPR
   83     | EXPR . _and EXPR
   84     | EXPR . _or EXPR

    _equal     shift, and go to state 142
    _notequal  shift, and go to state 143
    _and       shift, and go to state 144
    _or        shift, and go to state 145

    _less          error (nonassociative)
    _lessequal     error (nonassociative)
    _greater       error (nonassociative)
    _greaterequal  error (nonassociative)

    $default  reduce using rule 79 (EXPR)


State 169

   71 EXPR: EXPR . _plus EXPR
   72     | EXPR . _minus EXPR
   73     | EXPR . _multiplication EXPR
   74     | EXPR . _division EXPR
   75     | EXPR . _mod EXPR
   77     | EXPR . _less EXPR
   78     | EXPR . _lessequal EXPR
   79     | EXPR . _greater EXPR
   80     | EXPR . _greaterequal EXPR
   80     | EXPR _greaterequal EXPR .
   81     | EXPR . _equal EXPR
   82     | EXPR . _notequal EXPR
   83     | EXPR . _and EXPR
   84     | EXPR . _or EXPR

    _equal     shift, and go to state 142
    _notequal  shift, and go to state 143
    _and       shift, and go to state 144
    _or        shift, and go to state 145

    _less          error (nonassociative)
    _lessequal     error (nonassociative)
    _greater       error (nonassociative)
    _greaterequal  error (nonassociative)

    $default  reduce using rule 80 (EXPR)


State 170

   71 EXPR: EXPR . _plus EXPR
   72     | EXPR . _minus EXPR
   73     | EXPR . _multiplication EXPR
   74     | EXPR . _division EXPR
   75     | EXPR . _mod EXPR
   77     | EXPR . _less EXPR
   78     | EXPR . _lessequal EXPR
   79     | EXPR . _greater EXPR
   80     | EXPR . _greaterequal EXPR
   81     | EXPR . _equal EXPR
   81     | EXPR _equal EXPR .
   82     | EXPR . _notequal EXPR
   83     | EXPR . _and EXPR
   84     | EXPR . _or EXPR

    _and  shift, and go to state 144
    _or   shift, and go to state 145

    _equal     error (nonassociative)
    _notequal  error (nonassociative)

    $default  reduce using rule 81 (EXPR)


State 171

   71 EXPR: EXPR . _plus EXPR
   72     | EXPR . _minus EXPR
   73     | EXPR . _multiplication EXPR
   74     | EXPR . _division EXPR
   75     | EXPR . _mod EXPR
   77     | EXPR . _less EXPR
   78     | EXPR . _lessequal EXPR
   79     | EXPR . _greater EXPR
   80     | EXPR . _greaterequal EXPR
   81     | EXPR . _equal EXPR
   82     | EXPR . _notequal EXPR
   82     | EXPR _notequal EXPR .
   83     | EXPR . _and EXPR
   84     | EXPR . _or EXPR

    _and  shift, and go to state 144
    _or   shift, and go to state 145

    _equal     error (nonassociative)
    _notequal  error (nonassociative)

    $default  reduce using rule 82 (EXPR)


State 172

   71 EXPR: EXPR . _plus EXPR
   72     | EXPR . _minus EXPR
   73     | EXPR . _multiplication EXPR
   74     | EXPR . _division EXPR
   75     | EXPR . _mod EXPR
   77     | EXPR . _less EXPR
   78     | EXPR . _lessequal EXPR
   79     | EXPR . _greater EXPR
   80     | EXPR . _greaterequal EXPR
   81     | EXPR . _equal EXPR
   82     | EXPR . _notequal EXPR
   83     | EXPR . _and EXPR
   83     | EXPR _and EXPR .
   84     | EXPR . _or EXPR

    _or  shift, and go to state 145

    $default  reduce using rule 83 (EXPR)


State 173

   71 EXPR: EXPR . _plus EXPR
   72     | EXPR . _minus EXPR
   73     | EXPR . _multiplication EXPR
   74     | EXPR . _division EXPR
   75     | EXPR . _mod EXPR
   77     | EXPR . _less EXPR
   78     | EXPR . _lessequal EXPR
   79     | EXPR . _greater EXPR
   80     | EXPR . _greaterequal EXPR
   81     | EXPR . _equal EXPR
   82     | EXPR . _notequal EXPR
   83     | EXPR . _and EXPR
   84     | EXPR . _or EXPR
   84     | EXPR _or EXPR .

    $default  reduce using rule 84 (EXPR)


State 174

   71 EXPR: EXPR . _plus EXPR
   72     | EXPR . _minus EXPR
   73     | EXPR . _multiplication EXPR
   74     | EXPR . _division EXPR
   75     | EXPR . _mod EXPR
   77     | EXPR . _less EXPR
   78     | EXPR . _lessequal EXPR
   79     | EXPR . _greater EXPR
   80     | EXPR . _greaterequal EXPR
   81     | EXPR . _equal EXPR
   82     | EXPR . _notequal EXPR
   83     | EXPR . _and EXPR
   84     | EXPR . _or EXPR
   89 LVALUE: LVALUE _leftbracket EXPR . _rightbracket

    _plus            shift, and go to state 133
    _minus           shift, and go to state 134
    _multiplication  shift, and go to state 135
    _division        shift, and go to state 136
    _mod             shift, and go to state 137
    _less            shift, and go to state 138
    _lessequal       shift, and go to state 139
    _greater         shift, and go to state 140
    _greaterequal    shift, and go to state 141
    _equal           shift, and go to state 142
    _notequal        shift, and go to state 143
    _and             shift, and go to state 144
    _or              shift, and go to state 145
    _rightbracket    shift, and go to state 185


State 175

   90 LVALUE: LVALUE _period _id .

    $default  reduce using rule 90 (LVALUE)


State 176

   65 EXPR: LVALUE _assignop EXPR .
   71     | EXPR . _plus EXPR
   72     | EXPR . _minus EXPR
   73     | EXPR . _multiplication EXPR
   74     | EXPR . _division EXPR
   75     | EXPR . _mod EXPR
   77     | EXPR . _less EXPR
   78     | EXPR . _lessequal EXPR
   79     | EXPR . _greater EXPR
   80     | EXPR . _greaterequal EXPR
   81     | EXPR . _equal EXPR
   82     | EXPR . _notequal EXPR
   83     | EXPR . _and EXPR
   84     | EXPR . _or EXPR

    $default  reduce using rule 65 (EXPR)


State 177

   59 FORSTMT: _for _leftparen EXPRO _semicolon . EXPR _semicolon EXPRO _rightparen STMT

    _not              shift, and go to state 88
    _minus            shift, and go to state 89
    _newarray         shift, and go to state 93
    _null             shift, and go to state 47
    _readln           shift, and go to state 95
    _this             shift, and go to state 97
    _leftparen        shift, and go to state 99
    _intconstant      shift, and go to state 48
    _doubleconstant   shift, and go to state 49
    _stringconstant   shift, and go to state 50
    _booleanconstant  shift, and go to state 51
    _id               shift, and go to state 100

    EXPR      go to state 186
    LVALUE    go to state 112
    CALL      go to state 113
    CONSTANT  go to state 114


State 178

   55 IFSTMT: _if _leftparen EXPR _rightparen . STMT ELSESTMTO

    _not              shift, and go to state 88
    _minus            shift, and go to state 89
    _break            shift, and go to state 90
    _for              shift, and go to state 91
    _if               shift, and go to state 92
    _newarray         shift, and go to state 93
    _null             shift, and go to state 47
    _println          shift, and go to state 94
    _readln           shift, and go to state 95
    _return           shift, and go to state 96
    _this             shift, and go to state 97
    _while            shift, and go to state 98
    _leftparen        shift, and go to state 99
    _leftbrace        shift, and go to state 76
    _intconstant      shift, and go to state 48
    _doubleconstant   shift, and go to state 49
    _stringconstant   shift, and go to state 50
    _booleanconstant  shift, and go to state 51
    _id               shift, and go to state 100

    $default  reduce using rule 54 (EXPRO)

    STMTBLOCK   go to state 101
    STMT        go to state 187
    EXPRO       go to state 104
    IFSTMT      go to state 105
    WHILESTMT   go to state 106
    FORSTMT     go to state 107
    BREAKSTMT   go to state 108
    RETURNSTMT  go to state 109
    PRINTSTMT   go to state 110
    EXPR        go to state 111
    LVALUE      go to state 112
    CALL        go to state 113
    CONSTANT    go to state 114


State 179

   87 EXPR: _newarray _leftparen _intconstant _comma . TYPE _rightparen

    _boolean  shift, and go to state 1
    _double   shift, and go to state 3
    _int      shift, and go to state 4
    _string   shift, and go to state 6
    _id       shift, and go to state 8

    TYPE  go to state 188


State 180

   62 PRINTSTMT: _println _leftparen EXPRPC _rightparen . _semicolon

    _semicolon  shift, and go to state 189


State 181

   63 EXPRPC: EXPR _comma . EXPRPC

    _not              shift, and go to state 88
    _minus            shift, and go to state 89
    _newarray         shift, and go to state 93
    _null             shift, and go to state 47
    _readln           shift, and go to state 95
    _this             shift, and go to state 97
    _leftparen        shift, and go to state 99
    _intconstant      shift, and go to state 48
    _doubleconstant   shift, and go to state 49
    _stringconstant   shift, and go to state 50
    _booleanconstant  shift, and go to state 51
    _id               shift, and go to state 100

    EXPRPC    go to state 190
    EXPR      go to state 153
    LVALUE    go to state 112
    CALL      go to state 113
    CONSTANT  go to state 114


State 182

   58 WHILESTMT: _while _leftparen EXPR _rightparen . STMT

    _not              shift, and go to state 88
    _minus            shift, and go to state 89
    _break            shift, and go to state 90
    _for              shift, and go to state 91
    _if               shift, and go to state 92
    _newarray         shift, and go to state 93
    _null             shift, and go to state 47
    _println          shift, and go to state 94
    _readln           shift, and go to state 95
    _return           shift, and go to state 96
    _this             shift, and go to state 97
    _while            shift, and go to state 98
    _leftparen        shift, and go to state 99
    _leftbrace        shift, and go to state 76
    _intconstant      shift, and go to state 48
    _doubleconstant   shift, and go to state 49
    _stringconstant   shift, and go to state 50
    _booleanconstant  shift, and go to state 51
    _id               shift, and go to state 100

    $default  reduce using rule 54 (EXPRO)

    STMTBLOCK   go to state 101
    STMT        go to state 191
    EXPRO       go to state 104
    IFSTMT      go to state 105
    WHILESTMT   go to state 106
    FORSTMT     go to state 107
    BREAKSTMT   go to state 108
    RETURNSTMT  go to state 109
    PRINTSTMT   go to state 110
    EXPR        go to state 111
    LVALUE      go to state 112
    CALL        go to state 113
    CONSTANT    go to state 114


State 183

   92 CALL: _id _period _id _leftparen . ACTUALS _rightparen

    _not              shift, and go to state 88
    _minus            shift, and go to state 89
    _newarray         shift, and go to state 93
    _null             shift, and go to state 47
    _readln           shift, and go to state 95
    _this             shift, and go to state 97
    _leftparen        shift, and go to state 99
    _intconstant      shift, and go to state 48
    _doubleconstant   shift, and go to state 49
    _stringconstant   shift, and go to state 50
    _booleanconstant  shift, and go to state 51
    _id               shift, and go to state 100

    $default  reduce using rule 94 (ACTUALS)

    EXPRPC    go to state 159
    EXPR      go to state 153
    LVALUE    go to state 112
    CALL      go to state 113
    ACTUALS   go to state 192
    CONSTANT  go to state 114


State 184

   91 CALL: _id _leftparen ACTUALS _rightparen .

    $default  reduce using rule 91 (CALL)


State 185

   89 LVALUE: LVALUE _leftbracket EXPR _rightbracket .

    $default  reduce using rule 89 (LVALUE)


State 186

   59 FORSTMT: _for _leftparen EXPRO _semicolon EXPR . _semicolon EXPRO _rightparen STMT
   71 EXPR: EXPR . _plus EXPR
   72     | EXPR . _minus EXPR
   73     | EXPR . _multiplication EXPR
   74     | EXPR . _division EXPR
   75     | EXPR . _mod EXPR
   77     | EXPR . _less EXPR
   78     | EXPR . _lessequal EXPR
   79     | EXPR . _greater EXPR
   80     | EXPR . _greaterequal EXPR
   81     | EXPR . _equal EXPR
   82     | EXPR . _notequal EXPR
   83     | EXPR . _and EXPR
   84     | EXPR . _or EXPR

    _plus            shift, and go to state 133
    _minus           shift, and go to state 134
    _multiplication  shift, and go to state 135
    _division        shift, and go to state 136
    _mod             shift, and go to state 137
    _less            shift, and go to state 138
    _lessequal       shift, and go to state 139
    _greater         shift, and go to state 140
    _greaterequal    shift, and go to state 141
    _equal           shift, and go to state 142
    _notequal        shift, and go to state 143
    _and             shift, and go to state 144
    _or              shift, and go to state 145
    _semicolon       shift, and go to state 193


State 187

   55 IFSTMT: _if _leftparen EXPR _rightparen STMT . ELSESTMTO

    _else  shift, and go to state 194

    _else     [reduce using rule 57 (ELSESTMTO)]
    $default  reduce using rule 57 (ELSESTMTO)

    ELSESTMTO  go to state 195


State 188

   15 TYPE: TYPE . _leftbracket _rightbracket
   87 EXPR: _newarray _leftparen _intconstant _comma TYPE . _rightparen

    _leftbracket  shift, and go to state 24
    _rightparen   shift, and go to state 196


State 189

   62 PRINTSTMT: _println _leftparen EXPRPC _rightparen _semicolon .

    $default  reduce using rule 62 (PRINTSTMT)


State 190

   63 EXPRPC: EXPR _comma EXPRPC .

    $default  reduce using rule 63 (EXPRPC)


State 191

   58 WHILESTMT: _while _leftparen EXPR _rightparen STMT .

    $default  reduce using rule 58 (WHILESTMT)


State 192

   92 CALL: _id _period _id _leftparen ACTUALS . _rightparen

    _rightparen  shift, and go to state 197


State 193

   59 FORSTMT: _for _leftparen EXPRO _semicolon EXPR _semicolon . EXPRO _rightparen STMT

    _not              shift, and go to state 88
    _minus            shift, and go to state 89
    _newarray         shift, and go to state 93
    _null             shift, and go to state 47
    _readln           shift, and go to state 95
    _this             shift, and go to state 97
    _leftparen        shift, and go to state 99
    _intconstant      shift, and go to state 48
    _doubleconstant   shift, and go to state 49
    _stringconstant   shift, and go to state 50
    _booleanconstant  shift, and go to state 51
    _id               shift, and go to state 100

    $default  reduce using rule 54 (EXPRO)

    EXPRO     go to state 198
    EXPR      go to state 111
    LVALUE    go to state 112
    CALL      go to state 113
    CONSTANT  go to state 114


State 194

   56 ELSESTMTO: _else . STMT

    _not              shift, and go to state 88
    _minus            shift, and go to state 89
    _break            shift, and go to state 90
    _for              shift, and go to state 91
    _if               shift, and go to state 92
    _newarray         shift, and go to state 93
    _null             shift, and go to state 47
    _println          shift, and go to state 94
    _readln           shift, and go to state 95
    _return           shift, and go to state 96
    _this             shift, and go to state 97
    _while            shift, and go to state 98
    _leftparen        shift, and go to state 99
    _leftbrace        shift, and go to state 76
    _intconstant      shift, and go to state 48
    _doubleconstant   shift, and go to state 49
    _stringconstant   shift, and go to state 50
    _booleanconstant  shift, and go to state 51
    _id               shift, and go to state 100

    $default  reduce using rule 54 (EXPRO)

    STMTBLOCK   go to state 101
    STMT        go to state 199
    EXPRO       go to state 104
    IFSTMT      go to state 105
    WHILESTMT   go to state 106
    FORSTMT     go to state 107
    BREAKSTMT   go to state 108
    RETURNSTMT  go to state 109
    PRINTSTMT   go to state 110
    EXPR        go to state 111
    LVALUE      go to state 112
    CALL        go to state 113
    CONSTANT    go to state 114


State 195

   55 IFSTMT: _if _leftparen EXPR _rightparen STMT ELSESTMTO .

    $default  reduce using rule 55 (IFSTMT)


State 196

   87 EXPR: _newarray _leftparen _intconstant _comma TYPE _rightparen .

    $default  reduce using rule 87 (EXPR)


State 197

   92 CALL: _id _period _id _leftparen ACTUALS _rightparen .

    $default  reduce using rule 92 (CALL)


State 198

   59 FORSTMT: _for _leftparen EXPRO _semicolon EXPR _semicolon EXPRO . _rightparen STMT

    _rightparen  shift, and go to state 200


State 199

   56 ELSESTMTO: _else STMT .

    $default  reduce using rule 56 (ELSESTMTO)


State 200

   59 FORSTMT: _for _leftparen EXPRO _semicolon EXPR _semicolon EXPRO _rightparen . STMT

    _not              shift, and go to state 88
    _minus            shift, and go to state 89
    _break            shift, and go to state 90
    _for              shift, and go to state 91
    _if               shift, and go to state 92
    _newarray         shift, and go to state 93
    _null             shift, and go to state 47
    _println          shift, and go to state 94
    _readln           shift, and go to state 95
    _return           shift, and go to state 96
    _this             shift, and go to state 97
    _while            shift, and go to state 98
    _leftparen        shift, and go to state 99
    _leftbrace        shift, and go to state 76
    _intconstant      shift, and go to state 48
    _doubleconstant   shift, and go to state 49
    _stringconstant   shift, and go to state 50
    _booleanconstant  shift, and go to state 51
    _id               shift, and go to state 100

    $default  reduce using rule 54 (EXPRO)

    STMTBLOCK   go to state 101
    STMT        go to state 201
    EXPRO       go to state 104
    IFSTMT      go to state 105
    WHILESTMT   go to state 106
    FORSTMT     go to state 107
    BREAKSTMT   go to state 108
    RETURNSTMT  go to state 109
    PRINTSTMT   go to state 110
    EXPR        go to state 111
    LVALUE      go to state 112
    CALL        go to state 113
    CONSTANT    go to state 114


State 201

   59 FORSTMT: _for _leftparen EXPRO _semicolon EXPR _semicolon EXPRO _rightparen STMT .

    $default  reduce using rule 59 (FORSTMT)
