Terminals unused in grammar

    _unaryminus
    _new


Rules useless in parser due to conflicts

   64 FORSTMT: _for _leftparen EXPRO _semicolon EXPR _semicolon EXPRO _rightparen STMTBLOCK


State 33 conflicts: 1 reduce/reduce
State 42 conflicts: 1 shift/reduce
State 44 conflicts: 1 reduce/reduce
State 84 conflicts: 1 shift/reduce
State 96 conflicts: 1 reduce/reduce
State 97 conflicts: 1 reduce/reduce
State 99 conflicts: 1 shift/reduce
State 128 conflicts: 1 shift/reduce
State 197 conflicts: 1 shift/reduce
State 206 conflicts: 20 shift/reduce, 2 reduce/reduce
State 207 conflicts: 23 reduce/reduce
State 209 conflicts: 2 shift/reduce, 1 reduce/reduce


Grammar

    0 $accept: START $end

    1 START: PROGRAM

    2 PROGRAM: DECLP

    3 DECLP: DECL DECLP
    4      | DECL

    5 DECL: VARIABLEDECL
    6     | FUNCTIONDECL
    7     | CLASSDECL
    8     | INTERFACEDECL

    9 VARIABLEDECL: VARIABLE _semicolon
   10             | VARIABLE _assignop CONSTANT
   11             | VARIABLE _assignop CONSTANT _semicolon

   12 VARIABLE: TYPE _id
   13         | _id _assignop CALL

   14 TYPE: _int
   15     | _double
   16     | _boolean
   17     | _string
   18     | TYPE _leftbracket _rightbracket
   19     | _id

   20 FUNCTIONDECL: TYPE _id _leftparen FORMALS _rightparen STMTBLOCK
   21             | _void _id _leftparen FORMALS _rightparen STMTBLOCK

   22 FORMALS: VARIABLEPC
   23        | %empty

   24 VARIABLEPC: _comma VARIABLE VARIABLEPC
   25           | VARIABLE VARIABLEPC
   26           | %empty

   27 CLASSDECL: _class _id CLASSDECLO _leftbrace FIELDM _rightbrace

   28 CLASSDECLO: _extends _id
   29           | _implements IDPC
   30           | _extends _id _implements IDPC
   31           | %empty

   32 IDPC: _id _comma IDPC
   33     | _id

   34 FIELDM: FIELD FIELDM
   35       | %empty

   36 FIELD: VARIABLEDECL
   37      | FUNCTIONDECL

   38 INTERFACEDECL: _interface _id _leftbrace PROTOTYPEM _rightbrace

   39 PROTOTYPEM: PROTOTYPE PROTOTYPEM
   40           | %empty

   41 PROTOTYPE: TYPE _id _leftparen FORMALS _rightparen _semicolon
   42          | _void _id _leftparen FORMALS _rightparen _semicolon

   43 STMTBLOCK: _leftbrace VARIABLEDECLM STMTM _rightbrace

   44 VARIABLEDECLM: VARIABLEDECL VARIABLEDECLM
   45              | %empty

   46 STMTM: STMT STMTM
   47      | %empty

   48 STMT: EXPRO _semicolon
   49     | IFSTMT
   50     | WHILESTMT
   51     | FORSTMT
   52     | BREAKSTMT
   53     | RETURNSTMT
   54     | PRINTSTMT
   55     | STMTBLOCK

   56 EXPRO: EXPR
   57      | %empty

   58 IFSTMT: _if _leftparen EXPR _rightparen STMT ELSESTMTO

   59 ELSESTMTO: _else STMT
   60          | %empty

   61 WHILESTMT: _while _leftparen EXPR _rightparen STMT

   62 FORSTMT: _for _leftparen EXPRO _semicolon EXPR _semicolon EXPRO _rightparen _leftbrace STMTM _rightbrace
   63        | _for _leftparen EXPRO _semicolon EXPR _semicolon EXPRO _rightparen STMT
   64        | _for _leftparen EXPRO _semicolon EXPR _semicolon EXPRO _rightparen STMTBLOCK

   65 BREAKSTMT: _break _semicolon

   66 RETURNSTMT: _return EXPRO _semicolon

   67 PRINTSTMT: _println _leftparen EXPRPC _rightparen _semicolon

   68 EXPRPC: EXPR _comma EXPRPC
   69       | EXPR

   70 EXPR: LVALUE _assignop EXPR
   71     | CONSTANT
   72     | LVALUE
   73     | _this
   74     | CALL
   75     | _leftparen EXPR _rightparen
   76     | EXPR _plus EXPR
   77     | EXPR _minus EXPR
   78     | EXPR _multiplication EXPR
   79     | EXPR _division EXPR
   80     | EXPR _mod EXPR
   81     | _minus EXPR
   82     | EXPR _less EXPR
   83     | EXPR _lessequal EXPR
   84     | EXPR _greater EXPR
   85     | EXPR _greaterequal EXPR
   86     | EXPR _equal EXPR
   87     | EXPR _notequal EXPR
   88     | EXPR _and EXPR
   89     | EXPR _or EXPR
   90     | _not EXPR
   91     | _readln _leftparen _rightparen
   92     | _newarray _leftparen _intconstant _comma TYPE _rightparen

   93 LVALUE: _id
   94       | LVALUE _leftbracket EXPR _rightbracket
   95       | LVALUE _period _id

   96 CALL: _id _leftparen ACTUALS _rightparen
   97     | _id _period _id _leftparen ACTUALS _rightparen

   98 ACTUALS: EXPRPC
   99        | %empty

  100 CONSTANT: _intconstant
  101         | _doubleconstant
  102         | _stringconstant
  103         | _booleanconstant
  104         | _exponent
  105         | _null


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    _leftbracket (258) 18 94
    _period (259) 95 97
    _not (260) 90
    _unaryminus (261)
    _plus (262) 76
    _minus (263) 77 81
    _multiplication (264) 78
    _division (265) 79
    _mod (266) 80
    _less (267) 82
    _lessequal (268) 83
    _greater (269) 84
    _greaterequal (270) 85
    _equal (271) 86
    _notequal (272) 87
    _and (273) 88
    _or (274) 89
    _assignop (275) 10 11 13 70
    _boolean (276) 16
    _break (277) 65
    _class (278) 27
    _double (279) 15
    _else (280) 59
    _extends (281) 28 30
    _for (282) 62 63 64
    _if (283) 58
    _implements (284) 29 30
    _int (285) 14
    _interface (286) 38
    _new (287)
    _newarray (288) 92
    _null (289) 105
    _println (290) 67
    _readln (291) 91
    _return (292) 66
    _string (293) 17
    _this (294) 73
    _void (295) 21 42
    _while (296) 61
    _semicolon (297) 9 11 41 42 48 62 63 64 65 66 67
    _comma (298) 24 32 68 92
    _leftparen (299) 20 21 41 42 58 61 62 63 64 67 75 91 92 96 97
    _rightparen (300) 20 21 41 42 58 61 62 63 64 67 75 91 92 96 97
    _rightbracket (301) 18 94
    _leftbrace (302) 27 38 43 62
    _rightbrace (303) 27 38 43 62
    _intconstant (304) 92 100
    _doubleconstant (305) 101
    _stringconstant (306) 102
    _booleanconstant (307) 103
    _id (308) 12 13 19 20 21 27 28 30 32 33 38 41 42 93 95 96 97
    _exponent (309) 104


Nonterminals, with rules where they appear

    $accept (55)
        on left: 0
    START (56)
        on left: 1
        on right: 0
    PROGRAM (57)
        on left: 2
        on right: 1
    DECLP (58)
        on left: 3 4
        on right: 2 3
    DECL (59)
        on left: 5 6 7 8
        on right: 3 4
    VARIABLEDECL (60)
        on left: 9 10 11
        on right: 5 36 44
    VARIABLE (61)
        on left: 12 13
        on right: 9 10 11 24 25
    TYPE (62)
        on left: 14 15 16 17 18 19
        on right: 12 18 20 41 92
    FUNCTIONDECL (63)
        on left: 20 21
        on right: 6 37
    FORMALS (64)
        on left: 22 23
        on right: 20 21 41 42
    VARIABLEPC (65)
        on left: 24 25 26
        on right: 22 24 25
    CLASSDECL (66)
        on left: 27
        on right: 7
    CLASSDECLO (67)
        on left: 28 29 30 31
        on right: 27
    IDPC (68)
        on left: 32 33
        on right: 29 30 32
    FIELDM (69)
        on left: 34 35
        on right: 27 34
    FIELD (70)
        on left: 36 37
        on right: 34
    INTERFACEDECL (71)
        on left: 38
        on right: 8
    PROTOTYPEM (72)
        on left: 39 40
        on right: 38 39
    PROTOTYPE (73)
        on left: 41 42
        on right: 39
    STMTBLOCK (74)
        on left: 43
        on right: 20 21 55 64
    VARIABLEDECLM (75)
        on left: 44 45
        on right: 43 44
    STMTM (76)
        on left: 46 47
        on right: 43 46 62
    STMT (77)
        on left: 48 49 50 51 52 53 54 55
        on right: 46 58 59 61 63
    EXPRO (78)
        on left: 56 57
        on right: 48 62 63 64 66
    IFSTMT (79)
        on left: 58
        on right: 49
    ELSESTMTO (80)
        on left: 59 60
        on right: 58
    WHILESTMT (81)
        on left: 61
        on right: 50
    FORSTMT (82)
        on left: 62 63 64
        on right: 51
    BREAKSTMT (83)
        on left: 65
        on right: 52
    RETURNSTMT (84)
        on left: 66
        on right: 53
    PRINTSTMT (85)
        on left: 67
        on right: 54
    EXPRPC (86)
        on left: 68 69
        on right: 67 68 98
    EXPR (87)
        on left: 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92
        on right: 56 58 61 62 63 64 68 69 70 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 94
    LVALUE (88)
        on left: 93 94 95
        on right: 70 72 94 95
    CALL (89)
        on left: 96 97
        on right: 13 74
    ACTUALS (90)
        on left: 98 99
        on right: 96 97
    CONSTANT (91)
        on left: 100 101 102 103 104 105
        on right: 10 11 71


State 0

    0 $accept: . START $end

    _boolean    shift, and go to state 1
    _class      shift, and go to state 2
    _double     shift, and go to state 3
    _int        shift, and go to state 4
    _interface  shift, and go to state 5
    _string     shift, and go to state 6
    _void       shift, and go to state 7
    _id         shift, and go to state 8

    START          go to state 9
    PROGRAM        go to state 10
    DECLP          go to state 11
    DECL           go to state 12
    VARIABLEDECL   go to state 13
    VARIABLE       go to state 14
    TYPE           go to state 15
    FUNCTIONDECL   go to state 16
    CLASSDECL      go to state 17
    INTERFACEDECL  go to state 18


State 1

   16 TYPE: _boolean .

    $default  reduce using rule 16 (TYPE)


State 2

   27 CLASSDECL: _class . _id CLASSDECLO _leftbrace FIELDM _rightbrace

    _id  shift, and go to state 19


State 3

   15 TYPE: _double .

    $default  reduce using rule 15 (TYPE)


State 4

   14 TYPE: _int .

    $default  reduce using rule 14 (TYPE)


State 5

   38 INTERFACEDECL: _interface . _id _leftbrace PROTOTYPEM _rightbrace

    _id  shift, and go to state 20


State 6

   17 TYPE: _string .

    $default  reduce using rule 17 (TYPE)


State 7

   21 FUNCTIONDECL: _void . _id _leftparen FORMALS _rightparen STMTBLOCK

    _id  shift, and go to state 21


State 8

   13 VARIABLE: _id . _assignop CALL
   19 TYPE: _id .

    _assignop  shift, and go to state 22

    $default  reduce using rule 19 (TYPE)


State 9

    0 $accept: START . $end

    $end  shift, and go to state 23


State 10

    1 START: PROGRAM .

    $default  reduce using rule 1 (START)


State 11

    2 PROGRAM: DECLP .

    $default  reduce using rule 2 (PROGRAM)


State 12

    3 DECLP: DECL . DECLP
    4      | DECL .

    _boolean    shift, and go to state 1
    _class      shift, and go to state 2
    _double     shift, and go to state 3
    _int        shift, and go to state 4
    _interface  shift, and go to state 5
    _string     shift, and go to state 6
    _void       shift, and go to state 7
    _id         shift, and go to state 8

    $default  reduce using rule 4 (DECLP)

    DECLP          go to state 24
    DECL           go to state 12
    VARIABLEDECL   go to state 13
    VARIABLE       go to state 14
    TYPE           go to state 15
    FUNCTIONDECL   go to state 16
    CLASSDECL      go to state 17
    INTERFACEDECL  go to state 18


State 13

    5 DECL: VARIABLEDECL .

    $default  reduce using rule 5 (DECL)


State 14

    9 VARIABLEDECL: VARIABLE . _semicolon
   10             | VARIABLE . _assignop CONSTANT
   11             | VARIABLE . _assignop CONSTANT _semicolon

    _assignop   shift, and go to state 25
    _semicolon  shift, and go to state 26


State 15

   12 VARIABLE: TYPE . _id
   18 TYPE: TYPE . _leftbracket _rightbracket
   20 FUNCTIONDECL: TYPE . _id _leftparen FORMALS _rightparen STMTBLOCK

    _leftbracket  shift, and go to state 27
    _id           shift, and go to state 28


State 16

    6 DECL: FUNCTIONDECL .

    $default  reduce using rule 6 (DECL)


State 17

    7 DECL: CLASSDECL .

    $default  reduce using rule 7 (DECL)


State 18

    8 DECL: INTERFACEDECL .

    $default  reduce using rule 8 (DECL)


State 19

   27 CLASSDECL: _class _id . CLASSDECLO _leftbrace FIELDM _rightbrace

    _extends     shift, and go to state 29
    _implements  shift, and go to state 30

    $default  reduce using rule 31 (CLASSDECLO)

    CLASSDECLO  go to state 31


State 20

   38 INTERFACEDECL: _interface _id . _leftbrace PROTOTYPEM _rightbrace

    _leftbrace  shift, and go to state 32


State 21

   21 FUNCTIONDECL: _void _id . _leftparen FORMALS _rightparen STMTBLOCK

    _leftparen  shift, and go to state 33


State 22

   13 VARIABLE: _id _assignop . CALL

    _id  shift, and go to state 34

    CALL  go to state 35


State 23

    0 $accept: START $end .

    $default  accept


State 24

    3 DECLP: DECL DECLP .

    $default  reduce using rule 3 (DECLP)


State 25

   10 VARIABLEDECL: VARIABLE _assignop . CONSTANT
   11             | VARIABLE _assignop . CONSTANT _semicolon

    _null             shift, and go to state 36
    _intconstant      shift, and go to state 37
    _doubleconstant   shift, and go to state 38
    _stringconstant   shift, and go to state 39
    _booleanconstant  shift, and go to state 40
    _exponent         shift, and go to state 41

    CONSTANT  go to state 42


State 26

    9 VARIABLEDECL: VARIABLE _semicolon .

    $default  reduce using rule 9 (VARIABLEDECL)


State 27

   18 TYPE: TYPE _leftbracket . _rightbracket

    _rightbracket  shift, and go to state 43


State 28

   12 VARIABLE: TYPE _id .
   20 FUNCTIONDECL: TYPE _id . _leftparen FORMALS _rightparen STMTBLOCK

    _leftparen  shift, and go to state 44

    $default  reduce using rule 12 (VARIABLE)


State 29

   28 CLASSDECLO: _extends . _id
   30           | _extends . _id _implements IDPC

    _id  shift, and go to state 45


State 30

   29 CLASSDECLO: _implements . IDPC

    _id  shift, and go to state 46

    IDPC  go to state 47


State 31

   27 CLASSDECL: _class _id CLASSDECLO . _leftbrace FIELDM _rightbrace

    _leftbrace  shift, and go to state 48


State 32

   38 INTERFACEDECL: _interface _id _leftbrace . PROTOTYPEM _rightbrace

    _boolean  shift, and go to state 1
    _double   shift, and go to state 3
    _int      shift, and go to state 4
    _string   shift, and go to state 6
    _void     shift, and go to state 49
    _id       shift, and go to state 50

    $default  reduce using rule 40 (PROTOTYPEM)

    TYPE        go to state 51
    PROTOTYPEM  go to state 52
    PROTOTYPE   go to state 53


State 33

   21 FUNCTIONDECL: _void _id _leftparen . FORMALS _rightparen STMTBLOCK

    _boolean  shift, and go to state 1
    _double   shift, and go to state 3
    _int      shift, and go to state 4
    _string   shift, and go to state 6
    _comma    shift, and go to state 54
    _id       shift, and go to state 8

    _rightparen  reduce using rule 23 (FORMALS)
    _rightparen  [reduce using rule 26 (VARIABLEPC)]
    $default     reduce using rule 23 (FORMALS)

    VARIABLE    go to state 55
    TYPE        go to state 56
    FORMALS     go to state 57
    VARIABLEPC  go to state 58


State 34

   96 CALL: _id . _leftparen ACTUALS _rightparen
   97     | _id . _period _id _leftparen ACTUALS _rightparen

    _period     shift, and go to state 59
    _leftparen  shift, and go to state 60


State 35

   13 VARIABLE: _id _assignop CALL .

    $default  reduce using rule 13 (VARIABLE)


State 36

  105 CONSTANT: _null .

    $default  reduce using rule 105 (CONSTANT)


State 37

  100 CONSTANT: _intconstant .

    $default  reduce using rule 100 (CONSTANT)


State 38

  101 CONSTANT: _doubleconstant .

    $default  reduce using rule 101 (CONSTANT)


State 39

  102 CONSTANT: _stringconstant .

    $default  reduce using rule 102 (CONSTANT)


State 40

  103 CONSTANT: _booleanconstant .

    $default  reduce using rule 103 (CONSTANT)


State 41

  104 CONSTANT: _exponent .

    $default  reduce using rule 104 (CONSTANT)


State 42

   10 VARIABLEDECL: VARIABLE _assignop CONSTANT .
   11             | VARIABLE _assignop CONSTANT . _semicolon

    _semicolon  shift, and go to state 61

    _semicolon  [reduce using rule 10 (VARIABLEDECL)]
    $default    reduce using rule 10 (VARIABLEDECL)


State 43

   18 TYPE: TYPE _leftbracket _rightbracket .

    $default  reduce using rule 18 (TYPE)


State 44

   20 FUNCTIONDECL: TYPE _id _leftparen . FORMALS _rightparen STMTBLOCK

    _boolean  shift, and go to state 1
    _double   shift, and go to state 3
    _int      shift, and go to state 4
    _string   shift, and go to state 6
    _comma    shift, and go to state 54
    _id       shift, and go to state 8

    _rightparen  reduce using rule 23 (FORMALS)
    _rightparen  [reduce using rule 26 (VARIABLEPC)]
    $default     reduce using rule 23 (FORMALS)

    VARIABLE    go to state 55
    TYPE        go to state 56
    FORMALS     go to state 62
    VARIABLEPC  go to state 58


State 45

   28 CLASSDECLO: _extends _id .
   30           | _extends _id . _implements IDPC

    _implements  shift, and go to state 63

    $default  reduce using rule 28 (CLASSDECLO)


State 46

   32 IDPC: _id . _comma IDPC
   33     | _id .

    _comma  shift, and go to state 64

    $default  reduce using rule 33 (IDPC)


State 47

   29 CLASSDECLO: _implements IDPC .

    $default  reduce using rule 29 (CLASSDECLO)


State 48

   27 CLASSDECL: _class _id CLASSDECLO _leftbrace . FIELDM _rightbrace

    _boolean  shift, and go to state 1
    _double   shift, and go to state 3
    _int      shift, and go to state 4
    _string   shift, and go to state 6
    _void     shift, and go to state 7
    _id       shift, and go to state 8

    $default  reduce using rule 35 (FIELDM)

    VARIABLEDECL  go to state 65
    VARIABLE      go to state 14
    TYPE          go to state 15
    FUNCTIONDECL  go to state 66
    FIELDM        go to state 67
    FIELD         go to state 68


State 49

   42 PROTOTYPE: _void . _id _leftparen FORMALS _rightparen _semicolon

    _id  shift, and go to state 69


State 50

   19 TYPE: _id .

    $default  reduce using rule 19 (TYPE)


State 51

   18 TYPE: TYPE . _leftbracket _rightbracket
   41 PROTOTYPE: TYPE . _id _leftparen FORMALS _rightparen _semicolon

    _leftbracket  shift, and go to state 27
    _id           shift, and go to state 70


State 52

   38 INTERFACEDECL: _interface _id _leftbrace PROTOTYPEM . _rightbrace

    _rightbrace  shift, and go to state 71


State 53

   39 PROTOTYPEM: PROTOTYPE . PROTOTYPEM

    _boolean  shift, and go to state 1
    _double   shift, and go to state 3
    _int      shift, and go to state 4
    _string   shift, and go to state 6
    _void     shift, and go to state 49
    _id       shift, and go to state 50

    $default  reduce using rule 40 (PROTOTYPEM)

    TYPE        go to state 51
    PROTOTYPEM  go to state 72
    PROTOTYPE   go to state 53


State 54

   24 VARIABLEPC: _comma . VARIABLE VARIABLEPC

    _boolean  shift, and go to state 1
    _double   shift, and go to state 3
    _int      shift, and go to state 4
    _string   shift, and go to state 6
    _id       shift, and go to state 8

    VARIABLE  go to state 73
    TYPE      go to state 56


State 55

   25 VARIABLEPC: VARIABLE . VARIABLEPC

    _boolean  shift, and go to state 1
    _double   shift, and go to state 3
    _int      shift, and go to state 4
    _string   shift, and go to state 6
    _comma    shift, and go to state 54
    _id       shift, and go to state 8

    $default  reduce using rule 26 (VARIABLEPC)

    VARIABLE    go to state 55
    TYPE        go to state 56
    VARIABLEPC  go to state 74


State 56

   12 VARIABLE: TYPE . _id
   18 TYPE: TYPE . _leftbracket _rightbracket

    _leftbracket  shift, and go to state 27
    _id           shift, and go to state 75


State 57

   21 FUNCTIONDECL: _void _id _leftparen FORMALS . _rightparen STMTBLOCK

    _rightparen  shift, and go to state 76


State 58

   22 FORMALS: VARIABLEPC .

    $default  reduce using rule 22 (FORMALS)


State 59

   97 CALL: _id _period . _id _leftparen ACTUALS _rightparen

    _id  shift, and go to state 77


State 60

   96 CALL: _id _leftparen . ACTUALS _rightparen

    _not              shift, and go to state 78
    _minus            shift, and go to state 79
    _newarray         shift, and go to state 80
    _null             shift, and go to state 36
    _readln           shift, and go to state 81
    _this             shift, and go to state 82
    _leftparen        shift, and go to state 83
    _intconstant      shift, and go to state 37
    _doubleconstant   shift, and go to state 38
    _stringconstant   shift, and go to state 39
    _booleanconstant  shift, and go to state 40
    _id               shift, and go to state 84
    _exponent         shift, and go to state 41

    $default  reduce using rule 99 (ACTUALS)

    EXPRPC    go to state 85
    EXPR      go to state 86
    LVALUE    go to state 87
    CALL      go to state 88
    ACTUALS   go to state 89
    CONSTANT  go to state 90


State 61

   11 VARIABLEDECL: VARIABLE _assignop CONSTANT _semicolon .

    $default  reduce using rule 11 (VARIABLEDECL)


State 62

   20 FUNCTIONDECL: TYPE _id _leftparen FORMALS . _rightparen STMTBLOCK

    _rightparen  shift, and go to state 91


State 63

   30 CLASSDECLO: _extends _id _implements . IDPC

    _id  shift, and go to state 46

    IDPC  go to state 92


State 64

   32 IDPC: _id _comma . IDPC

    _id  shift, and go to state 46

    IDPC  go to state 93


State 65

   36 FIELD: VARIABLEDECL .

    $default  reduce using rule 36 (FIELD)


State 66

   37 FIELD: FUNCTIONDECL .

    $default  reduce using rule 37 (FIELD)


State 67

   27 CLASSDECL: _class _id CLASSDECLO _leftbrace FIELDM . _rightbrace

    _rightbrace  shift, and go to state 94


State 68

   34 FIELDM: FIELD . FIELDM

    _boolean  shift, and go to state 1
    _double   shift, and go to state 3
    _int      shift, and go to state 4
    _string   shift, and go to state 6
    _void     shift, and go to state 7
    _id       shift, and go to state 8

    $default  reduce using rule 35 (FIELDM)

    VARIABLEDECL  go to state 65
    VARIABLE      go to state 14
    TYPE          go to state 15
    FUNCTIONDECL  go to state 66
    FIELDM        go to state 95
    FIELD         go to state 68


State 69

   42 PROTOTYPE: _void _id . _leftparen FORMALS _rightparen _semicolon

    _leftparen  shift, and go to state 96


State 70

   41 PROTOTYPE: TYPE _id . _leftparen FORMALS _rightparen _semicolon

    _leftparen  shift, and go to state 97


State 71

   38 INTERFACEDECL: _interface _id _leftbrace PROTOTYPEM _rightbrace .

    $default  reduce using rule 38 (INTERFACEDECL)


State 72

   39 PROTOTYPEM: PROTOTYPE PROTOTYPEM .

    $default  reduce using rule 39 (PROTOTYPEM)


State 73

   24 VARIABLEPC: _comma VARIABLE . VARIABLEPC

    _boolean  shift, and go to state 1
    _double   shift, and go to state 3
    _int      shift, and go to state 4
    _string   shift, and go to state 6
    _comma    shift, and go to state 54
    _id       shift, and go to state 8

    $default  reduce using rule 26 (VARIABLEPC)

    VARIABLE    go to state 55
    TYPE        go to state 56
    VARIABLEPC  go to state 98


State 74

   25 VARIABLEPC: VARIABLE VARIABLEPC .

    $default  reduce using rule 25 (VARIABLEPC)


State 75

   12 VARIABLE: TYPE _id .

    $default  reduce using rule 12 (VARIABLE)


State 76

   21 FUNCTIONDECL: _void _id _leftparen FORMALS _rightparen . STMTBLOCK

    _leftbrace  shift, and go to state 99

    STMTBLOCK  go to state 100


State 77

   97 CALL: _id _period _id . _leftparen ACTUALS _rightparen

    _leftparen  shift, and go to state 101


State 78

   90 EXPR: _not . EXPR

    _not              shift, and go to state 78
    _minus            shift, and go to state 79
    _newarray         shift, and go to state 80
    _null             shift, and go to state 36
    _readln           shift, and go to state 81
    _this             shift, and go to state 82
    _leftparen        shift, and go to state 83
    _intconstant      shift, and go to state 37
    _doubleconstant   shift, and go to state 38
    _stringconstant   shift, and go to state 39
    _booleanconstant  shift, and go to state 40
    _id               shift, and go to state 84
    _exponent         shift, and go to state 41

    EXPR      go to state 102
    LVALUE    go to state 87
    CALL      go to state 88
    CONSTANT  go to state 90


State 79

   81 EXPR: _minus . EXPR

    _not              shift, and go to state 78
    _minus            shift, and go to state 79
    _newarray         shift, and go to state 80
    _null             shift, and go to state 36
    _readln           shift, and go to state 81
    _this             shift, and go to state 82
    _leftparen        shift, and go to state 83
    _intconstant      shift, and go to state 37
    _doubleconstant   shift, and go to state 38
    _stringconstant   shift, and go to state 39
    _booleanconstant  shift, and go to state 40
    _id               shift, and go to state 84
    _exponent         shift, and go to state 41

    EXPR      go to state 103
    LVALUE    go to state 87
    CALL      go to state 88
    CONSTANT  go to state 90


State 80

   92 EXPR: _newarray . _leftparen _intconstant _comma TYPE _rightparen

    _leftparen  shift, and go to state 104


State 81

   91 EXPR: _readln . _leftparen _rightparen

    _leftparen  shift, and go to state 105


State 82

   73 EXPR: _this .

    $default  reduce using rule 73 (EXPR)


State 83

   75 EXPR: _leftparen . EXPR _rightparen

    _not              shift, and go to state 78
    _minus            shift, and go to state 79
    _newarray         shift, and go to state 80
    _null             shift, and go to state 36
    _readln           shift, and go to state 81
    _this             shift, and go to state 82
    _leftparen        shift, and go to state 83
    _intconstant      shift, and go to state 37
    _doubleconstant   shift, and go to state 38
    _stringconstant   shift, and go to state 39
    _booleanconstant  shift, and go to state 40
    _id               shift, and go to state 84
    _exponent         shift, and go to state 41

    EXPR      go to state 106
    LVALUE    go to state 87
    CALL      go to state 88
    CONSTANT  go to state 90


State 84

   93 LVALUE: _id .
   96 CALL: _id . _leftparen ACTUALS _rightparen
   97     | _id . _period _id _leftparen ACTUALS _rightparen

    _period     shift, and go to state 59
    _leftparen  shift, and go to state 60

    _period   [reduce using rule 93 (LVALUE)]
    $default  reduce using rule 93 (LVALUE)


State 85

   98 ACTUALS: EXPRPC .

    $default  reduce using rule 98 (ACTUALS)


State 86

   68 EXPRPC: EXPR . _comma EXPRPC
   69       | EXPR .
   76 EXPR: EXPR . _plus EXPR
   77     | EXPR . _minus EXPR
   78     | EXPR . _multiplication EXPR
   79     | EXPR . _division EXPR
   80     | EXPR . _mod EXPR
   82     | EXPR . _less EXPR
   83     | EXPR . _lessequal EXPR
   84     | EXPR . _greater EXPR
   85     | EXPR . _greaterequal EXPR
   86     | EXPR . _equal EXPR
   87     | EXPR . _notequal EXPR
   88     | EXPR . _and EXPR
   89     | EXPR . _or EXPR

    _plus            shift, and go to state 107
    _minus           shift, and go to state 108
    _multiplication  shift, and go to state 109
    _division        shift, and go to state 110
    _mod             shift, and go to state 111
    _less            shift, and go to state 112
    _lessequal       shift, and go to state 113
    _greater         shift, and go to state 114
    _greaterequal    shift, and go to state 115
    _equal           shift, and go to state 116
    _notequal        shift, and go to state 117
    _and             shift, and go to state 118
    _or              shift, and go to state 119
    _comma           shift, and go to state 120

    $default  reduce using rule 69 (EXPRPC)


State 87

   70 EXPR: LVALUE . _assignop EXPR
   72     | LVALUE .
   94 LVALUE: LVALUE . _leftbracket EXPR _rightbracket
   95       | LVALUE . _period _id

    _leftbracket  shift, and go to state 121
    _period       shift, and go to state 122
    _assignop     shift, and go to state 123

    $default  reduce using rule 72 (EXPR)


State 88

   74 EXPR: CALL .

    $default  reduce using rule 74 (EXPR)


State 89

   96 CALL: _id _leftparen ACTUALS . _rightparen

    _rightparen  shift, and go to state 124


State 90

   71 EXPR: CONSTANT .

    $default  reduce using rule 71 (EXPR)


State 91

   20 FUNCTIONDECL: TYPE _id _leftparen FORMALS _rightparen . STMTBLOCK

    _leftbrace  shift, and go to state 99

    STMTBLOCK  go to state 125


State 92

   30 CLASSDECLO: _extends _id _implements IDPC .

    $default  reduce using rule 30 (CLASSDECLO)


State 93

   32 IDPC: _id _comma IDPC .

    $default  reduce using rule 32 (IDPC)


State 94

   27 CLASSDECL: _class _id CLASSDECLO _leftbrace FIELDM _rightbrace .

    $default  reduce using rule 27 (CLASSDECL)


State 95

   34 FIELDM: FIELD FIELDM .

    $default  reduce using rule 34 (FIELDM)


State 96

   42 PROTOTYPE: _void _id _leftparen . FORMALS _rightparen _semicolon

    _boolean  shift, and go to state 1
    _double   shift, and go to state 3
    _int      shift, and go to state 4
    _string   shift, and go to state 6
    _comma    shift, and go to state 54
    _id       shift, and go to state 8

    _rightparen  reduce using rule 23 (FORMALS)
    _rightparen  [reduce using rule 26 (VARIABLEPC)]
    $default     reduce using rule 23 (FORMALS)

    VARIABLE    go to state 55
    TYPE        go to state 56
    FORMALS     go to state 126
    VARIABLEPC  go to state 58


State 97

   41 PROTOTYPE: TYPE _id _leftparen . FORMALS _rightparen _semicolon

    _boolean  shift, and go to state 1
    _double   shift, and go to state 3
    _int      shift, and go to state 4
    _string   shift, and go to state 6
    _comma    shift, and go to state 54
    _id       shift, and go to state 8

    _rightparen  reduce using rule 23 (FORMALS)
    _rightparen  [reduce using rule 26 (VARIABLEPC)]
    $default     reduce using rule 23 (FORMALS)

    VARIABLE    go to state 55
    TYPE        go to state 56
    FORMALS     go to state 127
    VARIABLEPC  go to state 58


State 98

   24 VARIABLEPC: _comma VARIABLE VARIABLEPC .

    $default  reduce using rule 24 (VARIABLEPC)


State 99

   43 STMTBLOCK: _leftbrace . VARIABLEDECLM STMTM _rightbrace

    _boolean  shift, and go to state 1
    _double   shift, and go to state 3
    _int      shift, and go to state 4
    _string   shift, and go to state 6
    _id       shift, and go to state 8

    _id       [reduce using rule 45 (VARIABLEDECLM)]
    $default  reduce using rule 45 (VARIABLEDECLM)

    VARIABLEDECL   go to state 128
    VARIABLE       go to state 14
    TYPE           go to state 56
    VARIABLEDECLM  go to state 129


State 100

   21 FUNCTIONDECL: _void _id _leftparen FORMALS _rightparen STMTBLOCK .

    $default  reduce using rule 21 (FUNCTIONDECL)


State 101

   97 CALL: _id _period _id _leftparen . ACTUALS _rightparen

    _not              shift, and go to state 78
    _minus            shift, and go to state 79
    _newarray         shift, and go to state 80
    _null             shift, and go to state 36
    _readln           shift, and go to state 81
    _this             shift, and go to state 82
    _leftparen        shift, and go to state 83
    _intconstant      shift, and go to state 37
    _doubleconstant   shift, and go to state 38
    _stringconstant   shift, and go to state 39
    _booleanconstant  shift, and go to state 40
    _id               shift, and go to state 84
    _exponent         shift, and go to state 41

    $default  reduce using rule 99 (ACTUALS)

    EXPRPC    go to state 85
    EXPR      go to state 86
    LVALUE    go to state 87
    CALL      go to state 88
    ACTUALS   go to state 130
    CONSTANT  go to state 90


State 102

   76 EXPR: EXPR . _plus EXPR
   77     | EXPR . _minus EXPR
   78     | EXPR . _multiplication EXPR
   79     | EXPR . _division EXPR
   80     | EXPR . _mod EXPR
   82     | EXPR . _less EXPR
   83     | EXPR . _lessequal EXPR
   84     | EXPR . _greater EXPR
   85     | EXPR . _greaterequal EXPR
   86     | EXPR . _equal EXPR
   87     | EXPR . _notequal EXPR
   88     | EXPR . _and EXPR
   89     | EXPR . _or EXPR
   90     | _not EXPR .

    _plus            shift, and go to state 107
    _minus           shift, and go to state 108
    _multiplication  shift, and go to state 109
    _division        shift, and go to state 110
    _mod             shift, and go to state 111
    _less            shift, and go to state 112
    _lessequal       shift, and go to state 113
    _greater         shift, and go to state 114
    _greaterequal    shift, and go to state 115
    _equal           shift, and go to state 116
    _notequal        shift, and go to state 117
    _and             shift, and go to state 118
    _or              shift, and go to state 119

    $default  reduce using rule 90 (EXPR)


State 103

   76 EXPR: EXPR . _plus EXPR
   77     | EXPR . _minus EXPR
   78     | EXPR . _multiplication EXPR
   79     | EXPR . _division EXPR
   80     | EXPR . _mod EXPR
   81     | _minus EXPR .
   82     | EXPR . _less EXPR
   83     | EXPR . _lessequal EXPR
   84     | EXPR . _greater EXPR
   85     | EXPR . _greaterequal EXPR
   86     | EXPR . _equal EXPR
   87     | EXPR . _notequal EXPR
   88     | EXPR . _and EXPR
   89     | EXPR . _or EXPR

    _multiplication  shift, and go to state 109
    _division        shift, and go to state 110
    _mod             shift, and go to state 111
    _less            shift, and go to state 112
    _lessequal       shift, and go to state 113
    _greater         shift, and go to state 114
    _greaterequal    shift, and go to state 115
    _equal           shift, and go to state 116
    _notequal        shift, and go to state 117
    _and             shift, and go to state 118
    _or              shift, and go to state 119

    $default  reduce using rule 81 (EXPR)


State 104

   92 EXPR: _newarray _leftparen . _intconstant _comma TYPE _rightparen

    _intconstant  shift, and go to state 131


State 105

   91 EXPR: _readln _leftparen . _rightparen

    _rightparen  shift, and go to state 132


State 106

   75 EXPR: _leftparen EXPR . _rightparen
   76     | EXPR . _plus EXPR
   77     | EXPR . _minus EXPR
   78     | EXPR . _multiplication EXPR
   79     | EXPR . _division EXPR
   80     | EXPR . _mod EXPR
   82     | EXPR . _less EXPR
   83     | EXPR . _lessequal EXPR
   84     | EXPR . _greater EXPR
   85     | EXPR . _greaterequal EXPR
   86     | EXPR . _equal EXPR
   87     | EXPR . _notequal EXPR
   88     | EXPR . _and EXPR
   89     | EXPR . _or EXPR

    _plus            shift, and go to state 107
    _minus           shift, and go to state 108
    _multiplication  shift, and go to state 109
    _division        shift, and go to state 110
    _mod             shift, and go to state 111
    _less            shift, and go to state 112
    _lessequal       shift, and go to state 113
    _greater         shift, and go to state 114
    _greaterequal    shift, and go to state 115
    _equal           shift, and go to state 116
    _notequal        shift, and go to state 117
    _and             shift, and go to state 118
    _or              shift, and go to state 119
    _rightparen      shift, and go to state 133


State 107

   76 EXPR: EXPR _plus . EXPR

    _not              shift, and go to state 78
    _minus            shift, and go to state 79
    _newarray         shift, and go to state 80
    _null             shift, and go to state 36
    _readln           shift, and go to state 81
    _this             shift, and go to state 82
    _leftparen        shift, and go to state 83
    _intconstant      shift, and go to state 37
    _doubleconstant   shift, and go to state 38
    _stringconstant   shift, and go to state 39
    _booleanconstant  shift, and go to state 40
    _id               shift, and go to state 84
    _exponent         shift, and go to state 41

    EXPR      go to state 134
    LVALUE    go to state 87
    CALL      go to state 88
    CONSTANT  go to state 90


State 108

   77 EXPR: EXPR _minus . EXPR

    _not              shift, and go to state 78
    _minus            shift, and go to state 79
    _newarray         shift, and go to state 80
    _null             shift, and go to state 36
    _readln           shift, and go to state 81
    _this             shift, and go to state 82
    _leftparen        shift, and go to state 83
    _intconstant      shift, and go to state 37
    _doubleconstant   shift, and go to state 38
    _stringconstant   shift, and go to state 39
    _booleanconstant  shift, and go to state 40
    _id               shift, and go to state 84
    _exponent         shift, and go to state 41

    EXPR      go to state 135
    LVALUE    go to state 87
    CALL      go to state 88
    CONSTANT  go to state 90


State 109

   78 EXPR: EXPR _multiplication . EXPR

    _not              shift, and go to state 78
    _minus            shift, and go to state 79
    _newarray         shift, and go to state 80
    _null             shift, and go to state 36
    _readln           shift, and go to state 81
    _this             shift, and go to state 82
    _leftparen        shift, and go to state 83
    _intconstant      shift, and go to state 37
    _doubleconstant   shift, and go to state 38
    _stringconstant   shift, and go to state 39
    _booleanconstant  shift, and go to state 40
    _id               shift, and go to state 84
    _exponent         shift, and go to state 41

    EXPR      go to state 136
    LVALUE    go to state 87
    CALL      go to state 88
    CONSTANT  go to state 90


State 110

   79 EXPR: EXPR _division . EXPR

    _not              shift, and go to state 78
    _minus            shift, and go to state 79
    _newarray         shift, and go to state 80
    _null             shift, and go to state 36
    _readln           shift, and go to state 81
    _this             shift, and go to state 82
    _leftparen        shift, and go to state 83
    _intconstant      shift, and go to state 37
    _doubleconstant   shift, and go to state 38
    _stringconstant   shift, and go to state 39
    _booleanconstant  shift, and go to state 40
    _id               shift, and go to state 84
    _exponent         shift, and go to state 41

    EXPR      go to state 137
    LVALUE    go to state 87
    CALL      go to state 88
    CONSTANT  go to state 90


State 111

   80 EXPR: EXPR _mod . EXPR

    _not              shift, and go to state 78
    _minus            shift, and go to state 79
    _newarray         shift, and go to state 80
    _null             shift, and go to state 36
    _readln           shift, and go to state 81
    _this             shift, and go to state 82
    _leftparen        shift, and go to state 83
    _intconstant      shift, and go to state 37
    _doubleconstant   shift, and go to state 38
    _stringconstant   shift, and go to state 39
    _booleanconstant  shift, and go to state 40
    _id               shift, and go to state 84
    _exponent         shift, and go to state 41

    EXPR      go to state 138
    LVALUE    go to state 87
    CALL      go to state 88
    CONSTANT  go to state 90


State 112

   82 EXPR: EXPR _less . EXPR

    _not              shift, and go to state 78
    _minus            shift, and go to state 79
    _newarray         shift, and go to state 80
    _null             shift, and go to state 36
    _readln           shift, and go to state 81
    _this             shift, and go to state 82
    _leftparen        shift, and go to state 83
    _intconstant      shift, and go to state 37
    _doubleconstant   shift, and go to state 38
    _stringconstant   shift, and go to state 39
    _booleanconstant  shift, and go to state 40
    _id               shift, and go to state 84
    _exponent         shift, and go to state 41

    EXPR      go to state 139
    LVALUE    go to state 87
    CALL      go to state 88
    CONSTANT  go to state 90


State 113

   83 EXPR: EXPR _lessequal . EXPR

    _not              shift, and go to state 78
    _minus            shift, and go to state 79
    _newarray         shift, and go to state 80
    _null             shift, and go to state 36
    _readln           shift, and go to state 81
    _this             shift, and go to state 82
    _leftparen        shift, and go to state 83
    _intconstant      shift, and go to state 37
    _doubleconstant   shift, and go to state 38
    _stringconstant   shift, and go to state 39
    _booleanconstant  shift, and go to state 40
    _id               shift, and go to state 84
    _exponent         shift, and go to state 41

    EXPR      go to state 140
    LVALUE    go to state 87
    CALL      go to state 88
    CONSTANT  go to state 90


State 114

   84 EXPR: EXPR _greater . EXPR

    _not              shift, and go to state 78
    _minus            shift, and go to state 79
    _newarray         shift, and go to state 80
    _null             shift, and go to state 36
    _readln           shift, and go to state 81
    _this             shift, and go to state 82
    _leftparen        shift, and go to state 83
    _intconstant      shift, and go to state 37
    _doubleconstant   shift, and go to state 38
    _stringconstant   shift, and go to state 39
    _booleanconstant  shift, and go to state 40
    _id               shift, and go to state 84
    _exponent         shift, and go to state 41

    EXPR      go to state 141
    LVALUE    go to state 87
    CALL      go to state 88
    CONSTANT  go to state 90


State 115

   85 EXPR: EXPR _greaterequal . EXPR

    _not              shift, and go to state 78
    _minus            shift, and go to state 79
    _newarray         shift, and go to state 80
    _null             shift, and go to state 36
    _readln           shift, and go to state 81
    _this             shift, and go to state 82
    _leftparen        shift, and go to state 83
    _intconstant      shift, and go to state 37
    _doubleconstant   shift, and go to state 38
    _stringconstant   shift, and go to state 39
    _booleanconstant  shift, and go to state 40
    _id               shift, and go to state 84
    _exponent         shift, and go to state 41

    EXPR      go to state 142
    LVALUE    go to state 87
    CALL      go to state 88
    CONSTANT  go to state 90


State 116

   86 EXPR: EXPR _equal . EXPR

    _not              shift, and go to state 78
    _minus            shift, and go to state 79
    _newarray         shift, and go to state 80
    _null             shift, and go to state 36
    _readln           shift, and go to state 81
    _this             shift, and go to state 82
    _leftparen        shift, and go to state 83
    _intconstant      shift, and go to state 37
    _doubleconstant   shift, and go to state 38
    _stringconstant   shift, and go to state 39
    _booleanconstant  shift, and go to state 40
    _id               shift, and go to state 84
    _exponent         shift, and go to state 41

    EXPR      go to state 143
    LVALUE    go to state 87
    CALL      go to state 88
    CONSTANT  go to state 90


State 117

   87 EXPR: EXPR _notequal . EXPR

    _not              shift, and go to state 78
    _minus            shift, and go to state 79
    _newarray         shift, and go to state 80
    _null             shift, and go to state 36
    _readln           shift, and go to state 81
    _this             shift, and go to state 82
    _leftparen        shift, and go to state 83
    _intconstant      shift, and go to state 37
    _doubleconstant   shift, and go to state 38
    _stringconstant   shift, and go to state 39
    _booleanconstant  shift, and go to state 40
    _id               shift, and go to state 84
    _exponent         shift, and go to state 41

    EXPR      go to state 144
    LVALUE    go to state 87
    CALL      go to state 88
    CONSTANT  go to state 90


State 118

   88 EXPR: EXPR _and . EXPR

    _not              shift, and go to state 78
    _minus            shift, and go to state 79
    _newarray         shift, and go to state 80
    _null             shift, and go to state 36
    _readln           shift, and go to state 81
    _this             shift, and go to state 82
    _leftparen        shift, and go to state 83
    _intconstant      shift, and go to state 37
    _doubleconstant   shift, and go to state 38
    _stringconstant   shift, and go to state 39
    _booleanconstant  shift, and go to state 40
    _id               shift, and go to state 84
    _exponent         shift, and go to state 41

    EXPR      go to state 145
    LVALUE    go to state 87
    CALL      go to state 88
    CONSTANT  go to state 90


State 119

   89 EXPR: EXPR _or . EXPR

    _not              shift, and go to state 78
    _minus            shift, and go to state 79
    _newarray         shift, and go to state 80
    _null             shift, and go to state 36
    _readln           shift, and go to state 81
    _this             shift, and go to state 82
    _leftparen        shift, and go to state 83
    _intconstant      shift, and go to state 37
    _doubleconstant   shift, and go to state 38
    _stringconstant   shift, and go to state 39
    _booleanconstant  shift, and go to state 40
    _id               shift, and go to state 84
    _exponent         shift, and go to state 41

    EXPR      go to state 146
    LVALUE    go to state 87
    CALL      go to state 88
    CONSTANT  go to state 90


State 120

   68 EXPRPC: EXPR _comma . EXPRPC

    _not              shift, and go to state 78
    _minus            shift, and go to state 79
    _newarray         shift, and go to state 80
    _null             shift, and go to state 36
    _readln           shift, and go to state 81
    _this             shift, and go to state 82
    _leftparen        shift, and go to state 83
    _intconstant      shift, and go to state 37
    _doubleconstant   shift, and go to state 38
    _stringconstant   shift, and go to state 39
    _booleanconstant  shift, and go to state 40
    _id               shift, and go to state 84
    _exponent         shift, and go to state 41

    EXPRPC    go to state 147
    EXPR      go to state 86
    LVALUE    go to state 87
    CALL      go to state 88
    CONSTANT  go to state 90


State 121

   94 LVALUE: LVALUE _leftbracket . EXPR _rightbracket

    _not              shift, and go to state 78
    _minus            shift, and go to state 79
    _newarray         shift, and go to state 80
    _null             shift, and go to state 36
    _readln           shift, and go to state 81
    _this             shift, and go to state 82
    _leftparen        shift, and go to state 83
    _intconstant      shift, and go to state 37
    _doubleconstant   shift, and go to state 38
    _stringconstant   shift, and go to state 39
    _booleanconstant  shift, and go to state 40
    _id               shift, and go to state 84
    _exponent         shift, and go to state 41

    EXPR      go to state 148
    LVALUE    go to state 87
    CALL      go to state 88
    CONSTANT  go to state 90


State 122

   95 LVALUE: LVALUE _period . _id

    _id  shift, and go to state 149


State 123

   70 EXPR: LVALUE _assignop . EXPR

    _not              shift, and go to state 78
    _minus            shift, and go to state 79
    _newarray         shift, and go to state 80
    _null             shift, and go to state 36
    _readln           shift, and go to state 81
    _this             shift, and go to state 82
    _leftparen        shift, and go to state 83
    _intconstant      shift, and go to state 37
    _doubleconstant   shift, and go to state 38
    _stringconstant   shift, and go to state 39
    _booleanconstant  shift, and go to state 40
    _id               shift, and go to state 84
    _exponent         shift, and go to state 41

    EXPR      go to state 150
    LVALUE    go to state 87
    CALL      go to state 88
    CONSTANT  go to state 90


State 124

   96 CALL: _id _leftparen ACTUALS _rightparen .

    $default  reduce using rule 96 (CALL)


State 125

   20 FUNCTIONDECL: TYPE _id _leftparen FORMALS _rightparen STMTBLOCK .

    $default  reduce using rule 20 (FUNCTIONDECL)


State 126

   42 PROTOTYPE: _void _id _leftparen FORMALS . _rightparen _semicolon

    _rightparen  shift, and go to state 151


State 127

   41 PROTOTYPE: TYPE _id _leftparen FORMALS . _rightparen _semicolon

    _rightparen  shift, and go to state 152


State 128

   44 VARIABLEDECLM: VARIABLEDECL . VARIABLEDECLM

    _boolean  shift, and go to state 1
    _double   shift, and go to state 3
    _int      shift, and go to state 4
    _string   shift, and go to state 6
    _id       shift, and go to state 8

    _id       [reduce using rule 45 (VARIABLEDECLM)]
    $default  reduce using rule 45 (VARIABLEDECLM)

    VARIABLEDECL   go to state 128
    VARIABLE       go to state 14
    TYPE           go to state 56
    VARIABLEDECLM  go to state 153


State 129

   43 STMTBLOCK: _leftbrace VARIABLEDECLM . STMTM _rightbrace

    _not              shift, and go to state 78
    _minus            shift, and go to state 79
    _break            shift, and go to state 154
    _for              shift, and go to state 155
    _if               shift, and go to state 156
    _newarray         shift, and go to state 80
    _null             shift, and go to state 36
    _println          shift, and go to state 157
    _readln           shift, and go to state 81
    _return           shift, and go to state 158
    _this             shift, and go to state 82
    _while            shift, and go to state 159
    _leftparen        shift, and go to state 83
    _leftbrace        shift, and go to state 99
    _intconstant      shift, and go to state 37
    _doubleconstant   shift, and go to state 38
    _stringconstant   shift, and go to state 39
    _booleanconstant  shift, and go to state 40
    _id               shift, and go to state 84
    _exponent         shift, and go to state 41

    _semicolon  reduce using rule 57 (EXPRO)
    $default    reduce using rule 47 (STMTM)

    STMTBLOCK   go to state 160
    STMTM       go to state 161
    STMT        go to state 162
    EXPRO       go to state 163
    IFSTMT      go to state 164
    WHILESTMT   go to state 165
    FORSTMT     go to state 166
    BREAKSTMT   go to state 167
    RETURNSTMT  go to state 168
    PRINTSTMT   go to state 169
    EXPR        go to state 170
    LVALUE      go to state 87
    CALL        go to state 88
    CONSTANT    go to state 90


State 130

   97 CALL: _id _period _id _leftparen ACTUALS . _rightparen

    _rightparen  shift, and go to state 171


State 131

   92 EXPR: _newarray _leftparen _intconstant . _comma TYPE _rightparen

    _comma  shift, and go to state 172


State 132

   91 EXPR: _readln _leftparen _rightparen .

    $default  reduce using rule 91 (EXPR)


State 133

   75 EXPR: _leftparen EXPR _rightparen .

    $default  reduce using rule 75 (EXPR)


State 134

   76 EXPR: EXPR . _plus EXPR
   76     | EXPR _plus EXPR .
   77     | EXPR . _minus EXPR
   78     | EXPR . _multiplication EXPR
   79     | EXPR . _division EXPR
   80     | EXPR . _mod EXPR
   82     | EXPR . _less EXPR
   83     | EXPR . _lessequal EXPR
   84     | EXPR . _greater EXPR
   85     | EXPR . _greaterequal EXPR
   86     | EXPR . _equal EXPR
   87     | EXPR . _notequal EXPR
   88     | EXPR . _and EXPR
   89     | EXPR . _or EXPR

    _multiplication  shift, and go to state 109
    _division        shift, and go to state 110
    _mod             shift, and go to state 111
    _less            shift, and go to state 112
    _lessequal       shift, and go to state 113
    _greater         shift, and go to state 114
    _greaterequal    shift, and go to state 115
    _equal           shift, and go to state 116
    _notequal        shift, and go to state 117
    _and             shift, and go to state 118
    _or              shift, and go to state 119

    $default  reduce using rule 76 (EXPR)


State 135

   76 EXPR: EXPR . _plus EXPR
   77     | EXPR . _minus EXPR
   77     | EXPR _minus EXPR .
   78     | EXPR . _multiplication EXPR
   79     | EXPR . _division EXPR
   80     | EXPR . _mod EXPR
   82     | EXPR . _less EXPR
   83     | EXPR . _lessequal EXPR
   84     | EXPR . _greater EXPR
   85     | EXPR . _greaterequal EXPR
   86     | EXPR . _equal EXPR
   87     | EXPR . _notequal EXPR
   88     | EXPR . _and EXPR
   89     | EXPR . _or EXPR

    _multiplication  shift, and go to state 109
    _division        shift, and go to state 110
    _mod             shift, and go to state 111
    _less            shift, and go to state 112
    _lessequal       shift, and go to state 113
    _greater         shift, and go to state 114
    _greaterequal    shift, and go to state 115
    _equal           shift, and go to state 116
    _notequal        shift, and go to state 117
    _and             shift, and go to state 118
    _or              shift, and go to state 119

    $default  reduce using rule 77 (EXPR)


State 136

   76 EXPR: EXPR . _plus EXPR
   77     | EXPR . _minus EXPR
   78     | EXPR . _multiplication EXPR
   78     | EXPR _multiplication EXPR .
   79     | EXPR . _division EXPR
   80     | EXPR . _mod EXPR
   82     | EXPR . _less EXPR
   83     | EXPR . _lessequal EXPR
   84     | EXPR . _greater EXPR
   85     | EXPR . _greaterequal EXPR
   86     | EXPR . _equal EXPR
   87     | EXPR . _notequal EXPR
   88     | EXPR . _and EXPR
   89     | EXPR . _or EXPR

    _less          shift, and go to state 112
    _lessequal     shift, and go to state 113
    _greater       shift, and go to state 114
    _greaterequal  shift, and go to state 115
    _equal         shift, and go to state 116
    _notequal      shift, and go to state 117
    _and           shift, and go to state 118
    _or            shift, and go to state 119

    $default  reduce using rule 78 (EXPR)


State 137

   76 EXPR: EXPR . _plus EXPR
   77     | EXPR . _minus EXPR
   78     | EXPR . _multiplication EXPR
   79     | EXPR . _division EXPR
   79     | EXPR _division EXPR .
   80     | EXPR . _mod EXPR
   82     | EXPR . _less EXPR
   83     | EXPR . _lessequal EXPR
   84     | EXPR . _greater EXPR
   85     | EXPR . _greaterequal EXPR
   86     | EXPR . _equal EXPR
   87     | EXPR . _notequal EXPR
   88     | EXPR . _and EXPR
   89     | EXPR . _or EXPR

    _less          shift, and go to state 112
    _lessequal     shift, and go to state 113
    _greater       shift, and go to state 114
    _greaterequal  shift, and go to state 115
    _equal         shift, and go to state 116
    _notequal      shift, and go to state 117
    _and           shift, and go to state 118
    _or            shift, and go to state 119

    $default  reduce using rule 79 (EXPR)


State 138

   76 EXPR: EXPR . _plus EXPR
   77     | EXPR . _minus EXPR
   78     | EXPR . _multiplication EXPR
   79     | EXPR . _division EXPR
   80     | EXPR . _mod EXPR
   80     | EXPR _mod EXPR .
   82     | EXPR . _less EXPR
   83     | EXPR . _lessequal EXPR
   84     | EXPR . _greater EXPR
   85     | EXPR . _greaterequal EXPR
   86     | EXPR . _equal EXPR
   87     | EXPR . _notequal EXPR
   88     | EXPR . _and EXPR
   89     | EXPR . _or EXPR

    _less          shift, and go to state 112
    _lessequal     shift, and go to state 113
    _greater       shift, and go to state 114
    _greaterequal  shift, and go to state 115
    _equal         shift, and go to state 116
    _notequal      shift, and go to state 117
    _and           shift, and go to state 118
    _or            shift, and go to state 119

    $default  reduce using rule 80 (EXPR)


State 139

   76 EXPR: EXPR . _plus EXPR
   77     | EXPR . _minus EXPR
   78     | EXPR . _multiplication EXPR
   79     | EXPR . _division EXPR
   80     | EXPR . _mod EXPR
   82     | EXPR . _less EXPR
   82     | EXPR _less EXPR .
   83     | EXPR . _lessequal EXPR
   84     | EXPR . _greater EXPR
   85     | EXPR . _greaterequal EXPR
   86     | EXPR . _equal EXPR
   87     | EXPR . _notequal EXPR
   88     | EXPR . _and EXPR
   89     | EXPR . _or EXPR

    _equal     shift, and go to state 116
    _notequal  shift, and go to state 117
    _and       shift, and go to state 118
    _or        shift, and go to state 119

    _less          error (nonassociative)
    _lessequal     error (nonassociative)
    _greater       error (nonassociative)
    _greaterequal  error (nonassociative)

    $default  reduce using rule 82 (EXPR)


State 140

   76 EXPR: EXPR . _plus EXPR
   77     | EXPR . _minus EXPR
   78     | EXPR . _multiplication EXPR
   79     | EXPR . _division EXPR
   80     | EXPR . _mod EXPR
   82     | EXPR . _less EXPR
   83     | EXPR . _lessequal EXPR
   83     | EXPR _lessequal EXPR .
   84     | EXPR . _greater EXPR
   85     | EXPR . _greaterequal EXPR
   86     | EXPR . _equal EXPR
   87     | EXPR . _notequal EXPR
   88     | EXPR . _and EXPR
   89     | EXPR . _or EXPR

    _equal     shift, and go to state 116
    _notequal  shift, and go to state 117
    _and       shift, and go to state 118
    _or        shift, and go to state 119

    _less          error (nonassociative)
    _lessequal     error (nonassociative)
    _greater       error (nonassociative)
    _greaterequal  error (nonassociative)

    $default  reduce using rule 83 (EXPR)


State 141

   76 EXPR: EXPR . _plus EXPR
   77     | EXPR . _minus EXPR
   78     | EXPR . _multiplication EXPR
   79     | EXPR . _division EXPR
   80     | EXPR . _mod EXPR
   82     | EXPR . _less EXPR
   83     | EXPR . _lessequal EXPR
   84     | EXPR . _greater EXPR
   84     | EXPR _greater EXPR .
   85     | EXPR . _greaterequal EXPR
   86     | EXPR . _equal EXPR
   87     | EXPR . _notequal EXPR
   88     | EXPR . _and EXPR
   89     | EXPR . _or EXPR

    _equal     shift, and go to state 116
    _notequal  shift, and go to state 117
    _and       shift, and go to state 118
    _or        shift, and go to state 119

    _less          error (nonassociative)
    _lessequal     error (nonassociative)
    _greater       error (nonassociative)
    _greaterequal  error (nonassociative)

    $default  reduce using rule 84 (EXPR)


State 142

   76 EXPR: EXPR . _plus EXPR
   77     | EXPR . _minus EXPR
   78     | EXPR . _multiplication EXPR
   79     | EXPR . _division EXPR
   80     | EXPR . _mod EXPR
   82     | EXPR . _less EXPR
   83     | EXPR . _lessequal EXPR
   84     | EXPR . _greater EXPR
   85     | EXPR . _greaterequal EXPR
   85     | EXPR _greaterequal EXPR .
   86     | EXPR . _equal EXPR
   87     | EXPR . _notequal EXPR
   88     | EXPR . _and EXPR
   89     | EXPR . _or EXPR

    _equal     shift, and go to state 116
    _notequal  shift, and go to state 117
    _and       shift, and go to state 118
    _or        shift, and go to state 119

    _less          error (nonassociative)
    _lessequal     error (nonassociative)
    _greater       error (nonassociative)
    _greaterequal  error (nonassociative)

    $default  reduce using rule 85 (EXPR)


State 143

   76 EXPR: EXPR . _plus EXPR
   77     | EXPR . _minus EXPR
   78     | EXPR . _multiplication EXPR
   79     | EXPR . _division EXPR
   80     | EXPR . _mod EXPR
   82     | EXPR . _less EXPR
   83     | EXPR . _lessequal EXPR
   84     | EXPR . _greater EXPR
   85     | EXPR . _greaterequal EXPR
   86     | EXPR . _equal EXPR
   86     | EXPR _equal EXPR .
   87     | EXPR . _notequal EXPR
   88     | EXPR . _and EXPR
   89     | EXPR . _or EXPR

    _and  shift, and go to state 118
    _or   shift, and go to state 119

    _equal     error (nonassociative)
    _notequal  error (nonassociative)

    $default  reduce using rule 86 (EXPR)


State 144

   76 EXPR: EXPR . _plus EXPR
   77     | EXPR . _minus EXPR
   78     | EXPR . _multiplication EXPR
   79     | EXPR . _division EXPR
   80     | EXPR . _mod EXPR
   82     | EXPR . _less EXPR
   83     | EXPR . _lessequal EXPR
   84     | EXPR . _greater EXPR
   85     | EXPR . _greaterequal EXPR
   86     | EXPR . _equal EXPR
   87     | EXPR . _notequal EXPR
   87     | EXPR _notequal EXPR .
   88     | EXPR . _and EXPR
   89     | EXPR . _or EXPR

    _and  shift, and go to state 118
    _or   shift, and go to state 119

    _equal     error (nonassociative)
    _notequal  error (nonassociative)

    $default  reduce using rule 87 (EXPR)


State 145

   76 EXPR: EXPR . _plus EXPR
   77     | EXPR . _minus EXPR
   78     | EXPR . _multiplication EXPR
   79     | EXPR . _division EXPR
   80     | EXPR . _mod EXPR
   82     | EXPR . _less EXPR
   83     | EXPR . _lessequal EXPR
   84     | EXPR . _greater EXPR
   85     | EXPR . _greaterequal EXPR
   86     | EXPR . _equal EXPR
   87     | EXPR . _notequal EXPR
   88     | EXPR . _and EXPR
   88     | EXPR _and EXPR .
   89     | EXPR . _or EXPR

    _or  shift, and go to state 119

    $default  reduce using rule 88 (EXPR)


State 146

   76 EXPR: EXPR . _plus EXPR
   77     | EXPR . _minus EXPR
   78     | EXPR . _multiplication EXPR
   79     | EXPR . _division EXPR
   80     | EXPR . _mod EXPR
   82     | EXPR . _less EXPR
   83     | EXPR . _lessequal EXPR
   84     | EXPR . _greater EXPR
   85     | EXPR . _greaterequal EXPR
   86     | EXPR . _equal EXPR
   87     | EXPR . _notequal EXPR
   88     | EXPR . _and EXPR
   89     | EXPR . _or EXPR
   89     | EXPR _or EXPR .

    $default  reduce using rule 89 (EXPR)


State 147

   68 EXPRPC: EXPR _comma EXPRPC .

    $default  reduce using rule 68 (EXPRPC)


State 148

   76 EXPR: EXPR . _plus EXPR
   77     | EXPR . _minus EXPR
   78     | EXPR . _multiplication EXPR
   79     | EXPR . _division EXPR
   80     | EXPR . _mod EXPR
   82     | EXPR . _less EXPR
   83     | EXPR . _lessequal EXPR
   84     | EXPR . _greater EXPR
   85     | EXPR . _greaterequal EXPR
   86     | EXPR . _equal EXPR
   87     | EXPR . _notequal EXPR
   88     | EXPR . _and EXPR
   89     | EXPR . _or EXPR
   94 LVALUE: LVALUE _leftbracket EXPR . _rightbracket

    _plus            shift, and go to state 107
    _minus           shift, and go to state 108
    _multiplication  shift, and go to state 109
    _division        shift, and go to state 110
    _mod             shift, and go to state 111
    _less            shift, and go to state 112
    _lessequal       shift, and go to state 113
    _greater         shift, and go to state 114
    _greaterequal    shift, and go to state 115
    _equal           shift, and go to state 116
    _notequal        shift, and go to state 117
    _and             shift, and go to state 118
    _or              shift, and go to state 119
    _rightbracket    shift, and go to state 173


State 149

   95 LVALUE: LVALUE _period _id .

    $default  reduce using rule 95 (LVALUE)


State 150

   70 EXPR: LVALUE _assignop EXPR .
   76     | EXPR . _plus EXPR
   77     | EXPR . _minus EXPR
   78     | EXPR . _multiplication EXPR
   79     | EXPR . _division EXPR
   80     | EXPR . _mod EXPR
   82     | EXPR . _less EXPR
   83     | EXPR . _lessequal EXPR
   84     | EXPR . _greater EXPR
   85     | EXPR . _greaterequal EXPR
   86     | EXPR . _equal EXPR
   87     | EXPR . _notequal EXPR
   88     | EXPR . _and EXPR
   89     | EXPR . _or EXPR

    $default  reduce using rule 70 (EXPR)


State 151

   42 PROTOTYPE: _void _id _leftparen FORMALS _rightparen . _semicolon

    _semicolon  shift, and go to state 174


State 152

   41 PROTOTYPE: TYPE _id _leftparen FORMALS _rightparen . _semicolon

    _semicolon  shift, and go to state 175


State 153

   44 VARIABLEDECLM: VARIABLEDECL VARIABLEDECLM .

    $default  reduce using rule 44 (VARIABLEDECLM)


State 154

   65 BREAKSTMT: _break . _semicolon

    _semicolon  shift, and go to state 176


State 155

   62 FORSTMT: _for . _leftparen EXPRO _semicolon EXPR _semicolon EXPRO _rightparen _leftbrace STMTM _rightbrace
   63        | _for . _leftparen EXPRO _semicolon EXPR _semicolon EXPRO _rightparen STMT
   64        | _for . _leftparen EXPRO _semicolon EXPR _semicolon EXPRO _rightparen STMTBLOCK

    _leftparen  shift, and go to state 177


State 156

   58 IFSTMT: _if . _leftparen EXPR _rightparen STMT ELSESTMTO

    _leftparen  shift, and go to state 178


State 157

   67 PRINTSTMT: _println . _leftparen EXPRPC _rightparen _semicolon

    _leftparen  shift, and go to state 179


State 158

   66 RETURNSTMT: _return . EXPRO _semicolon

    _not              shift, and go to state 78
    _minus            shift, and go to state 79
    _newarray         shift, and go to state 80
    _null             shift, and go to state 36
    _readln           shift, and go to state 81
    _this             shift, and go to state 82
    _leftparen        shift, and go to state 83
    _intconstant      shift, and go to state 37
    _doubleconstant   shift, and go to state 38
    _stringconstant   shift, and go to state 39
    _booleanconstant  shift, and go to state 40
    _id               shift, and go to state 84
    _exponent         shift, and go to state 41

    $default  reduce using rule 57 (EXPRO)

    EXPRO     go to state 180
    EXPR      go to state 170
    LVALUE    go to state 87
    CALL      go to state 88
    CONSTANT  go to state 90


State 159

   61 WHILESTMT: _while . _leftparen EXPR _rightparen STMT

    _leftparen  shift, and go to state 181


State 160

   55 STMT: STMTBLOCK .

    $default  reduce using rule 55 (STMT)


State 161

   43 STMTBLOCK: _leftbrace VARIABLEDECLM STMTM . _rightbrace

    _rightbrace  shift, and go to state 182


State 162

   46 STMTM: STMT . STMTM

    _not              shift, and go to state 78
    _minus            shift, and go to state 79
    _break            shift, and go to state 154
    _for              shift, and go to state 155
    _if               shift, and go to state 156
    _newarray         shift, and go to state 80
    _null             shift, and go to state 36
    _println          shift, and go to state 157
    _readln           shift, and go to state 81
    _return           shift, and go to state 158
    _this             shift, and go to state 82
    _while            shift, and go to state 159
    _leftparen        shift, and go to state 83
    _leftbrace        shift, and go to state 99
    _intconstant      shift, and go to state 37
    _doubleconstant   shift, and go to state 38
    _stringconstant   shift, and go to state 39
    _booleanconstant  shift, and go to state 40
    _id               shift, and go to state 84
    _exponent         shift, and go to state 41

    _semicolon  reduce using rule 57 (EXPRO)
    $default    reduce using rule 47 (STMTM)

    STMTBLOCK   go to state 160
    STMTM       go to state 183
    STMT        go to state 162
    EXPRO       go to state 163
    IFSTMT      go to state 164
    WHILESTMT   go to state 165
    FORSTMT     go to state 166
    BREAKSTMT   go to state 167
    RETURNSTMT  go to state 168
    PRINTSTMT   go to state 169
    EXPR        go to state 170
    LVALUE      go to state 87
    CALL        go to state 88
    CONSTANT    go to state 90


State 163

   48 STMT: EXPRO . _semicolon

    _semicolon  shift, and go to state 184


State 164

   49 STMT: IFSTMT .

    $default  reduce using rule 49 (STMT)


State 165

   50 STMT: WHILESTMT .

    $default  reduce using rule 50 (STMT)


State 166

   51 STMT: FORSTMT .

    $default  reduce using rule 51 (STMT)


State 167

   52 STMT: BREAKSTMT .

    $default  reduce using rule 52 (STMT)


State 168

   53 STMT: RETURNSTMT .

    $default  reduce using rule 53 (STMT)


State 169

   54 STMT: PRINTSTMT .

    $default  reduce using rule 54 (STMT)


State 170

   56 EXPRO: EXPR .
   76 EXPR: EXPR . _plus EXPR
   77     | EXPR . _minus EXPR
   78     | EXPR . _multiplication EXPR
   79     | EXPR . _division EXPR
   80     | EXPR . _mod EXPR
   82     | EXPR . _less EXPR
   83     | EXPR . _lessequal EXPR
   84     | EXPR . _greater EXPR
   85     | EXPR . _greaterequal EXPR
   86     | EXPR . _equal EXPR
   87     | EXPR . _notequal EXPR
   88     | EXPR . _and EXPR
   89     | EXPR . _or EXPR

    _plus            shift, and go to state 107
    _minus           shift, and go to state 108
    _multiplication  shift, and go to state 109
    _division        shift, and go to state 110
    _mod             shift, and go to state 111
    _less            shift, and go to state 112
    _lessequal       shift, and go to state 113
    _greater         shift, and go to state 114
    _greaterequal    shift, and go to state 115
    _equal           shift, and go to state 116
    _notequal        shift, and go to state 117
    _and             shift, and go to state 118
    _or              shift, and go to state 119

    $default  reduce using rule 56 (EXPRO)


State 171

   97 CALL: _id _period _id _leftparen ACTUALS _rightparen .

    $default  reduce using rule 97 (CALL)


State 172

   92 EXPR: _newarray _leftparen _intconstant _comma . TYPE _rightparen

    _boolean  shift, and go to state 1
    _double   shift, and go to state 3
    _int      shift, and go to state 4
    _string   shift, and go to state 6
    _id       shift, and go to state 50

    TYPE  go to state 185


State 173

   94 LVALUE: LVALUE _leftbracket EXPR _rightbracket .

    $default  reduce using rule 94 (LVALUE)


State 174

   42 PROTOTYPE: _void _id _leftparen FORMALS _rightparen _semicolon .

    $default  reduce using rule 42 (PROTOTYPE)


State 175

   41 PROTOTYPE: TYPE _id _leftparen FORMALS _rightparen _semicolon .

    $default  reduce using rule 41 (PROTOTYPE)


State 176

   65 BREAKSTMT: _break _semicolon .

    $default  reduce using rule 65 (BREAKSTMT)


State 177

   62 FORSTMT: _for _leftparen . EXPRO _semicolon EXPR _semicolon EXPRO _rightparen _leftbrace STMTM _rightbrace
   63        | _for _leftparen . EXPRO _semicolon EXPR _semicolon EXPRO _rightparen STMT
   64        | _for _leftparen . EXPRO _semicolon EXPR _semicolon EXPRO _rightparen STMTBLOCK

    _not              shift, and go to state 78
    _minus            shift, and go to state 79
    _newarray         shift, and go to state 80
    _null             shift, and go to state 36
    _readln           shift, and go to state 81
    _this             shift, and go to state 82
    _leftparen        shift, and go to state 83
    _intconstant      shift, and go to state 37
    _doubleconstant   shift, and go to state 38
    _stringconstant   shift, and go to state 39
    _booleanconstant  shift, and go to state 40
    _id               shift, and go to state 84
    _exponent         shift, and go to state 41

    $default  reduce using rule 57 (EXPRO)

    EXPRO     go to state 186
    EXPR      go to state 170
    LVALUE    go to state 87
    CALL      go to state 88
    CONSTANT  go to state 90


State 178

   58 IFSTMT: _if _leftparen . EXPR _rightparen STMT ELSESTMTO

    _not              shift, and go to state 78
    _minus            shift, and go to state 79
    _newarray         shift, and go to state 80
    _null             shift, and go to state 36
    _readln           shift, and go to state 81
    _this             shift, and go to state 82
    _leftparen        shift, and go to state 83
    _intconstant      shift, and go to state 37
    _doubleconstant   shift, and go to state 38
    _stringconstant   shift, and go to state 39
    _booleanconstant  shift, and go to state 40
    _id               shift, and go to state 84
    _exponent         shift, and go to state 41

    EXPR      go to state 187
    LVALUE    go to state 87
    CALL      go to state 88
    CONSTANT  go to state 90


State 179

   67 PRINTSTMT: _println _leftparen . EXPRPC _rightparen _semicolon

    _not              shift, and go to state 78
    _minus            shift, and go to state 79
    _newarray         shift, and go to state 80
    _null             shift, and go to state 36
    _readln           shift, and go to state 81
    _this             shift, and go to state 82
    _leftparen        shift, and go to state 83
    _intconstant      shift, and go to state 37
    _doubleconstant   shift, and go to state 38
    _stringconstant   shift, and go to state 39
    _booleanconstant  shift, and go to state 40
    _id               shift, and go to state 84
    _exponent         shift, and go to state 41

    EXPRPC    go to state 188
    EXPR      go to state 86
    LVALUE    go to state 87
    CALL      go to state 88
    CONSTANT  go to state 90


State 180

   66 RETURNSTMT: _return EXPRO . _semicolon

    _semicolon  shift, and go to state 189


State 181

   61 WHILESTMT: _while _leftparen . EXPR _rightparen STMT

    _not              shift, and go to state 78
    _minus            shift, and go to state 79
    _newarray         shift, and go to state 80
    _null             shift, and go to state 36
    _readln           shift, and go to state 81
    _this             shift, and go to state 82
    _leftparen        shift, and go to state 83
    _intconstant      shift, and go to state 37
    _doubleconstant   shift, and go to state 38
    _stringconstant   shift, and go to state 39
    _booleanconstant  shift, and go to state 40
    _id               shift, and go to state 84
    _exponent         shift, and go to state 41

    EXPR      go to state 190
    LVALUE    go to state 87
    CALL      go to state 88
    CONSTANT  go to state 90


State 182

   43 STMTBLOCK: _leftbrace VARIABLEDECLM STMTM _rightbrace .

    $default  reduce using rule 43 (STMTBLOCK)


State 183

   46 STMTM: STMT STMTM .

    $default  reduce using rule 46 (STMTM)


State 184

   48 STMT: EXPRO _semicolon .

    $default  reduce using rule 48 (STMT)


State 185

   18 TYPE: TYPE . _leftbracket _rightbracket
   92 EXPR: _newarray _leftparen _intconstant _comma TYPE . _rightparen

    _leftbracket  shift, and go to state 27
    _rightparen   shift, and go to state 191


State 186

   62 FORSTMT: _for _leftparen EXPRO . _semicolon EXPR _semicolon EXPRO _rightparen _leftbrace STMTM _rightbrace
   63        | _for _leftparen EXPRO . _semicolon EXPR _semicolon EXPRO _rightparen STMT
   64        | _for _leftparen EXPRO . _semicolon EXPR _semicolon EXPRO _rightparen STMTBLOCK

    _semicolon  shift, and go to state 192


State 187

   58 IFSTMT: _if _leftparen EXPR . _rightparen STMT ELSESTMTO
   76 EXPR: EXPR . _plus EXPR
   77     | EXPR . _minus EXPR
   78     | EXPR . _multiplication EXPR
   79     | EXPR . _division EXPR
   80     | EXPR . _mod EXPR
   82     | EXPR . _less EXPR
   83     | EXPR . _lessequal EXPR
   84     | EXPR . _greater EXPR
   85     | EXPR . _greaterequal EXPR
   86     | EXPR . _equal EXPR
   87     | EXPR . _notequal EXPR
   88     | EXPR . _and EXPR
   89     | EXPR . _or EXPR

    _plus            shift, and go to state 107
    _minus           shift, and go to state 108
    _multiplication  shift, and go to state 109
    _division        shift, and go to state 110
    _mod             shift, and go to state 111
    _less            shift, and go to state 112
    _lessequal       shift, and go to state 113
    _greater         shift, and go to state 114
    _greaterequal    shift, and go to state 115
    _equal           shift, and go to state 116
    _notequal        shift, and go to state 117
    _and             shift, and go to state 118
    _or              shift, and go to state 119
    _rightparen      shift, and go to state 193


State 188

   67 PRINTSTMT: _println _leftparen EXPRPC . _rightparen _semicolon

    _rightparen  shift, and go to state 194


State 189

   66 RETURNSTMT: _return EXPRO _semicolon .

    $default  reduce using rule 66 (RETURNSTMT)


State 190

   61 WHILESTMT: _while _leftparen EXPR . _rightparen STMT
   76 EXPR: EXPR . _plus EXPR
   77     | EXPR . _minus EXPR
   78     | EXPR . _multiplication EXPR
   79     | EXPR . _division EXPR
   80     | EXPR . _mod EXPR
   82     | EXPR . _less EXPR
   83     | EXPR . _lessequal EXPR
   84     | EXPR . _greater EXPR
   85     | EXPR . _greaterequal EXPR
   86     | EXPR . _equal EXPR
   87     | EXPR . _notequal EXPR
   88     | EXPR . _and EXPR
   89     | EXPR . _or EXPR

    _plus            shift, and go to state 107
    _minus           shift, and go to state 108
    _multiplication  shift, and go to state 109
    _division        shift, and go to state 110
    _mod             shift, and go to state 111
    _less            shift, and go to state 112
    _lessequal       shift, and go to state 113
    _greater         shift, and go to state 114
    _greaterequal    shift, and go to state 115
    _equal           shift, and go to state 116
    _notequal        shift, and go to state 117
    _and             shift, and go to state 118
    _or              shift, and go to state 119
    _rightparen      shift, and go to state 195


State 191

   92 EXPR: _newarray _leftparen _intconstant _comma TYPE _rightparen .

    $default  reduce using rule 92 (EXPR)


State 192

   62 FORSTMT: _for _leftparen EXPRO _semicolon . EXPR _semicolon EXPRO _rightparen _leftbrace STMTM _rightbrace
   63        | _for _leftparen EXPRO _semicolon . EXPR _semicolon EXPRO _rightparen STMT
   64        | _for _leftparen EXPRO _semicolon . EXPR _semicolon EXPRO _rightparen STMTBLOCK

    _not              shift, and go to state 78
    _minus            shift, and go to state 79
    _newarray         shift, and go to state 80
    _null             shift, and go to state 36
    _readln           shift, and go to state 81
    _this             shift, and go to state 82
    _leftparen        shift, and go to state 83
    _intconstant      shift, and go to state 37
    _doubleconstant   shift, and go to state 38
    _stringconstant   shift, and go to state 39
    _booleanconstant  shift, and go to state 40
    _id               shift, and go to state 84
    _exponent         shift, and go to state 41

    EXPR      go to state 196
    LVALUE    go to state 87
    CALL      go to state 88
    CONSTANT  go to state 90


State 193

   58 IFSTMT: _if _leftparen EXPR _rightparen . STMT ELSESTMTO

    _not              shift, and go to state 78
    _minus            shift, and go to state 79
    _break            shift, and go to state 154
    _for              shift, and go to state 155
    _if               shift, and go to state 156
    _newarray         shift, and go to state 80
    _null             shift, and go to state 36
    _println          shift, and go to state 157
    _readln           shift, and go to state 81
    _return           shift, and go to state 158
    _this             shift, and go to state 82
    _while            shift, and go to state 159
    _leftparen        shift, and go to state 83
    _leftbrace        shift, and go to state 99
    _intconstant      shift, and go to state 37
    _doubleconstant   shift, and go to state 38
    _stringconstant   shift, and go to state 39
    _booleanconstant  shift, and go to state 40
    _id               shift, and go to state 84
    _exponent         shift, and go to state 41

    $default  reduce using rule 57 (EXPRO)

    STMTBLOCK   go to state 160
    STMT        go to state 197
    EXPRO       go to state 163
    IFSTMT      go to state 164
    WHILESTMT   go to state 165
    FORSTMT     go to state 166
    BREAKSTMT   go to state 167
    RETURNSTMT  go to state 168
    PRINTSTMT   go to state 169
    EXPR        go to state 170
    LVALUE      go to state 87
    CALL        go to state 88
    CONSTANT    go to state 90


State 194

   67 PRINTSTMT: _println _leftparen EXPRPC _rightparen . _semicolon

    _semicolon  shift, and go to state 198


State 195

   61 WHILESTMT: _while _leftparen EXPR _rightparen . STMT

    _not              shift, and go to state 78
    _minus            shift, and go to state 79
    _break            shift, and go to state 154
    _for              shift, and go to state 155
    _if               shift, and go to state 156
    _newarray         shift, and go to state 80
    _null             shift, and go to state 36
    _println          shift, and go to state 157
    _readln           shift, and go to state 81
    _return           shift, and go to state 158
    _this             shift, and go to state 82
    _while            shift, and go to state 159
    _leftparen        shift, and go to state 83
    _leftbrace        shift, and go to state 99
    _intconstant      shift, and go to state 37
    _doubleconstant   shift, and go to state 38
    _stringconstant   shift, and go to state 39
    _booleanconstant  shift, and go to state 40
    _id               shift, and go to state 84
    _exponent         shift, and go to state 41

    $default  reduce using rule 57 (EXPRO)

    STMTBLOCK   go to state 160
    STMT        go to state 199
    EXPRO       go to state 163
    IFSTMT      go to state 164
    WHILESTMT   go to state 165
    FORSTMT     go to state 166
    BREAKSTMT   go to state 167
    RETURNSTMT  go to state 168
    PRINTSTMT   go to state 169
    EXPR        go to state 170
    LVALUE      go to state 87
    CALL        go to state 88
    CONSTANT    go to state 90


State 196

   62 FORSTMT: _for _leftparen EXPRO _semicolon EXPR . _semicolon EXPRO _rightparen _leftbrace STMTM _rightbrace
   63        | _for _leftparen EXPRO _semicolon EXPR . _semicolon EXPRO _rightparen STMT
   64        | _for _leftparen EXPRO _semicolon EXPR . _semicolon EXPRO _rightparen STMTBLOCK
   76 EXPR: EXPR . _plus EXPR
   77     | EXPR . _minus EXPR
   78     | EXPR . _multiplication EXPR
   79     | EXPR . _division EXPR
   80     | EXPR . _mod EXPR
   82     | EXPR . _less EXPR
   83     | EXPR . _lessequal EXPR
   84     | EXPR . _greater EXPR
   85     | EXPR . _greaterequal EXPR
   86     | EXPR . _equal EXPR
   87     | EXPR . _notequal EXPR
   88     | EXPR . _and EXPR
   89     | EXPR . _or EXPR

    _plus            shift, and go to state 107
    _minus           shift, and go to state 108
    _multiplication  shift, and go to state 109
    _division        shift, and go to state 110
    _mod             shift, and go to state 111
    _less            shift, and go to state 112
    _lessequal       shift, and go to state 113
    _greater         shift, and go to state 114
    _greaterequal    shift, and go to state 115
    _equal           shift, and go to state 116
    _notequal        shift, and go to state 117
    _and             shift, and go to state 118
    _or              shift, and go to state 119
    _semicolon       shift, and go to state 200


State 197

   58 IFSTMT: _if _leftparen EXPR _rightparen STMT . ELSESTMTO

    _else  shift, and go to state 201

    _else     [reduce using rule 60 (ELSESTMTO)]
    $default  reduce using rule 60 (ELSESTMTO)

    ELSESTMTO  go to state 202


State 198

   67 PRINTSTMT: _println _leftparen EXPRPC _rightparen _semicolon .

    $default  reduce using rule 67 (PRINTSTMT)


State 199

   61 WHILESTMT: _while _leftparen EXPR _rightparen STMT .

    $default  reduce using rule 61 (WHILESTMT)


State 200

   62 FORSTMT: _for _leftparen EXPRO _semicolon EXPR _semicolon . EXPRO _rightparen _leftbrace STMTM _rightbrace
   63        | _for _leftparen EXPRO _semicolon EXPR _semicolon . EXPRO _rightparen STMT
   64        | _for _leftparen EXPRO _semicolon EXPR _semicolon . EXPRO _rightparen STMTBLOCK

    _not              shift, and go to state 78
    _minus            shift, and go to state 79
    _newarray         shift, and go to state 80
    _null             shift, and go to state 36
    _readln           shift, and go to state 81
    _this             shift, and go to state 82
    _leftparen        shift, and go to state 83
    _intconstant      shift, and go to state 37
    _doubleconstant   shift, and go to state 38
    _stringconstant   shift, and go to state 39
    _booleanconstant  shift, and go to state 40
    _id               shift, and go to state 84
    _exponent         shift, and go to state 41

    $default  reduce using rule 57 (EXPRO)

    EXPRO     go to state 203
    EXPR      go to state 170
    LVALUE    go to state 87
    CALL      go to state 88
    CONSTANT  go to state 90


State 201

   59 ELSESTMTO: _else . STMT

    _not              shift, and go to state 78
    _minus            shift, and go to state 79
    _break            shift, and go to state 154
    _for              shift, and go to state 155
    _if               shift, and go to state 156
    _newarray         shift, and go to state 80
    _null             shift, and go to state 36
    _println          shift, and go to state 157
    _readln           shift, and go to state 81
    _return           shift, and go to state 158
    _this             shift, and go to state 82
    _while            shift, and go to state 159
    _leftparen        shift, and go to state 83
    _leftbrace        shift, and go to state 99
    _intconstant      shift, and go to state 37
    _doubleconstant   shift, and go to state 38
    _stringconstant   shift, and go to state 39
    _booleanconstant  shift, and go to state 40
    _id               shift, and go to state 84
    _exponent         shift, and go to state 41

    $default  reduce using rule 57 (EXPRO)

    STMTBLOCK   go to state 160
    STMT        go to state 204
    EXPRO       go to state 163
    IFSTMT      go to state 164
    WHILESTMT   go to state 165
    FORSTMT     go to state 166
    BREAKSTMT   go to state 167
    RETURNSTMT  go to state 168
    PRINTSTMT   go to state 169
    EXPR        go to state 170
    LVALUE      go to state 87
    CALL        go to state 88
    CONSTANT    go to state 90


State 202

   58 IFSTMT: _if _leftparen EXPR _rightparen STMT ELSESTMTO .

    $default  reduce using rule 58 (IFSTMT)


State 203

   62 FORSTMT: _for _leftparen EXPRO _semicolon EXPR _semicolon EXPRO . _rightparen _leftbrace STMTM _rightbrace
   63        | _for _leftparen EXPRO _semicolon EXPR _semicolon EXPRO . _rightparen STMT
   64        | _for _leftparen EXPRO _semicolon EXPR _semicolon EXPRO . _rightparen STMTBLOCK

    _rightparen  shift, and go to state 205


State 204

   59 ELSESTMTO: _else STMT .

    $default  reduce using rule 59 (ELSESTMTO)


State 205

   62 FORSTMT: _for _leftparen EXPRO _semicolon EXPR _semicolon EXPRO _rightparen . _leftbrace STMTM _rightbrace
   63        | _for _leftparen EXPRO _semicolon EXPR _semicolon EXPRO _rightparen . STMT
   64        | _for _leftparen EXPRO _semicolon EXPR _semicolon EXPRO _rightparen . STMTBLOCK

    _not              shift, and go to state 78
    _minus            shift, and go to state 79
    _break            shift, and go to state 154
    _for              shift, and go to state 155
    _if               shift, and go to state 156
    _newarray         shift, and go to state 80
    _null             shift, and go to state 36
    _println          shift, and go to state 157
    _readln           shift, and go to state 81
    _return           shift, and go to state 158
    _this             shift, and go to state 82
    _while            shift, and go to state 159
    _leftparen        shift, and go to state 83
    _leftbrace        shift, and go to state 206
    _intconstant      shift, and go to state 37
    _doubleconstant   shift, and go to state 38
    _stringconstant   shift, and go to state 39
    _booleanconstant  shift, and go to state 40
    _id               shift, and go to state 84
    _exponent         shift, and go to state 41

    $default  reduce using rule 57 (EXPRO)

    STMTBLOCK   go to state 207
    STMT        go to state 208
    EXPRO       go to state 163
    IFSTMT      go to state 164
    WHILESTMT   go to state 165
    FORSTMT     go to state 166
    BREAKSTMT   go to state 167
    RETURNSTMT  go to state 168
    PRINTSTMT   go to state 169
    EXPR        go to state 170
    LVALUE      go to state 87
    CALL        go to state 88
    CONSTANT    go to state 90


State 206

   43 STMTBLOCK: _leftbrace . VARIABLEDECLM STMTM _rightbrace
   62 FORSTMT: _for _leftparen EXPRO _semicolon EXPR _semicolon EXPRO _rightparen _leftbrace . STMTM _rightbrace

    _not              shift, and go to state 78
    _minus            shift, and go to state 79
    _boolean          shift, and go to state 1
    _break            shift, and go to state 154
    _double           shift, and go to state 3
    _for              shift, and go to state 155
    _if               shift, and go to state 156
    _int              shift, and go to state 4
    _newarray         shift, and go to state 80
    _null             shift, and go to state 36
    _println          shift, and go to state 157
    _readln           shift, and go to state 81
    _return           shift, and go to state 158
    _string           shift, and go to state 6
    _this             shift, and go to state 82
    _while            shift, and go to state 159
    _leftparen        shift, and go to state 83
    _leftbrace        shift, and go to state 99
    _intconstant      shift, and go to state 37
    _doubleconstant   shift, and go to state 38
    _stringconstant   shift, and go to state 39
    _booleanconstant  shift, and go to state 40
    _id               shift, and go to state 209
    _exponent         shift, and go to state 41

    _not              [reduce using rule 45 (VARIABLEDECLM)]
    _minus            [reduce using rule 45 (VARIABLEDECLM)]
    _break            [reduce using rule 45 (VARIABLEDECLM)]
    _for              [reduce using rule 45 (VARIABLEDECLM)]
    _if               [reduce using rule 45 (VARIABLEDECLM)]
    _newarray         [reduce using rule 45 (VARIABLEDECLM)]
    _null             [reduce using rule 45 (VARIABLEDECLM)]
    _println          [reduce using rule 45 (VARIABLEDECLM)]
    _readln           [reduce using rule 45 (VARIABLEDECLM)]
    _return           [reduce using rule 45 (VARIABLEDECLM)]
    _this             [reduce using rule 45 (VARIABLEDECLM)]
    _while            [reduce using rule 45 (VARIABLEDECLM)]
    _semicolon        reduce using rule 45 (VARIABLEDECLM)
    _semicolon        [reduce using rule 57 (EXPRO)]
    _leftparen        [reduce using rule 45 (VARIABLEDECLM)]
    _leftbrace        [reduce using rule 45 (VARIABLEDECLM)]
    _rightbrace       reduce using rule 45 (VARIABLEDECLM)
    _rightbrace       [reduce using rule 47 (STMTM)]
    _intconstant      [reduce using rule 45 (VARIABLEDECLM)]
    _doubleconstant   [reduce using rule 45 (VARIABLEDECLM)]
    _stringconstant   [reduce using rule 45 (VARIABLEDECLM)]
    _booleanconstant  [reduce using rule 45 (VARIABLEDECLM)]
    _id               [reduce using rule 45 (VARIABLEDECLM)]
    _exponent         [reduce using rule 45 (VARIABLEDECLM)]
    $default          reduce using rule 45 (VARIABLEDECLM)

    VARIABLEDECL   go to state 128
    VARIABLE       go to state 14
    TYPE           go to state 56
    STMTBLOCK      go to state 160
    VARIABLEDECLM  go to state 129
    STMTM          go to state 210
    STMT           go to state 162
    EXPRO          go to state 163
    IFSTMT         go to state 164
    WHILESTMT      go to state 165
    FORSTMT        go to state 166
    BREAKSTMT      go to state 167
    RETURNSTMT     go to state 168
    PRINTSTMT      go to state 169
    EXPR           go to state 170
    LVALUE         go to state 87
    CALL           go to state 88
    CONSTANT       go to state 90


State 207

   55 STMT: STMTBLOCK .
   64 FORSTMT: _for _leftparen EXPRO _semicolon EXPR _semicolon EXPRO _rightparen STMTBLOCK .

    _not              reduce using rule 55 (STMT)
    _not              [reduce using rule 64 (FORSTMT)]
    _minus            reduce using rule 55 (STMT)
    _minus            [reduce using rule 64 (FORSTMT)]
    _break            reduce using rule 55 (STMT)
    _break            [reduce using rule 64 (FORSTMT)]
    _else             reduce using rule 55 (STMT)
    _else             [reduce using rule 64 (FORSTMT)]
    _for              reduce using rule 55 (STMT)
    _for              [reduce using rule 64 (FORSTMT)]
    _if               reduce using rule 55 (STMT)
    _if               [reduce using rule 64 (FORSTMT)]
    _newarray         reduce using rule 55 (STMT)
    _newarray         [reduce using rule 64 (FORSTMT)]
    _null             reduce using rule 55 (STMT)
    _null             [reduce using rule 64 (FORSTMT)]
    _println          reduce using rule 55 (STMT)
    _println          [reduce using rule 64 (FORSTMT)]
    _readln           reduce using rule 55 (STMT)
    _readln           [reduce using rule 64 (FORSTMT)]
    _return           reduce using rule 55 (STMT)
    _return           [reduce using rule 64 (FORSTMT)]
    _this             reduce using rule 55 (STMT)
    _this             [reduce using rule 64 (FORSTMT)]
    _while            reduce using rule 55 (STMT)
    _while            [reduce using rule 64 (FORSTMT)]
    _semicolon        reduce using rule 55 (STMT)
    _semicolon        [reduce using rule 64 (FORSTMT)]
    _leftparen        reduce using rule 55 (STMT)
    _leftparen        [reduce using rule 64 (FORSTMT)]
    _leftbrace        reduce using rule 55 (STMT)
    _leftbrace        [reduce using rule 64 (FORSTMT)]
    _rightbrace       reduce using rule 55 (STMT)
    _rightbrace       [reduce using rule 64 (FORSTMT)]
    _intconstant      reduce using rule 55 (STMT)
    _intconstant      [reduce using rule 64 (FORSTMT)]
    _doubleconstant   reduce using rule 55 (STMT)
    _doubleconstant   [reduce using rule 64 (FORSTMT)]
    _stringconstant   reduce using rule 55 (STMT)
    _stringconstant   [reduce using rule 64 (FORSTMT)]
    _booleanconstant  reduce using rule 55 (STMT)
    _booleanconstant  [reduce using rule 64 (FORSTMT)]
    _id               reduce using rule 55 (STMT)
    _id               [reduce using rule 64 (FORSTMT)]
    _exponent         reduce using rule 55 (STMT)
    _exponent         [reduce using rule 64 (FORSTMT)]
    $default          reduce using rule 55 (STMT)


State 208

   63 FORSTMT: _for _leftparen EXPRO _semicolon EXPR _semicolon EXPRO _rightparen STMT .

    $default  reduce using rule 63 (FORSTMT)


State 209

   13 VARIABLE: _id . _assignop CALL
   19 TYPE: _id .
   93 LVALUE: _id .
   96 CALL: _id . _leftparen ACTUALS _rightparen
   97     | _id . _period _id _leftparen ACTUALS _rightparen

    _period     shift, and go to state 59
    _assignop   shift, and go to state 22
    _leftparen  shift, and go to state 60

    _leftbracket  reduce using rule 19 (TYPE)
    _leftbracket  [reduce using rule 93 (LVALUE)]
    _period       [reduce using rule 93 (LVALUE)]
    _assignop     [reduce using rule 93 (LVALUE)]
    _id           reduce using rule 19 (TYPE)
    $default      reduce using rule 93 (LVALUE)


State 210

   62 FORSTMT: _for _leftparen EXPRO _semicolon EXPR _semicolon EXPRO _rightparen _leftbrace STMTM . _rightbrace

    _rightbrace  shift, and go to state 211


State 211

   62 FORSTMT: _for _leftparen EXPRO _semicolon EXPR _semicolon EXPRO _rightparen _leftbrace STMTM _rightbrace .

    $default  reduce using rule 62 (FORSTMT)
